// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: box2d.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_box2d_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_box2d_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_box2d_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_box2d_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_box2d_2eproto;
namespace box2d {
class PbBody;
class PbBodyDefaultTypeInternal;
extern PbBodyDefaultTypeInternal _PbBody_default_instance_;
class PbFilter;
class PbFilterDefaultTypeInternal;
extern PbFilterDefaultTypeInternal _PbFilter_default_instance_;
class PbFixture;
class PbFixtureDefaultTypeInternal;
extern PbFixtureDefaultTypeInternal _PbFixture_default_instance_;
class PbJoint;
class PbJointDefaultTypeInternal;
extern PbJointDefaultTypeInternal _PbJoint_default_instance_;
class PbShape;
class PbShapeDefaultTypeInternal;
extern PbShapeDefaultTypeInternal _PbShape_default_instance_;
class PbVec2;
class PbVec2DefaultTypeInternal;
extern PbVec2DefaultTypeInternal _PbVec2_default_instance_;
class PbWorld;
class PbWorldDefaultTypeInternal;
extern PbWorldDefaultTypeInternal _PbWorld_default_instance_;
}  // namespace box2d
PROTOBUF_NAMESPACE_OPEN
template<> ::box2d::PbBody* Arena::CreateMaybeMessage<::box2d::PbBody>(Arena*);
template<> ::box2d::PbFilter* Arena::CreateMaybeMessage<::box2d::PbFilter>(Arena*);
template<> ::box2d::PbFixture* Arena::CreateMaybeMessage<::box2d::PbFixture>(Arena*);
template<> ::box2d::PbJoint* Arena::CreateMaybeMessage<::box2d::PbJoint>(Arena*);
template<> ::box2d::PbShape* Arena::CreateMaybeMessage<::box2d::PbShape>(Arena*);
template<> ::box2d::PbVec2* Arena::CreateMaybeMessage<::box2d::PbVec2>(Arena*);
template<> ::box2d::PbWorld* Arena::CreateMaybeMessage<::box2d::PbWorld>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace box2d {

enum PbBodyType : int {
  STATIC = 0,
  DYNAMIC = 1,
  KINEMATIC = 2
};
bool PbBodyType_IsValid(int value);
constexpr PbBodyType PbBodyType_MIN = STATIC;
constexpr PbBodyType PbBodyType_MAX = KINEMATIC;
constexpr int PbBodyType_ARRAYSIZE = PbBodyType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PbBodyType_descriptor();
template<typename T>
inline const std::string& PbBodyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PbBodyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PbBodyType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PbBodyType_descriptor(), enum_t_value);
}
inline bool PbBodyType_Parse(
    const std::string& name, PbBodyType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PbBodyType>(
    PbBodyType_descriptor(), name, value);
}
enum PbShapeType : int {
  CIRCLE = 1,
  POLYGON = 2,
  EDGE = 3,
  LOOP = 4
};
bool PbShapeType_IsValid(int value);
constexpr PbShapeType PbShapeType_MIN = CIRCLE;
constexpr PbShapeType PbShapeType_MAX = LOOP;
constexpr int PbShapeType_ARRAYSIZE = PbShapeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PbShapeType_descriptor();
template<typename T>
inline const std::string& PbShapeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PbShapeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PbShapeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PbShapeType_descriptor(), enum_t_value);
}
inline bool PbShapeType_Parse(
    const std::string& name, PbShapeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PbShapeType>(
    PbShapeType_descriptor(), name, value);
}
enum PbJointType : int {
  DISTANCE = 1,
  REVOLUTE = 2,
  PRISMATIC = 3,
  PULLEY = 4,
  MOUSE = 5,
  GEAR = 6,
  WHEEL = 7,
  WELD = 8,
  FRICTION = 9,
  ROPE = 10,
  CONSTANT_VOLUME = 11,
  LINE = 12
};
bool PbJointType_IsValid(int value);
constexpr PbJointType PbJointType_MIN = DISTANCE;
constexpr PbJointType PbJointType_MAX = LINE;
constexpr int PbJointType_ARRAYSIZE = PbJointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PbJointType_descriptor();
template<typename T>
inline const std::string& PbJointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PbJointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PbJointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PbJointType_descriptor(), enum_t_value);
}
inline bool PbJointType_Parse(
    const std::string& name, PbJointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PbJointType>(
    PbJointType_descriptor(), name, value);
}
// ===================================================================

class PbVec2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:box2d.PbVec2) */ {
 public:
  inline PbVec2() : PbVec2(nullptr) {};
  virtual ~PbVec2();

  PbVec2(const PbVec2& from);
  PbVec2(PbVec2&& from) noexcept
    : PbVec2() {
    *this = ::std::move(from);
  }

  inline PbVec2& operator=(const PbVec2& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbVec2& operator=(PbVec2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PbVec2& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbVec2* internal_default_instance() {
    return reinterpret_cast<const PbVec2*>(
               &_PbVec2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PbVec2& a, PbVec2& b) {
    a.Swap(&b);
  }
  inline void Swap(PbVec2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbVec2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbVec2* New() const final {
    return CreateMaybeMessage<PbVec2>(nullptr);
  }

  PbVec2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbVec2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PbVec2& from);
  void MergeFrom(const PbVec2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbVec2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "box2d.PbVec2";
  }
  protected:
  explicit PbVec2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_box2d_2eproto);
    return ::descriptor_table_box2d_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required float x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // required float y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:box2d.PbVec2)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_box2d_2eproto;
};
// -------------------------------------------------------------------

class PbFilter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:box2d.PbFilter) */ {
 public:
  inline PbFilter() : PbFilter(nullptr) {};
  virtual ~PbFilter();

  PbFilter(const PbFilter& from);
  PbFilter(PbFilter&& from) noexcept
    : PbFilter() {
    *this = ::std::move(from);
  }

  inline PbFilter& operator=(const PbFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbFilter& operator=(PbFilter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PbFilter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbFilter* internal_default_instance() {
    return reinterpret_cast<const PbFilter*>(
               &_PbFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PbFilter& a, PbFilter& b) {
    a.Swap(&b);
  }
  inline void Swap(PbFilter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbFilter* New() const final {
    return CreateMaybeMessage<PbFilter>(nullptr);
  }

  PbFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbFilter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PbFilter& from);
  void MergeFrom(const PbFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbFilter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "box2d.PbFilter";
  }
  protected:
  explicit PbFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_box2d_2eproto);
    return ::descriptor_table_box2d_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryBitsFieldNumber = 1,
    kMaskBitsFieldNumber = 2,
    kGroupIndexFieldNumber = 3,
  };
  // optional int32 category_bits = 1;
  bool has_category_bits() const;
  private:
  bool _internal_has_category_bits() const;
  public:
  void clear_category_bits();
  ::PROTOBUF_NAMESPACE_ID::int32 category_bits() const;
  void set_category_bits(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_category_bits() const;
  void _internal_set_category_bits(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 mask_bits = 2;
  bool has_mask_bits() const;
  private:
  bool _internal_has_mask_bits() const;
  public:
  void clear_mask_bits();
  ::PROTOBUF_NAMESPACE_ID::int32 mask_bits() const;
  void set_mask_bits(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mask_bits() const;
  void _internal_set_mask_bits(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 group_index = 3;
  bool has_group_index() const;
  private:
  bool _internal_has_group_index() const;
  public:
  void clear_group_index();
  ::PROTOBUF_NAMESPACE_ID::int32 group_index() const;
  void set_group_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_group_index() const;
  void _internal_set_group_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:box2d.PbFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 category_bits_;
  ::PROTOBUF_NAMESPACE_ID::int32 mask_bits_;
  ::PROTOBUF_NAMESPACE_ID::int32 group_index_;
  friend struct ::TableStruct_box2d_2eproto;
};
// -------------------------------------------------------------------

class PbShape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:box2d.PbShape) */ {
 public:
  inline PbShape() : PbShape(nullptr) {};
  virtual ~PbShape();

  PbShape(const PbShape& from);
  PbShape(PbShape&& from) noexcept
    : PbShape() {
    *this = ::std::move(from);
  }

  inline PbShape& operator=(const PbShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbShape& operator=(PbShape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PbShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbShape* internal_default_instance() {
    return reinterpret_cast<const PbShape*>(
               &_PbShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PbShape& a, PbShape& b) {
    a.Swap(&b);
  }
  inline void Swap(PbShape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbShape* New() const final {
    return CreateMaybeMessage<PbShape>(nullptr);
  }

  PbShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PbShape& from);
  void MergeFrom(const PbShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "box2d.PbShape";
  }
  protected:
  explicit PbShape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_box2d_2eproto);
    return ::descriptor_table_box2d_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 20,
    kNormalsFieldNumber = 21,
    kCenterFieldNumber = 10,
    kCentroidFieldNumber = 22,
    kTagFieldNumber = 1,
    kRadiusFieldNumber = 11,
    kTypeFieldNumber = 2,
  };
  // repeated .box2d.PbVec2 points = 20;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::box2d::PbVec2* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbVec2 >*
      mutable_points();
  private:
  const ::box2d::PbVec2& _internal_points(int index) const;
  ::box2d::PbVec2* _internal_add_points();
  public:
  const ::box2d::PbVec2& points(int index) const;
  ::box2d::PbVec2* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbVec2 >&
      points() const;

  // repeated .box2d.PbVec2 normals = 21;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  ::box2d::PbVec2* mutable_normals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbVec2 >*
      mutable_normals();
  private:
  const ::box2d::PbVec2& _internal_normals(int index) const;
  ::box2d::PbVec2* _internal_add_normals();
  public:
  const ::box2d::PbVec2& normals(int index) const;
  ::box2d::PbVec2* add_normals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbVec2 >&
      normals() const;

  // optional .box2d.PbVec2 center = 10;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::box2d::PbVec2& center() const;
  ::box2d::PbVec2* release_center();
  ::box2d::PbVec2* mutable_center();
  void set_allocated_center(::box2d::PbVec2* center);
  private:
  const ::box2d::PbVec2& _internal_center() const;
  ::box2d::PbVec2* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::box2d::PbVec2* center);
  ::box2d::PbVec2* unsafe_arena_release_center();

  // optional .box2d.PbVec2 centroid = 22;
  bool has_centroid() const;
  private:
  bool _internal_has_centroid() const;
  public:
  void clear_centroid();
  const ::box2d::PbVec2& centroid() const;
  ::box2d::PbVec2* release_centroid();
  ::box2d::PbVec2* mutable_centroid();
  void set_allocated_centroid(::box2d::PbVec2* centroid);
  private:
  const ::box2d::PbVec2& _internal_centroid() const;
  ::box2d::PbVec2* _internal_mutable_centroid();
  public:
  void unsafe_arena_set_allocated_centroid(
      ::box2d::PbVec2* centroid);
  ::box2d::PbVec2* unsafe_arena_release_centroid();

  // optional int64 tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::int64 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float radius = 11;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  float radius() const;
  void set_radius(float value);
  private:
  float _internal_radius() const;
  void _internal_set_radius(float value);
  public:

  // required .box2d.PbShapeType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::box2d::PbShapeType type() const;
  void set_type(::box2d::PbShapeType value);
  private:
  ::box2d::PbShapeType _internal_type() const;
  void _internal_set_type(::box2d::PbShapeType value);
  public:

  // @@protoc_insertion_point(class_scope:box2d.PbShape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbVec2 > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbVec2 > normals_;
  ::box2d::PbVec2* center_;
  ::box2d::PbVec2* centroid_;
  ::PROTOBUF_NAMESPACE_ID::int64 tag_;
  float radius_;
  int type_;
  friend struct ::TableStruct_box2d_2eproto;
};
// -------------------------------------------------------------------

class PbFixture PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:box2d.PbFixture) */ {
 public:
  inline PbFixture() : PbFixture(nullptr) {};
  virtual ~PbFixture();

  PbFixture(const PbFixture& from);
  PbFixture(PbFixture&& from) noexcept
    : PbFixture() {
    *this = ::std::move(from);
  }

  inline PbFixture& operator=(const PbFixture& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbFixture& operator=(PbFixture&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PbFixture& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbFixture* internal_default_instance() {
    return reinterpret_cast<const PbFixture*>(
               &_PbFixture_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PbFixture& a, PbFixture& b) {
    a.Swap(&b);
  }
  inline void Swap(PbFixture* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbFixture* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbFixture* New() const final {
    return CreateMaybeMessage<PbFixture>(nullptr);
  }

  PbFixture* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbFixture>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PbFixture& from);
  void MergeFrom(const PbFixture& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbFixture* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "box2d.PbFixture";
  }
  protected:
  explicit PbFixture(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_box2d_2eproto);
    return ::descriptor_table_box2d_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 10,
    kShapeFieldNumber = 11,
    kTagFieldNumber = 1,
    kRestitutionFieldNumber = 2,
    kFrictionFieldNumber = 3,
    kDensityFieldNumber = 4,
    kSensorFieldNumber = 5,
  };
  // optional .box2d.PbFilter filter = 10;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::box2d::PbFilter& filter() const;
  ::box2d::PbFilter* release_filter();
  ::box2d::PbFilter* mutable_filter();
  void set_allocated_filter(::box2d::PbFilter* filter);
  private:
  const ::box2d::PbFilter& _internal_filter() const;
  ::box2d::PbFilter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::box2d::PbFilter* filter);
  ::box2d::PbFilter* unsafe_arena_release_filter();

  // optional .box2d.PbShape shape = 11;
  bool has_shape() const;
  private:
  bool _internal_has_shape() const;
  public:
  void clear_shape();
  const ::box2d::PbShape& shape() const;
  ::box2d::PbShape* release_shape();
  ::box2d::PbShape* mutable_shape();
  void set_allocated_shape(::box2d::PbShape* shape);
  private:
  const ::box2d::PbShape& _internal_shape() const;
  ::box2d::PbShape* _internal_mutable_shape();
  public:
  void unsafe_arena_set_allocated_shape(
      ::box2d::PbShape* shape);
  ::box2d::PbShape* unsafe_arena_release_shape();

  // optional int64 tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::int64 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional float restitution = 2;
  bool has_restitution() const;
  private:
  bool _internal_has_restitution() const;
  public:
  void clear_restitution();
  float restitution() const;
  void set_restitution(float value);
  private:
  float _internal_restitution() const;
  void _internal_set_restitution(float value);
  public:

  // optional float friction = 3;
  bool has_friction() const;
  private:
  bool _internal_has_friction() const;
  public:
  void clear_friction();
  float friction() const;
  void set_friction(float value);
  private:
  float _internal_friction() const;
  void _internal_set_friction(float value);
  public:

  // optional float density = 4;
  bool has_density() const;
  private:
  bool _internal_has_density() const;
  public:
  void clear_density();
  float density() const;
  void set_density(float value);
  private:
  float _internal_density() const;
  void _internal_set_density(float value);
  public:

  // optional bool sensor = 5;
  bool has_sensor() const;
  private:
  bool _internal_has_sensor() const;
  public:
  void clear_sensor();
  bool sensor() const;
  void set_sensor(bool value);
  private:
  bool _internal_sensor() const;
  void _internal_set_sensor(bool value);
  public:

  // @@protoc_insertion_point(class_scope:box2d.PbFixture)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::box2d::PbFilter* filter_;
  ::box2d::PbShape* shape_;
  ::PROTOBUF_NAMESPACE_ID::int64 tag_;
  float restitution_;
  float friction_;
  float density_;
  bool sensor_;
  friend struct ::TableStruct_box2d_2eproto;
};
// -------------------------------------------------------------------

class PbJoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:box2d.PbJoint) */ {
 public:
  inline PbJoint() : PbJoint(nullptr) {};
  virtual ~PbJoint();

  PbJoint(const PbJoint& from);
  PbJoint(PbJoint&& from) noexcept
    : PbJoint() {
    *this = ::std::move(from);
  }

  inline PbJoint& operator=(const PbJoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbJoint& operator=(PbJoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PbJoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbJoint* internal_default_instance() {
    return reinterpret_cast<const PbJoint*>(
               &_PbJoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PbJoint& a, PbJoint& b) {
    a.Swap(&b);
  }
  inline void Swap(PbJoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbJoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbJoint* New() const final {
    return CreateMaybeMessage<PbJoint>(nullptr);
  }

  PbJoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbJoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PbJoint& from);
  void MergeFrom(const PbJoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbJoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "box2d.PbJoint";
  }
  protected:
  explicit PbJoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_box2d_2eproto);
    return ::descriptor_table_box2d_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodiesFieldNumber = 110,
    kJointsFieldNumber = 111,
    kLocalAnchorAFieldNumber = 6,
    kLocalAnchorBFieldNumber = 7,
    kLocalAxisAFieldNumber = 20,
    kGroundAnchorAFieldNumber = 40,
    kGroundAnchorBFieldNumber = 41,
    kTargetFieldNumber = 50,
    kTagFieldNumber = 1,
    kBodyAFieldNumber = 3,
    kBodyBFieldNumber = 4,
    kRefAngleFieldNumber = 10,
    kCollideConnectedFieldNumber = 5,
    kEnableLimitFieldNumber = 12,
    kEnableMotorFieldNumber = 15,
    kLowerLimitFieldNumber = 13,
    kUpperLimitFieldNumber = 14,
    kMotorSpeedFieldNumber = 16,
    kMaxMotorTorqueFieldNumber = 17,
    kMaxMotorForceFieldNumber = 21,
    kLengthFieldNumber = 30,
    kFrequencyFieldNumber = 31,
    kDampingRatioFieldNumber = 32,
    kTargetVolumeFieldNumber = 112,
    kLengthAFieldNumber = 42,
    kLengthBFieldNumber = 43,
    kRatioFieldNumber = 44,
    kMaxLengthAFieldNumber = 45,
    kMaxLengthBFieldNumber = 46,
    kMaxForceFieldNumber = 51,
    kJoint1FieldNumber = 61,
    kJoint2FieldNumber = 62,
    kSpringFrequencyFieldNumber = 70,
    kSpringDampingRatioFieldNumber = 71,
    kMaxTorqueFieldNumber = 90,
    kMaxLengthFieldNumber = 100,
    kTypeFieldNumber = 2,
  };
  // repeated int32 bodies = 110;
  int bodies_size() const;
  private:
  int _internal_bodies_size() const;
  public:
  void clear_bodies();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bodies(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bodies() const;
  void _internal_add_bodies(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bodies();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bodies(int index) const;
  void set_bodies(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bodies(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bodies() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bodies();

  // repeated int32 joints = 111;
  int joints_size() const;
  private:
  int _internal_joints_size() const;
  public:
  void clear_joints();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_joints(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_joints() const;
  void _internal_add_joints(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_joints();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 joints(int index) const;
  void set_joints(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_joints(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      joints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_joints();

  // optional .box2d.PbVec2 local_anchor_a = 6;
  bool has_local_anchor_a() const;
  private:
  bool _internal_has_local_anchor_a() const;
  public:
  void clear_local_anchor_a();
  const ::box2d::PbVec2& local_anchor_a() const;
  ::box2d::PbVec2* release_local_anchor_a();
  ::box2d::PbVec2* mutable_local_anchor_a();
  void set_allocated_local_anchor_a(::box2d::PbVec2* local_anchor_a);
  private:
  const ::box2d::PbVec2& _internal_local_anchor_a() const;
  ::box2d::PbVec2* _internal_mutable_local_anchor_a();
  public:
  void unsafe_arena_set_allocated_local_anchor_a(
      ::box2d::PbVec2* local_anchor_a);
  ::box2d::PbVec2* unsafe_arena_release_local_anchor_a();

  // optional .box2d.PbVec2 local_anchor_b = 7;
  bool has_local_anchor_b() const;
  private:
  bool _internal_has_local_anchor_b() const;
  public:
  void clear_local_anchor_b();
  const ::box2d::PbVec2& local_anchor_b() const;
  ::box2d::PbVec2* release_local_anchor_b();
  ::box2d::PbVec2* mutable_local_anchor_b();
  void set_allocated_local_anchor_b(::box2d::PbVec2* local_anchor_b);
  private:
  const ::box2d::PbVec2& _internal_local_anchor_b() const;
  ::box2d::PbVec2* _internal_mutable_local_anchor_b();
  public:
  void unsafe_arena_set_allocated_local_anchor_b(
      ::box2d::PbVec2* local_anchor_b);
  ::box2d::PbVec2* unsafe_arena_release_local_anchor_b();

  // optional .box2d.PbVec2 local_axis_a = 20;
  bool has_local_axis_a() const;
  private:
  bool _internal_has_local_axis_a() const;
  public:
  void clear_local_axis_a();
  const ::box2d::PbVec2& local_axis_a() const;
  ::box2d::PbVec2* release_local_axis_a();
  ::box2d::PbVec2* mutable_local_axis_a();
  void set_allocated_local_axis_a(::box2d::PbVec2* local_axis_a);
  private:
  const ::box2d::PbVec2& _internal_local_axis_a() const;
  ::box2d::PbVec2* _internal_mutable_local_axis_a();
  public:
  void unsafe_arena_set_allocated_local_axis_a(
      ::box2d::PbVec2* local_axis_a);
  ::box2d::PbVec2* unsafe_arena_release_local_axis_a();

  // optional .box2d.PbVec2 ground_anchor_a = 40;
  bool has_ground_anchor_a() const;
  private:
  bool _internal_has_ground_anchor_a() const;
  public:
  void clear_ground_anchor_a();
  const ::box2d::PbVec2& ground_anchor_a() const;
  ::box2d::PbVec2* release_ground_anchor_a();
  ::box2d::PbVec2* mutable_ground_anchor_a();
  void set_allocated_ground_anchor_a(::box2d::PbVec2* ground_anchor_a);
  private:
  const ::box2d::PbVec2& _internal_ground_anchor_a() const;
  ::box2d::PbVec2* _internal_mutable_ground_anchor_a();
  public:
  void unsafe_arena_set_allocated_ground_anchor_a(
      ::box2d::PbVec2* ground_anchor_a);
  ::box2d::PbVec2* unsafe_arena_release_ground_anchor_a();

  // optional .box2d.PbVec2 ground_anchor_b = 41;
  bool has_ground_anchor_b() const;
  private:
  bool _internal_has_ground_anchor_b() const;
  public:
  void clear_ground_anchor_b();
  const ::box2d::PbVec2& ground_anchor_b() const;
  ::box2d::PbVec2* release_ground_anchor_b();
  ::box2d::PbVec2* mutable_ground_anchor_b();
  void set_allocated_ground_anchor_b(::box2d::PbVec2* ground_anchor_b);
  private:
  const ::box2d::PbVec2& _internal_ground_anchor_b() const;
  ::box2d::PbVec2* _internal_mutable_ground_anchor_b();
  public:
  void unsafe_arena_set_allocated_ground_anchor_b(
      ::box2d::PbVec2* ground_anchor_b);
  ::box2d::PbVec2* unsafe_arena_release_ground_anchor_b();

  // optional .box2d.PbVec2 target = 50;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::box2d::PbVec2& target() const;
  ::box2d::PbVec2* release_target();
  ::box2d::PbVec2* mutable_target();
  void set_allocated_target(::box2d::PbVec2* target);
  private:
  const ::box2d::PbVec2& _internal_target() const;
  ::box2d::PbVec2* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::box2d::PbVec2* target);
  ::box2d::PbVec2* unsafe_arena_release_target();

  // optional int64 tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::int64 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional int32 body_a = 3;
  bool has_body_a() const;
  private:
  bool _internal_has_body_a() const;
  public:
  void clear_body_a();
  ::PROTOBUF_NAMESPACE_ID::int32 body_a() const;
  void set_body_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_body_a() const;
  void _internal_set_body_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 body_b = 4;
  bool has_body_b() const;
  private:
  bool _internal_has_body_b() const;
  public:
  void clear_body_b();
  ::PROTOBUF_NAMESPACE_ID::int32 body_b() const;
  void set_body_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_body_b() const;
  void _internal_set_body_b(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float ref_angle = 10;
  bool has_ref_angle() const;
  private:
  bool _internal_has_ref_angle() const;
  public:
  void clear_ref_angle();
  float ref_angle() const;
  void set_ref_angle(float value);
  private:
  float _internal_ref_angle() const;
  void _internal_set_ref_angle(float value);
  public:

  // optional bool collideConnected = 5;
  bool has_collideconnected() const;
  private:
  bool _internal_has_collideconnected() const;
  public:
  void clear_collideconnected();
  bool collideconnected() const;
  void set_collideconnected(bool value);
  private:
  bool _internal_collideconnected() const;
  void _internal_set_collideconnected(bool value);
  public:

  // optional bool enable_limit = 12;
  bool has_enable_limit() const;
  private:
  bool _internal_has_enable_limit() const;
  public:
  void clear_enable_limit();
  bool enable_limit() const;
  void set_enable_limit(bool value);
  private:
  bool _internal_enable_limit() const;
  void _internal_set_enable_limit(bool value);
  public:

  // optional bool enable_motor = 15;
  bool has_enable_motor() const;
  private:
  bool _internal_has_enable_motor() const;
  public:
  void clear_enable_motor();
  bool enable_motor() const;
  void set_enable_motor(bool value);
  private:
  bool _internal_enable_motor() const;
  void _internal_set_enable_motor(bool value);
  public:

  // optional float lower_limit = 13;
  bool has_lower_limit() const;
  private:
  bool _internal_has_lower_limit() const;
  public:
  void clear_lower_limit();
  float lower_limit() const;
  void set_lower_limit(float value);
  private:
  float _internal_lower_limit() const;
  void _internal_set_lower_limit(float value);
  public:

  // optional float upper_limit = 14;
  bool has_upper_limit() const;
  private:
  bool _internal_has_upper_limit() const;
  public:
  void clear_upper_limit();
  float upper_limit() const;
  void set_upper_limit(float value);
  private:
  float _internal_upper_limit() const;
  void _internal_set_upper_limit(float value);
  public:

  // optional float motor_speed = 16;
  bool has_motor_speed() const;
  private:
  bool _internal_has_motor_speed() const;
  public:
  void clear_motor_speed();
  float motor_speed() const;
  void set_motor_speed(float value);
  private:
  float _internal_motor_speed() const;
  void _internal_set_motor_speed(float value);
  public:

  // optional float max_motor_torque = 17;
  bool has_max_motor_torque() const;
  private:
  bool _internal_has_max_motor_torque() const;
  public:
  void clear_max_motor_torque();
  float max_motor_torque() const;
  void set_max_motor_torque(float value);
  private:
  float _internal_max_motor_torque() const;
  void _internal_set_max_motor_torque(float value);
  public:

  // optional float max_motor_force = 21;
  bool has_max_motor_force() const;
  private:
  bool _internal_has_max_motor_force() const;
  public:
  void clear_max_motor_force();
  float max_motor_force() const;
  void set_max_motor_force(float value);
  private:
  float _internal_max_motor_force() const;
  void _internal_set_max_motor_force(float value);
  public:

  // optional float length = 30;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  float length() const;
  void set_length(float value);
  private:
  float _internal_length() const;
  void _internal_set_length(float value);
  public:

  // optional float frequency = 31;
  bool has_frequency() const;
  private:
  bool _internal_has_frequency() const;
  public:
  void clear_frequency();
  float frequency() const;
  void set_frequency(float value);
  private:
  float _internal_frequency() const;
  void _internal_set_frequency(float value);
  public:

  // optional float damping_ratio = 32;
  bool has_damping_ratio() const;
  private:
  bool _internal_has_damping_ratio() const;
  public:
  void clear_damping_ratio();
  float damping_ratio() const;
  void set_damping_ratio(float value);
  private:
  float _internal_damping_ratio() const;
  void _internal_set_damping_ratio(float value);
  public:

  // optional float target_volume = 112;
  bool has_target_volume() const;
  private:
  bool _internal_has_target_volume() const;
  public:
  void clear_target_volume();
  float target_volume() const;
  void set_target_volume(float value);
  private:
  float _internal_target_volume() const;
  void _internal_set_target_volume(float value);
  public:

  // optional float length_a = 42;
  bool has_length_a() const;
  private:
  bool _internal_has_length_a() const;
  public:
  void clear_length_a();
  float length_a() const;
  void set_length_a(float value);
  private:
  float _internal_length_a() const;
  void _internal_set_length_a(float value);
  public:

  // optional float length_b = 43;
  bool has_length_b() const;
  private:
  bool _internal_has_length_b() const;
  public:
  void clear_length_b();
  float length_b() const;
  void set_length_b(float value);
  private:
  float _internal_length_b() const;
  void _internal_set_length_b(float value);
  public:

  // optional float ratio = 44;
  bool has_ratio() const;
  private:
  bool _internal_has_ratio() const;
  public:
  void clear_ratio();
  float ratio() const;
  void set_ratio(float value);
  private:
  float _internal_ratio() const;
  void _internal_set_ratio(float value);
  public:

  // optional float max_length_a = 45;
  bool has_max_length_a() const;
  private:
  bool _internal_has_max_length_a() const;
  public:
  void clear_max_length_a();
  float max_length_a() const;
  void set_max_length_a(float value);
  private:
  float _internal_max_length_a() const;
  void _internal_set_max_length_a(float value);
  public:

  // optional float max_length_b = 46;
  bool has_max_length_b() const;
  private:
  bool _internal_has_max_length_b() const;
  public:
  void clear_max_length_b();
  float max_length_b() const;
  void set_max_length_b(float value);
  private:
  float _internal_max_length_b() const;
  void _internal_set_max_length_b(float value);
  public:

  // optional float max_force = 51;
  bool has_max_force() const;
  private:
  bool _internal_has_max_force() const;
  public:
  void clear_max_force();
  float max_force() const;
  void set_max_force(float value);
  private:
  float _internal_max_force() const;
  void _internal_set_max_force(float value);
  public:

  // optional int32 joint1 = 61;
  bool has_joint1() const;
  private:
  bool _internal_has_joint1() const;
  public:
  void clear_joint1();
  ::PROTOBUF_NAMESPACE_ID::int32 joint1() const;
  void set_joint1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_joint1() const;
  void _internal_set_joint1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 joint2 = 62;
  bool has_joint2() const;
  private:
  bool _internal_has_joint2() const;
  public:
  void clear_joint2();
  ::PROTOBUF_NAMESPACE_ID::int32 joint2() const;
  void set_joint2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_joint2() const;
  void _internal_set_joint2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float spring_frequency = 70;
  bool has_spring_frequency() const;
  private:
  bool _internal_has_spring_frequency() const;
  public:
  void clear_spring_frequency();
  float spring_frequency() const;
  void set_spring_frequency(float value);
  private:
  float _internal_spring_frequency() const;
  void _internal_set_spring_frequency(float value);
  public:

  // optional float spring_damping_ratio = 71;
  bool has_spring_damping_ratio() const;
  private:
  bool _internal_has_spring_damping_ratio() const;
  public:
  void clear_spring_damping_ratio();
  float spring_damping_ratio() const;
  void set_spring_damping_ratio(float value);
  private:
  float _internal_spring_damping_ratio() const;
  void _internal_set_spring_damping_ratio(float value);
  public:

  // optional float max_torque = 90;
  bool has_max_torque() const;
  private:
  bool _internal_has_max_torque() const;
  public:
  void clear_max_torque();
  float max_torque() const;
  void set_max_torque(float value);
  private:
  float _internal_max_torque() const;
  void _internal_set_max_torque(float value);
  public:

  // optional float max_length = 100;
  bool has_max_length() const;
  private:
  bool _internal_has_max_length() const;
  public:
  void clear_max_length();
  float max_length() const;
  void set_max_length(float value);
  private:
  float _internal_max_length() const;
  void _internal_set_max_length(float value);
  public:

  // required .box2d.PbJointType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::box2d::PbJointType type() const;
  void set_type(::box2d::PbJointType value);
  private:
  ::box2d::PbJointType _internal_type() const;
  void _internal_set_type(::box2d::PbJointType value);
  public:

  // @@protoc_insertion_point(class_scope:box2d.PbJoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bodies_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > joints_;
  ::box2d::PbVec2* local_anchor_a_;
  ::box2d::PbVec2* local_anchor_b_;
  ::box2d::PbVec2* local_axis_a_;
  ::box2d::PbVec2* ground_anchor_a_;
  ::box2d::PbVec2* ground_anchor_b_;
  ::box2d::PbVec2* target_;
  ::PROTOBUF_NAMESPACE_ID::int64 tag_;
  ::PROTOBUF_NAMESPACE_ID::int32 body_a_;
  ::PROTOBUF_NAMESPACE_ID::int32 body_b_;
  float ref_angle_;
  bool collideconnected_;
  bool enable_limit_;
  bool enable_motor_;
  float lower_limit_;
  float upper_limit_;
  float motor_speed_;
  float max_motor_torque_;
  float max_motor_force_;
  float length_;
  float frequency_;
  float damping_ratio_;
  float target_volume_;
  float length_a_;
  float length_b_;
  float ratio_;
  float max_length_a_;
  float max_length_b_;
  float max_force_;
  ::PROTOBUF_NAMESPACE_ID::int32 joint1_;
  ::PROTOBUF_NAMESPACE_ID::int32 joint2_;
  float spring_frequency_;
  float spring_damping_ratio_;
  float max_torque_;
  float max_length_;
  int type_;
  friend struct ::TableStruct_box2d_2eproto;
};
// -------------------------------------------------------------------

class PbBody PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:box2d.PbBody) */ {
 public:
  inline PbBody() : PbBody(nullptr) {};
  virtual ~PbBody();

  PbBody(const PbBody& from);
  PbBody(PbBody&& from) noexcept
    : PbBody() {
    *this = ::std::move(from);
  }

  inline PbBody& operator=(const PbBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbBody& operator=(PbBody&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PbBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbBody* internal_default_instance() {
    return reinterpret_cast<const PbBody*>(
               &_PbBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PbBody& a, PbBody& b) {
    a.Swap(&b);
  }
  inline void Swap(PbBody* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbBody* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbBody* New() const final {
    return CreateMaybeMessage<PbBody>(nullptr);
  }

  PbBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PbBody& from);
  void MergeFrom(const PbBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "box2d.PbBody";
  }
  protected:
  explicit PbBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_box2d_2eproto);
    return ::descriptor_table_box2d_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFixturesFieldNumber = 100,
    kUUIDFieldNumber = 60,
    kPositionFieldNumber = 10,
    kLinearVelocityFieldNumber = 12,
    kForceFieldNumber = 14,
    kTagFieldNumber = 1,
    kTypeFieldNumber = 2,
    kAngleFieldNumber = 11,
    kAngularVelocityFieldNumber = 13,
    kTorqueFieldNumber = 15,
    kMassFieldNumber = 16,
    kIFieldNumber = 17,
    kFixedRotationFieldNumber = 57,
    kLinearDampingFieldNumber = 50,
    kAngularDampingFieldNumber = 51,
    kGravityScaleFieldNumber = 52,
    kBulletFieldNumber = 53,
    kAllowSleepFieldNumber = 54,
    kAwakeFieldNumber = 55,
    kActiveFieldNumber = 56,
  };
  // repeated .box2d.PbFixture fixtures = 100;
  int fixtures_size() const;
  private:
  int _internal_fixtures_size() const;
  public:
  void clear_fixtures();
  ::box2d::PbFixture* mutable_fixtures(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbFixture >*
      mutable_fixtures();
  private:
  const ::box2d::PbFixture& _internal_fixtures(int index) const;
  ::box2d::PbFixture* _internal_add_fixtures();
  public:
  const ::box2d::PbFixture& fixtures(int index) const;
  ::box2d::PbFixture* add_fixtures();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbFixture >&
      fixtures() const;

  // optional string UUID = 60;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional .box2d.PbVec2 position = 10;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::box2d::PbVec2& position() const;
  ::box2d::PbVec2* release_position();
  ::box2d::PbVec2* mutable_position();
  void set_allocated_position(::box2d::PbVec2* position);
  private:
  const ::box2d::PbVec2& _internal_position() const;
  ::box2d::PbVec2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::box2d::PbVec2* position);
  ::box2d::PbVec2* unsafe_arena_release_position();

  // optional .box2d.PbVec2 linear_velocity = 12;
  bool has_linear_velocity() const;
  private:
  bool _internal_has_linear_velocity() const;
  public:
  void clear_linear_velocity();
  const ::box2d::PbVec2& linear_velocity() const;
  ::box2d::PbVec2* release_linear_velocity();
  ::box2d::PbVec2* mutable_linear_velocity();
  void set_allocated_linear_velocity(::box2d::PbVec2* linear_velocity);
  private:
  const ::box2d::PbVec2& _internal_linear_velocity() const;
  ::box2d::PbVec2* _internal_mutable_linear_velocity();
  public:
  void unsafe_arena_set_allocated_linear_velocity(
      ::box2d::PbVec2* linear_velocity);
  ::box2d::PbVec2* unsafe_arena_release_linear_velocity();

  // optional .box2d.PbVec2 force = 14;
  bool has_force() const;
  private:
  bool _internal_has_force() const;
  public:
  void clear_force();
  const ::box2d::PbVec2& force() const;
  ::box2d::PbVec2* release_force();
  ::box2d::PbVec2* mutable_force();
  void set_allocated_force(::box2d::PbVec2* force);
  private:
  const ::box2d::PbVec2& _internal_force() const;
  ::box2d::PbVec2* _internal_mutable_force();
  public:
  void unsafe_arena_set_allocated_force(
      ::box2d::PbVec2* force);
  ::box2d::PbVec2* unsafe_arena_release_force();

  // optional int64 tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::int64 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required .box2d.PbBodyType type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::box2d::PbBodyType type() const;
  void set_type(::box2d::PbBodyType value);
  private:
  ::box2d::PbBodyType _internal_type() const;
  void _internal_set_type(::box2d::PbBodyType value);
  public:

  // optional float angle = 11;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  // optional float angular_velocity = 13;
  bool has_angular_velocity() const;
  private:
  bool _internal_has_angular_velocity() const;
  public:
  void clear_angular_velocity();
  float angular_velocity() const;
  void set_angular_velocity(float value);
  private:
  float _internal_angular_velocity() const;
  void _internal_set_angular_velocity(float value);
  public:

  // optional float torque = 15;
  bool has_torque() const;
  private:
  bool _internal_has_torque() const;
  public:
  void clear_torque();
  float torque() const;
  void set_torque(float value);
  private:
  float _internal_torque() const;
  void _internal_set_torque(float value);
  public:

  // optional float mass = 16;
  bool has_mass() const;
  private:
  bool _internal_has_mass() const;
  public:
  void clear_mass();
  float mass() const;
  void set_mass(float value);
  private:
  float _internal_mass() const;
  void _internal_set_mass(float value);
  public:

  // optional float I = 17;
  bool has_i() const;
  private:
  bool _internal_has_i() const;
  public:
  void clear_i();
  float i() const;
  void set_i(float value);
  private:
  float _internal_i() const;
  void _internal_set_i(float value);
  public:

  // optional bool fixed_rotation = 57;
  bool has_fixed_rotation() const;
  private:
  bool _internal_has_fixed_rotation() const;
  public:
  void clear_fixed_rotation();
  bool fixed_rotation() const;
  void set_fixed_rotation(bool value);
  private:
  bool _internal_fixed_rotation() const;
  void _internal_set_fixed_rotation(bool value);
  public:

  // optional float linear_damping = 50;
  bool has_linear_damping() const;
  private:
  bool _internal_has_linear_damping() const;
  public:
  void clear_linear_damping();
  float linear_damping() const;
  void set_linear_damping(float value);
  private:
  float _internal_linear_damping() const;
  void _internal_set_linear_damping(float value);
  public:

  // optional float angular_damping = 51;
  bool has_angular_damping() const;
  private:
  bool _internal_has_angular_damping() const;
  public:
  void clear_angular_damping();
  float angular_damping() const;
  void set_angular_damping(float value);
  private:
  float _internal_angular_damping() const;
  void _internal_set_angular_damping(float value);
  public:

  // optional float gravity_scale = 52;
  bool has_gravity_scale() const;
  private:
  bool _internal_has_gravity_scale() const;
  public:
  void clear_gravity_scale();
  float gravity_scale() const;
  void set_gravity_scale(float value);
  private:
  float _internal_gravity_scale() const;
  void _internal_set_gravity_scale(float value);
  public:

  // optional bool bullet = 53;
  bool has_bullet() const;
  private:
  bool _internal_has_bullet() const;
  public:
  void clear_bullet();
  bool bullet() const;
  void set_bullet(bool value);
  private:
  bool _internal_bullet() const;
  void _internal_set_bullet(bool value);
  public:

  // optional bool allow_sleep = 54;
  bool has_allow_sleep() const;
  private:
  bool _internal_has_allow_sleep() const;
  public:
  void clear_allow_sleep();
  bool allow_sleep() const;
  void set_allow_sleep(bool value);
  private:
  bool _internal_allow_sleep() const;
  void _internal_set_allow_sleep(bool value);
  public:

  // optional bool awake = 55;
  bool has_awake() const;
  private:
  bool _internal_has_awake() const;
  public:
  void clear_awake();
  bool awake() const;
  void set_awake(bool value);
  private:
  bool _internal_awake() const;
  void _internal_set_awake(bool value);
  public:

  // optional bool active = 56;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:box2d.PbBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbFixture > fixtures_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::box2d::PbVec2* position_;
  ::box2d::PbVec2* linear_velocity_;
  ::box2d::PbVec2* force_;
  ::PROTOBUF_NAMESPACE_ID::int64 tag_;
  int type_;
  float angle_;
  float angular_velocity_;
  float torque_;
  float mass_;
  float i_;
  bool fixed_rotation_;
  float linear_damping_;
  float angular_damping_;
  float gravity_scale_;
  bool bullet_;
  bool allow_sleep_;
  bool awake_;
  bool active_;
  friend struct ::TableStruct_box2d_2eproto;
};
// -------------------------------------------------------------------

class PbWorld PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:box2d.PbWorld) */ {
 public:
  inline PbWorld() : PbWorld(nullptr) {};
  virtual ~PbWorld();

  PbWorld(const PbWorld& from);
  PbWorld(PbWorld&& from) noexcept
    : PbWorld() {
    *this = ::std::move(from);
  }

  inline PbWorld& operator=(const PbWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbWorld& operator=(PbWorld&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PbWorld& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbWorld* internal_default_instance() {
    return reinterpret_cast<const PbWorld*>(
               &_PbWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PbWorld& a, PbWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(PbWorld* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbWorld* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbWorld* New() const final {
    return CreateMaybeMessage<PbWorld>(nullptr);
  }

  PbWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PbWorld& from);
  void MergeFrom(const PbWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "box2d.PbWorld";
  }
  protected:
  explicit PbWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_box2d_2eproto);
    return ::descriptor_table_box2d_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodiesFieldNumber = 20,
    kJointsFieldNumber = 21,
    kGravityFieldNumber = 2,
    kTagFieldNumber = 1,
    kAllowSleepFieldNumber = 3,
    kAutoClearForcesFieldNumber = 4,
    kWarmStartingFieldNumber = 5,
    kContinuousPhysicsFieldNumber = 6,
    kSubSteppingFieldNumber = 7,
  };
  // repeated .box2d.PbBody bodies = 20;
  int bodies_size() const;
  private:
  int _internal_bodies_size() const;
  public:
  void clear_bodies();
  ::box2d::PbBody* mutable_bodies(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbBody >*
      mutable_bodies();
  private:
  const ::box2d::PbBody& _internal_bodies(int index) const;
  ::box2d::PbBody* _internal_add_bodies();
  public:
  const ::box2d::PbBody& bodies(int index) const;
  ::box2d::PbBody* add_bodies();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbBody >&
      bodies() const;

  // repeated .box2d.PbJoint joints = 21;
  int joints_size() const;
  private:
  int _internal_joints_size() const;
  public:
  void clear_joints();
  ::box2d::PbJoint* mutable_joints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbJoint >*
      mutable_joints();
  private:
  const ::box2d::PbJoint& _internal_joints(int index) const;
  ::box2d::PbJoint* _internal_add_joints();
  public:
  const ::box2d::PbJoint& joints(int index) const;
  ::box2d::PbJoint* add_joints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbJoint >&
      joints() const;

  // optional .box2d.PbVec2 gravity = 2;
  bool has_gravity() const;
  private:
  bool _internal_has_gravity() const;
  public:
  void clear_gravity();
  const ::box2d::PbVec2& gravity() const;
  ::box2d::PbVec2* release_gravity();
  ::box2d::PbVec2* mutable_gravity();
  void set_allocated_gravity(::box2d::PbVec2* gravity);
  private:
  const ::box2d::PbVec2& _internal_gravity() const;
  ::box2d::PbVec2* _internal_mutable_gravity();
  public:
  void unsafe_arena_set_allocated_gravity(
      ::box2d::PbVec2* gravity);
  ::box2d::PbVec2* unsafe_arena_release_gravity();

  // optional int64 tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  ::PROTOBUF_NAMESPACE_ID::int64 tag() const;
  void set_tag(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tag() const;
  void _internal_set_tag(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional bool allow_sleep = 3;
  bool has_allow_sleep() const;
  private:
  bool _internal_has_allow_sleep() const;
  public:
  void clear_allow_sleep();
  bool allow_sleep() const;
  void set_allow_sleep(bool value);
  private:
  bool _internal_allow_sleep() const;
  void _internal_set_allow_sleep(bool value);
  public:

  // optional bool auto_clear_forces = 4;
  bool has_auto_clear_forces() const;
  private:
  bool _internal_has_auto_clear_forces() const;
  public:
  void clear_auto_clear_forces();
  bool auto_clear_forces() const;
  void set_auto_clear_forces(bool value);
  private:
  bool _internal_auto_clear_forces() const;
  void _internal_set_auto_clear_forces(bool value);
  public:

  // optional bool warm_starting = 5;
  bool has_warm_starting() const;
  private:
  bool _internal_has_warm_starting() const;
  public:
  void clear_warm_starting();
  bool warm_starting() const;
  void set_warm_starting(bool value);
  private:
  bool _internal_warm_starting() const;
  void _internal_set_warm_starting(bool value);
  public:

  // optional bool continuous_physics = 6;
  bool has_continuous_physics() const;
  private:
  bool _internal_has_continuous_physics() const;
  public:
  void clear_continuous_physics();
  bool continuous_physics() const;
  void set_continuous_physics(bool value);
  private:
  bool _internal_continuous_physics() const;
  void _internal_set_continuous_physics(bool value);
  public:

  // optional bool sub_stepping = 7;
  bool has_sub_stepping() const;
  private:
  bool _internal_has_sub_stepping() const;
  public:
  void clear_sub_stepping();
  bool sub_stepping() const;
  void set_sub_stepping(bool value);
  private:
  bool _internal_sub_stepping() const;
  void _internal_set_sub_stepping(bool value);
  public:

  // @@protoc_insertion_point(class_scope:box2d.PbWorld)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbBody > bodies_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbJoint > joints_;
  ::box2d::PbVec2* gravity_;
  ::PROTOBUF_NAMESPACE_ID::int64 tag_;
  bool allow_sleep_;
  bool auto_clear_forces_;
  bool warm_starting_;
  bool continuous_physics_;
  bool sub_stepping_;
  friend struct ::TableStruct_box2d_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PbVec2

// required float x = 1;
inline bool PbVec2::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PbVec2::has_x() const {
  return _internal_has_x();
}
inline void PbVec2::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float PbVec2::_internal_x() const {
  return x_;
}
inline float PbVec2::x() const {
  // @@protoc_insertion_point(field_get:box2d.PbVec2.x)
  return _internal_x();
}
inline void PbVec2::_internal_set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void PbVec2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:box2d.PbVec2.x)
}

// required float y = 2;
inline bool PbVec2::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PbVec2::has_y() const {
  return _internal_has_y();
}
inline void PbVec2::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float PbVec2::_internal_y() const {
  return y_;
}
inline float PbVec2::y() const {
  // @@protoc_insertion_point(field_get:box2d.PbVec2.y)
  return _internal_y();
}
inline void PbVec2::_internal_set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void PbVec2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:box2d.PbVec2.y)
}

// -------------------------------------------------------------------

// PbFilter

// optional int32 category_bits = 1;
inline bool PbFilter::_internal_has_category_bits() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PbFilter::has_category_bits() const {
  return _internal_has_category_bits();
}
inline void PbFilter::clear_category_bits() {
  category_bits_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbFilter::_internal_category_bits() const {
  return category_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbFilter::category_bits() const {
  // @@protoc_insertion_point(field_get:box2d.PbFilter.category_bits)
  return _internal_category_bits();
}
inline void PbFilter::_internal_set_category_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  category_bits_ = value;
}
inline void PbFilter::set_category_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_category_bits(value);
  // @@protoc_insertion_point(field_set:box2d.PbFilter.category_bits)
}

// optional int32 mask_bits = 2;
inline bool PbFilter::_internal_has_mask_bits() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PbFilter::has_mask_bits() const {
  return _internal_has_mask_bits();
}
inline void PbFilter::clear_mask_bits() {
  mask_bits_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbFilter::_internal_mask_bits() const {
  return mask_bits_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbFilter::mask_bits() const {
  // @@protoc_insertion_point(field_get:box2d.PbFilter.mask_bits)
  return _internal_mask_bits();
}
inline void PbFilter::_internal_set_mask_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  mask_bits_ = value;
}
inline void PbFilter::set_mask_bits(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mask_bits(value);
  // @@protoc_insertion_point(field_set:box2d.PbFilter.mask_bits)
}

// optional int32 group_index = 3;
inline bool PbFilter::_internal_has_group_index() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PbFilter::has_group_index() const {
  return _internal_has_group_index();
}
inline void PbFilter::clear_group_index() {
  group_index_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbFilter::_internal_group_index() const {
  return group_index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbFilter::group_index() const {
  // @@protoc_insertion_point(field_get:box2d.PbFilter.group_index)
  return _internal_group_index();
}
inline void PbFilter::_internal_set_group_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  group_index_ = value;
}
inline void PbFilter::set_group_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_group_index(value);
  // @@protoc_insertion_point(field_set:box2d.PbFilter.group_index)
}

// -------------------------------------------------------------------

// PbShape

// optional int64 tag = 1;
inline bool PbShape::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PbShape::has_tag() const {
  return _internal_has_tag();
}
inline void PbShape::clear_tag() {
  tag_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PbShape::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PbShape::tag() const {
  // @@protoc_insertion_point(field_get:box2d.PbShape.tag)
  return _internal_tag();
}
inline void PbShape::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  tag_ = value;
}
inline void PbShape::set_tag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:box2d.PbShape.tag)
}

// required .box2d.PbShapeType type = 2;
inline bool PbShape::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PbShape::has_type() const {
  return _internal_has_type();
}
inline void PbShape::clear_type() {
  type_ = 1;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::box2d::PbShapeType PbShape::_internal_type() const {
  return static_cast< ::box2d::PbShapeType >(type_);
}
inline ::box2d::PbShapeType PbShape::type() const {
  // @@protoc_insertion_point(field_get:box2d.PbShape.type)
  return _internal_type();
}
inline void PbShape::_internal_set_type(::box2d::PbShapeType value) {
  assert(::box2d::PbShapeType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  type_ = value;
}
inline void PbShape::set_type(::box2d::PbShapeType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:box2d.PbShape.type)
}

// optional .box2d.PbVec2 center = 10;
inline bool PbShape::_internal_has_center() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || center_ != nullptr);
  return value;
}
inline bool PbShape::has_center() const {
  return _internal_has_center();
}
inline void PbShape::clear_center() {
  if (center_ != nullptr) center_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::box2d::PbVec2& PbShape::_internal_center() const {
  const ::box2d::PbVec2* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& PbShape::center() const {
  // @@protoc_insertion_point(field_get:box2d.PbShape.center)
  return _internal_center();
}
inline void PbShape::unsafe_arena_set_allocated_center(
    ::box2d::PbVec2* center) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbShape.center)
}
inline ::box2d::PbVec2* PbShape::release_center() {
  auto temp = unsafe_arena_release_center();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* PbShape::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:box2d.PbShape.center)
  _has_bits_[0] &= ~0x00000001u;
  ::box2d::PbVec2* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* PbShape::_internal_mutable_center() {
  _has_bits_[0] |= 0x00000001u;
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    center_ = p;
  }
  return center_;
}
inline ::box2d::PbVec2* PbShape::mutable_center() {
  // @@protoc_insertion_point(field_mutable:box2d.PbShape.center)
  return _internal_mutable_center();
}
inline void PbShape::set_allocated_center(::box2d::PbVec2* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbShape.center)
}

// optional float radius = 11;
inline bool PbShape::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PbShape::has_radius() const {
  return _internal_has_radius();
}
inline void PbShape::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PbShape::_internal_radius() const {
  return radius_;
}
inline float PbShape::radius() const {
  // @@protoc_insertion_point(field_get:box2d.PbShape.radius)
  return _internal_radius();
}
inline void PbShape::_internal_set_radius(float value) {
  _has_bits_[0] |= 0x00000008u;
  radius_ = value;
}
inline void PbShape::set_radius(float value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:box2d.PbShape.radius)
}

// repeated .box2d.PbVec2 points = 20;
inline int PbShape::_internal_points_size() const {
  return points_.size();
}
inline int PbShape::points_size() const {
  return _internal_points_size();
}
inline void PbShape::clear_points() {
  points_.Clear();
}
inline ::box2d::PbVec2* PbShape::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:box2d.PbShape.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbVec2 >*
PbShape::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:box2d.PbShape.points)
  return &points_;
}
inline const ::box2d::PbVec2& PbShape::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::box2d::PbVec2& PbShape::points(int index) const {
  // @@protoc_insertion_point(field_get:box2d.PbShape.points)
  return _internal_points(index);
}
inline ::box2d::PbVec2* PbShape::_internal_add_points() {
  return points_.Add();
}
inline ::box2d::PbVec2* PbShape::add_points() {
  // @@protoc_insertion_point(field_add:box2d.PbShape.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbVec2 >&
PbShape::points() const {
  // @@protoc_insertion_point(field_list:box2d.PbShape.points)
  return points_;
}

// repeated .box2d.PbVec2 normals = 21;
inline int PbShape::_internal_normals_size() const {
  return normals_.size();
}
inline int PbShape::normals_size() const {
  return _internal_normals_size();
}
inline void PbShape::clear_normals() {
  normals_.Clear();
}
inline ::box2d::PbVec2* PbShape::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:box2d.PbShape.normals)
  return normals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbVec2 >*
PbShape::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:box2d.PbShape.normals)
  return &normals_;
}
inline const ::box2d::PbVec2& PbShape::_internal_normals(int index) const {
  return normals_.Get(index);
}
inline const ::box2d::PbVec2& PbShape::normals(int index) const {
  // @@protoc_insertion_point(field_get:box2d.PbShape.normals)
  return _internal_normals(index);
}
inline ::box2d::PbVec2* PbShape::_internal_add_normals() {
  return normals_.Add();
}
inline ::box2d::PbVec2* PbShape::add_normals() {
  // @@protoc_insertion_point(field_add:box2d.PbShape.normals)
  return _internal_add_normals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbVec2 >&
PbShape::normals() const {
  // @@protoc_insertion_point(field_list:box2d.PbShape.normals)
  return normals_;
}

// optional .box2d.PbVec2 centroid = 22;
inline bool PbShape::_internal_has_centroid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || centroid_ != nullptr);
  return value;
}
inline bool PbShape::has_centroid() const {
  return _internal_has_centroid();
}
inline void PbShape::clear_centroid() {
  if (centroid_ != nullptr) centroid_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::box2d::PbVec2& PbShape::_internal_centroid() const {
  const ::box2d::PbVec2* p = centroid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& PbShape::centroid() const {
  // @@protoc_insertion_point(field_get:box2d.PbShape.centroid)
  return _internal_centroid();
}
inline void PbShape::unsafe_arena_set_allocated_centroid(
    ::box2d::PbVec2* centroid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(centroid_);
  }
  centroid_ = centroid;
  if (centroid) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbShape.centroid)
}
inline ::box2d::PbVec2* PbShape::release_centroid() {
  auto temp = unsafe_arena_release_centroid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* PbShape::unsafe_arena_release_centroid() {
  // @@protoc_insertion_point(field_release:box2d.PbShape.centroid)
  _has_bits_[0] &= ~0x00000002u;
  ::box2d::PbVec2* temp = centroid_;
  centroid_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* PbShape::_internal_mutable_centroid() {
  _has_bits_[0] |= 0x00000002u;
  if (centroid_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    centroid_ = p;
  }
  return centroid_;
}
inline ::box2d::PbVec2* PbShape::mutable_centroid() {
  // @@protoc_insertion_point(field_mutable:box2d.PbShape.centroid)
  return _internal_mutable_centroid();
}
inline void PbShape::set_allocated_centroid(::box2d::PbVec2* centroid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete centroid_;
  }
  if (centroid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(centroid);
    if (message_arena != submessage_arena) {
      centroid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, centroid, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  centroid_ = centroid;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbShape.centroid)
}

// -------------------------------------------------------------------

// PbFixture

// optional int64 tag = 1;
inline bool PbFixture::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PbFixture::has_tag() const {
  return _internal_has_tag();
}
inline void PbFixture::clear_tag() {
  tag_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PbFixture::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PbFixture::tag() const {
  // @@protoc_insertion_point(field_get:box2d.PbFixture.tag)
  return _internal_tag();
}
inline void PbFixture::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  tag_ = value;
}
inline void PbFixture::set_tag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:box2d.PbFixture.tag)
}

// optional float restitution = 2;
inline bool PbFixture::_internal_has_restitution() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PbFixture::has_restitution() const {
  return _internal_has_restitution();
}
inline void PbFixture::clear_restitution() {
  restitution_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float PbFixture::_internal_restitution() const {
  return restitution_;
}
inline float PbFixture::restitution() const {
  // @@protoc_insertion_point(field_get:box2d.PbFixture.restitution)
  return _internal_restitution();
}
inline void PbFixture::_internal_set_restitution(float value) {
  _has_bits_[0] |= 0x00000008u;
  restitution_ = value;
}
inline void PbFixture::set_restitution(float value) {
  _internal_set_restitution(value);
  // @@protoc_insertion_point(field_set:box2d.PbFixture.restitution)
}

// optional float friction = 3;
inline bool PbFixture::_internal_has_friction() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PbFixture::has_friction() const {
  return _internal_has_friction();
}
inline void PbFixture::clear_friction() {
  friction_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PbFixture::_internal_friction() const {
  return friction_;
}
inline float PbFixture::friction() const {
  // @@protoc_insertion_point(field_get:box2d.PbFixture.friction)
  return _internal_friction();
}
inline void PbFixture::_internal_set_friction(float value) {
  _has_bits_[0] |= 0x00000010u;
  friction_ = value;
}
inline void PbFixture::set_friction(float value) {
  _internal_set_friction(value);
  // @@protoc_insertion_point(field_set:box2d.PbFixture.friction)
}

// optional float density = 4;
inline bool PbFixture::_internal_has_density() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PbFixture::has_density() const {
  return _internal_has_density();
}
inline void PbFixture::clear_density() {
  density_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PbFixture::_internal_density() const {
  return density_;
}
inline float PbFixture::density() const {
  // @@protoc_insertion_point(field_get:box2d.PbFixture.density)
  return _internal_density();
}
inline void PbFixture::_internal_set_density(float value) {
  _has_bits_[0] |= 0x00000020u;
  density_ = value;
}
inline void PbFixture::set_density(float value) {
  _internal_set_density(value);
  // @@protoc_insertion_point(field_set:box2d.PbFixture.density)
}

// optional bool sensor = 5;
inline bool PbFixture::_internal_has_sensor() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PbFixture::has_sensor() const {
  return _internal_has_sensor();
}
inline void PbFixture::clear_sensor() {
  sensor_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PbFixture::_internal_sensor() const {
  return sensor_;
}
inline bool PbFixture::sensor() const {
  // @@protoc_insertion_point(field_get:box2d.PbFixture.sensor)
  return _internal_sensor();
}
inline void PbFixture::_internal_set_sensor(bool value) {
  _has_bits_[0] |= 0x00000040u;
  sensor_ = value;
}
inline void PbFixture::set_sensor(bool value) {
  _internal_set_sensor(value);
  // @@protoc_insertion_point(field_set:box2d.PbFixture.sensor)
}

// optional .box2d.PbFilter filter = 10;
inline bool PbFixture::_internal_has_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || filter_ != nullptr);
  return value;
}
inline bool PbFixture::has_filter() const {
  return _internal_has_filter();
}
inline void PbFixture::clear_filter() {
  if (filter_ != nullptr) filter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::box2d::PbFilter& PbFixture::_internal_filter() const {
  const ::box2d::PbFilter* p = filter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbFilter*>(
      &::box2d::_PbFilter_default_instance_);
}
inline const ::box2d::PbFilter& PbFixture::filter() const {
  // @@protoc_insertion_point(field_get:box2d.PbFixture.filter)
  return _internal_filter();
}
inline void PbFixture::unsafe_arena_set_allocated_filter(
    ::box2d::PbFilter* filter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbFixture.filter)
}
inline ::box2d::PbFilter* PbFixture::release_filter() {
  auto temp = unsafe_arena_release_filter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbFilter* PbFixture::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:box2d.PbFixture.filter)
  _has_bits_[0] &= ~0x00000001u;
  ::box2d::PbFilter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::box2d::PbFilter* PbFixture::_internal_mutable_filter() {
  _has_bits_[0] |= 0x00000001u;
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbFilter>(GetArena());
    filter_ = p;
  }
  return filter_;
}
inline ::box2d::PbFilter* PbFixture::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:box2d.PbFixture.filter)
  return _internal_mutable_filter();
}
inline void PbFixture::set_allocated_filter(::box2d::PbFilter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbFixture.filter)
}

// optional .box2d.PbShape shape = 11;
inline bool PbFixture::_internal_has_shape() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || shape_ != nullptr);
  return value;
}
inline bool PbFixture::has_shape() const {
  return _internal_has_shape();
}
inline void PbFixture::clear_shape() {
  if (shape_ != nullptr) shape_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::box2d::PbShape& PbFixture::_internal_shape() const {
  const ::box2d::PbShape* p = shape_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbShape*>(
      &::box2d::_PbShape_default_instance_);
}
inline const ::box2d::PbShape& PbFixture::shape() const {
  // @@protoc_insertion_point(field_get:box2d.PbFixture.shape)
  return _internal_shape();
}
inline void PbFixture::unsafe_arena_set_allocated_shape(
    ::box2d::PbShape* shape) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shape_);
  }
  shape_ = shape;
  if (shape) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbFixture.shape)
}
inline ::box2d::PbShape* PbFixture::release_shape() {
  auto temp = unsafe_arena_release_shape();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbShape* PbFixture::unsafe_arena_release_shape() {
  // @@protoc_insertion_point(field_release:box2d.PbFixture.shape)
  _has_bits_[0] &= ~0x00000002u;
  ::box2d::PbShape* temp = shape_;
  shape_ = nullptr;
  return temp;
}
inline ::box2d::PbShape* PbFixture::_internal_mutable_shape() {
  _has_bits_[0] |= 0x00000002u;
  if (shape_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbShape>(GetArena());
    shape_ = p;
  }
  return shape_;
}
inline ::box2d::PbShape* PbFixture::mutable_shape() {
  // @@protoc_insertion_point(field_mutable:box2d.PbFixture.shape)
  return _internal_mutable_shape();
}
inline void PbFixture::set_allocated_shape(::box2d::PbShape* shape) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete shape_;
  }
  if (shape) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shape);
    if (message_arena != submessage_arena) {
      shape = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shape, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shape_ = shape;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbFixture.shape)
}

// -------------------------------------------------------------------

// PbJoint

// optional int64 tag = 1;
inline bool PbJoint::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PbJoint::has_tag() const {
  return _internal_has_tag();
}
inline void PbJoint::clear_tag() {
  tag_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PbJoint::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PbJoint::tag() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.tag)
  return _internal_tag();
}
inline void PbJoint::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  tag_ = value;
}
inline void PbJoint::set_tag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.tag)
}

// required .box2d.PbJointType type = 2;
inline bool PbJoint::_internal_has_type() const {
  bool value = (_has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline bool PbJoint::has_type() const {
  return _internal_has_type();
}
inline void PbJoint::clear_type() {
  type_ = 1;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::box2d::PbJointType PbJoint::_internal_type() const {
  return static_cast< ::box2d::PbJointType >(type_);
}
inline ::box2d::PbJointType PbJoint::type() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.type)
  return _internal_type();
}
inline void PbJoint::_internal_set_type(::box2d::PbJointType value) {
  assert(::box2d::PbJointType_IsValid(value));
  _has_bits_[1] |= 0x00000004u;
  type_ = value;
}
inline void PbJoint::set_type(::box2d::PbJointType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.type)
}

// optional int32 body_a = 3;
inline bool PbJoint::_internal_has_body_a() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PbJoint::has_body_a() const {
  return _internal_has_body_a();
}
inline void PbJoint::clear_body_a() {
  body_a_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbJoint::_internal_body_a() const {
  return body_a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbJoint::body_a() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.body_a)
  return _internal_body_a();
}
inline void PbJoint::_internal_set_body_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  body_a_ = value;
}
inline void PbJoint::set_body_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_body_a(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.body_a)
}

// optional int32 body_b = 4;
inline bool PbJoint::_internal_has_body_b() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PbJoint::has_body_b() const {
  return _internal_has_body_b();
}
inline void PbJoint::clear_body_b() {
  body_b_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbJoint::_internal_body_b() const {
  return body_b_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbJoint::body_b() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.body_b)
  return _internal_body_b();
}
inline void PbJoint::_internal_set_body_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  body_b_ = value;
}
inline void PbJoint::set_body_b(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_body_b(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.body_b)
}

// optional bool collideConnected = 5;
inline bool PbJoint::_internal_has_collideconnected() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PbJoint::has_collideconnected() const {
  return _internal_has_collideconnected();
}
inline void PbJoint::clear_collideconnected() {
  collideconnected_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool PbJoint::_internal_collideconnected() const {
  return collideconnected_;
}
inline bool PbJoint::collideconnected() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.collideConnected)
  return _internal_collideconnected();
}
inline void PbJoint::_internal_set_collideconnected(bool value) {
  _has_bits_[0] |= 0x00000400u;
  collideconnected_ = value;
}
inline void PbJoint::set_collideconnected(bool value) {
  _internal_set_collideconnected(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.collideConnected)
}

// optional .box2d.PbVec2 local_anchor_a = 6;
inline bool PbJoint::_internal_has_local_anchor_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || local_anchor_a_ != nullptr);
  return value;
}
inline bool PbJoint::has_local_anchor_a() const {
  return _internal_has_local_anchor_a();
}
inline void PbJoint::clear_local_anchor_a() {
  if (local_anchor_a_ != nullptr) local_anchor_a_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::box2d::PbVec2& PbJoint::_internal_local_anchor_a() const {
  const ::box2d::PbVec2* p = local_anchor_a_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& PbJoint::local_anchor_a() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.local_anchor_a)
  return _internal_local_anchor_a();
}
inline void PbJoint::unsafe_arena_set_allocated_local_anchor_a(
    ::box2d::PbVec2* local_anchor_a) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_anchor_a_);
  }
  local_anchor_a_ = local_anchor_a;
  if (local_anchor_a) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbJoint.local_anchor_a)
}
inline ::box2d::PbVec2* PbJoint::release_local_anchor_a() {
  auto temp = unsafe_arena_release_local_anchor_a();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* PbJoint::unsafe_arena_release_local_anchor_a() {
  // @@protoc_insertion_point(field_release:box2d.PbJoint.local_anchor_a)
  _has_bits_[0] &= ~0x00000001u;
  ::box2d::PbVec2* temp = local_anchor_a_;
  local_anchor_a_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* PbJoint::_internal_mutable_local_anchor_a() {
  _has_bits_[0] |= 0x00000001u;
  if (local_anchor_a_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    local_anchor_a_ = p;
  }
  return local_anchor_a_;
}
inline ::box2d::PbVec2* PbJoint::mutable_local_anchor_a() {
  // @@protoc_insertion_point(field_mutable:box2d.PbJoint.local_anchor_a)
  return _internal_mutable_local_anchor_a();
}
inline void PbJoint::set_allocated_local_anchor_a(::box2d::PbVec2* local_anchor_a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_anchor_a_;
  }
  if (local_anchor_a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_anchor_a);
    if (message_arena != submessage_arena) {
      local_anchor_a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_anchor_a, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  local_anchor_a_ = local_anchor_a;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbJoint.local_anchor_a)
}

// optional .box2d.PbVec2 local_anchor_b = 7;
inline bool PbJoint::_internal_has_local_anchor_b() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || local_anchor_b_ != nullptr);
  return value;
}
inline bool PbJoint::has_local_anchor_b() const {
  return _internal_has_local_anchor_b();
}
inline void PbJoint::clear_local_anchor_b() {
  if (local_anchor_b_ != nullptr) local_anchor_b_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::box2d::PbVec2& PbJoint::_internal_local_anchor_b() const {
  const ::box2d::PbVec2* p = local_anchor_b_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& PbJoint::local_anchor_b() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.local_anchor_b)
  return _internal_local_anchor_b();
}
inline void PbJoint::unsafe_arena_set_allocated_local_anchor_b(
    ::box2d::PbVec2* local_anchor_b) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_anchor_b_);
  }
  local_anchor_b_ = local_anchor_b;
  if (local_anchor_b) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbJoint.local_anchor_b)
}
inline ::box2d::PbVec2* PbJoint::release_local_anchor_b() {
  auto temp = unsafe_arena_release_local_anchor_b();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* PbJoint::unsafe_arena_release_local_anchor_b() {
  // @@protoc_insertion_point(field_release:box2d.PbJoint.local_anchor_b)
  _has_bits_[0] &= ~0x00000002u;
  ::box2d::PbVec2* temp = local_anchor_b_;
  local_anchor_b_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* PbJoint::_internal_mutable_local_anchor_b() {
  _has_bits_[0] |= 0x00000002u;
  if (local_anchor_b_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    local_anchor_b_ = p;
  }
  return local_anchor_b_;
}
inline ::box2d::PbVec2* PbJoint::mutable_local_anchor_b() {
  // @@protoc_insertion_point(field_mutable:box2d.PbJoint.local_anchor_b)
  return _internal_mutable_local_anchor_b();
}
inline void PbJoint::set_allocated_local_anchor_b(::box2d::PbVec2* local_anchor_b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_anchor_b_;
  }
  if (local_anchor_b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_anchor_b);
    if (message_arena != submessage_arena) {
      local_anchor_b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_anchor_b, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  local_anchor_b_ = local_anchor_b;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbJoint.local_anchor_b)
}

// optional float ref_angle = 10;
inline bool PbJoint::_internal_has_ref_angle() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PbJoint::has_ref_angle() const {
  return _internal_has_ref_angle();
}
inline void PbJoint::clear_ref_angle() {
  ref_angle_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float PbJoint::_internal_ref_angle() const {
  return ref_angle_;
}
inline float PbJoint::ref_angle() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.ref_angle)
  return _internal_ref_angle();
}
inline void PbJoint::_internal_set_ref_angle(float value) {
  _has_bits_[0] |= 0x00000200u;
  ref_angle_ = value;
}
inline void PbJoint::set_ref_angle(float value) {
  _internal_set_ref_angle(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.ref_angle)
}

// optional bool enable_limit = 12;
inline bool PbJoint::_internal_has_enable_limit() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PbJoint::has_enable_limit() const {
  return _internal_has_enable_limit();
}
inline void PbJoint::clear_enable_limit() {
  enable_limit_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool PbJoint::_internal_enable_limit() const {
  return enable_limit_;
}
inline bool PbJoint::enable_limit() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.enable_limit)
  return _internal_enable_limit();
}
inline void PbJoint::_internal_set_enable_limit(bool value) {
  _has_bits_[0] |= 0x00000800u;
  enable_limit_ = value;
}
inline void PbJoint::set_enable_limit(bool value) {
  _internal_set_enable_limit(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.enable_limit)
}

// optional float lower_limit = 13;
inline bool PbJoint::_internal_has_lower_limit() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PbJoint::has_lower_limit() const {
  return _internal_has_lower_limit();
}
inline void PbJoint::clear_lower_limit() {
  lower_limit_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float PbJoint::_internal_lower_limit() const {
  return lower_limit_;
}
inline float PbJoint::lower_limit() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.lower_limit)
  return _internal_lower_limit();
}
inline void PbJoint::_internal_set_lower_limit(float value) {
  _has_bits_[0] |= 0x00002000u;
  lower_limit_ = value;
}
inline void PbJoint::set_lower_limit(float value) {
  _internal_set_lower_limit(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.lower_limit)
}

// optional float upper_limit = 14;
inline bool PbJoint::_internal_has_upper_limit() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool PbJoint::has_upper_limit() const {
  return _internal_has_upper_limit();
}
inline void PbJoint::clear_upper_limit() {
  upper_limit_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float PbJoint::_internal_upper_limit() const {
  return upper_limit_;
}
inline float PbJoint::upper_limit() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.upper_limit)
  return _internal_upper_limit();
}
inline void PbJoint::_internal_set_upper_limit(float value) {
  _has_bits_[0] |= 0x00004000u;
  upper_limit_ = value;
}
inline void PbJoint::set_upper_limit(float value) {
  _internal_set_upper_limit(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.upper_limit)
}

// optional bool enable_motor = 15;
inline bool PbJoint::_internal_has_enable_motor() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PbJoint::has_enable_motor() const {
  return _internal_has_enable_motor();
}
inline void PbJoint::clear_enable_motor() {
  enable_motor_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool PbJoint::_internal_enable_motor() const {
  return enable_motor_;
}
inline bool PbJoint::enable_motor() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.enable_motor)
  return _internal_enable_motor();
}
inline void PbJoint::_internal_set_enable_motor(bool value) {
  _has_bits_[0] |= 0x00001000u;
  enable_motor_ = value;
}
inline void PbJoint::set_enable_motor(bool value) {
  _internal_set_enable_motor(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.enable_motor)
}

// optional float motor_speed = 16;
inline bool PbJoint::_internal_has_motor_speed() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool PbJoint::has_motor_speed() const {
  return _internal_has_motor_speed();
}
inline void PbJoint::clear_motor_speed() {
  motor_speed_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float PbJoint::_internal_motor_speed() const {
  return motor_speed_;
}
inline float PbJoint::motor_speed() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.motor_speed)
  return _internal_motor_speed();
}
inline void PbJoint::_internal_set_motor_speed(float value) {
  _has_bits_[0] |= 0x00008000u;
  motor_speed_ = value;
}
inline void PbJoint::set_motor_speed(float value) {
  _internal_set_motor_speed(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.motor_speed)
}

// optional float max_motor_torque = 17;
inline bool PbJoint::_internal_has_max_motor_torque() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool PbJoint::has_max_motor_torque() const {
  return _internal_has_max_motor_torque();
}
inline void PbJoint::clear_max_motor_torque() {
  max_motor_torque_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float PbJoint::_internal_max_motor_torque() const {
  return max_motor_torque_;
}
inline float PbJoint::max_motor_torque() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.max_motor_torque)
  return _internal_max_motor_torque();
}
inline void PbJoint::_internal_set_max_motor_torque(float value) {
  _has_bits_[0] |= 0x00010000u;
  max_motor_torque_ = value;
}
inline void PbJoint::set_max_motor_torque(float value) {
  _internal_set_max_motor_torque(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.max_motor_torque)
}

// optional .box2d.PbVec2 local_axis_a = 20;
inline bool PbJoint::_internal_has_local_axis_a() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || local_axis_a_ != nullptr);
  return value;
}
inline bool PbJoint::has_local_axis_a() const {
  return _internal_has_local_axis_a();
}
inline void PbJoint::clear_local_axis_a() {
  if (local_axis_a_ != nullptr) local_axis_a_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::box2d::PbVec2& PbJoint::_internal_local_axis_a() const {
  const ::box2d::PbVec2* p = local_axis_a_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& PbJoint::local_axis_a() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.local_axis_a)
  return _internal_local_axis_a();
}
inline void PbJoint::unsafe_arena_set_allocated_local_axis_a(
    ::box2d::PbVec2* local_axis_a) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_axis_a_);
  }
  local_axis_a_ = local_axis_a;
  if (local_axis_a) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbJoint.local_axis_a)
}
inline ::box2d::PbVec2* PbJoint::release_local_axis_a() {
  auto temp = unsafe_arena_release_local_axis_a();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* PbJoint::unsafe_arena_release_local_axis_a() {
  // @@protoc_insertion_point(field_release:box2d.PbJoint.local_axis_a)
  _has_bits_[0] &= ~0x00000004u;
  ::box2d::PbVec2* temp = local_axis_a_;
  local_axis_a_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* PbJoint::_internal_mutable_local_axis_a() {
  _has_bits_[0] |= 0x00000004u;
  if (local_axis_a_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    local_axis_a_ = p;
  }
  return local_axis_a_;
}
inline ::box2d::PbVec2* PbJoint::mutable_local_axis_a() {
  // @@protoc_insertion_point(field_mutable:box2d.PbJoint.local_axis_a)
  return _internal_mutable_local_axis_a();
}
inline void PbJoint::set_allocated_local_axis_a(::box2d::PbVec2* local_axis_a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_axis_a_;
  }
  if (local_axis_a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_axis_a);
    if (message_arena != submessage_arena) {
      local_axis_a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_axis_a, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  local_axis_a_ = local_axis_a;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbJoint.local_axis_a)
}

// optional float max_motor_force = 21;
inline bool PbJoint::_internal_has_max_motor_force() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool PbJoint::has_max_motor_force() const {
  return _internal_has_max_motor_force();
}
inline void PbJoint::clear_max_motor_force() {
  max_motor_force_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float PbJoint::_internal_max_motor_force() const {
  return max_motor_force_;
}
inline float PbJoint::max_motor_force() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.max_motor_force)
  return _internal_max_motor_force();
}
inline void PbJoint::_internal_set_max_motor_force(float value) {
  _has_bits_[0] |= 0x00020000u;
  max_motor_force_ = value;
}
inline void PbJoint::set_max_motor_force(float value) {
  _internal_set_max_motor_force(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.max_motor_force)
}

// optional float length = 30;
inline bool PbJoint::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool PbJoint::has_length() const {
  return _internal_has_length();
}
inline void PbJoint::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float PbJoint::_internal_length() const {
  return length_;
}
inline float PbJoint::length() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.length)
  return _internal_length();
}
inline void PbJoint::_internal_set_length(float value) {
  _has_bits_[0] |= 0x00040000u;
  length_ = value;
}
inline void PbJoint::set_length(float value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.length)
}

// optional float frequency = 31;
inline bool PbJoint::_internal_has_frequency() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool PbJoint::has_frequency() const {
  return _internal_has_frequency();
}
inline void PbJoint::clear_frequency() {
  frequency_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float PbJoint::_internal_frequency() const {
  return frequency_;
}
inline float PbJoint::frequency() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.frequency)
  return _internal_frequency();
}
inline void PbJoint::_internal_set_frequency(float value) {
  _has_bits_[0] |= 0x00080000u;
  frequency_ = value;
}
inline void PbJoint::set_frequency(float value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.frequency)
}

// optional float damping_ratio = 32;
inline bool PbJoint::_internal_has_damping_ratio() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool PbJoint::has_damping_ratio() const {
  return _internal_has_damping_ratio();
}
inline void PbJoint::clear_damping_ratio() {
  damping_ratio_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float PbJoint::_internal_damping_ratio() const {
  return damping_ratio_;
}
inline float PbJoint::damping_ratio() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.damping_ratio)
  return _internal_damping_ratio();
}
inline void PbJoint::_internal_set_damping_ratio(float value) {
  _has_bits_[0] |= 0x00100000u;
  damping_ratio_ = value;
}
inline void PbJoint::set_damping_ratio(float value) {
  _internal_set_damping_ratio(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.damping_ratio)
}

// optional .box2d.PbVec2 ground_anchor_a = 40;
inline bool PbJoint::_internal_has_ground_anchor_a() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || ground_anchor_a_ != nullptr);
  return value;
}
inline bool PbJoint::has_ground_anchor_a() const {
  return _internal_has_ground_anchor_a();
}
inline void PbJoint::clear_ground_anchor_a() {
  if (ground_anchor_a_ != nullptr) ground_anchor_a_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::box2d::PbVec2& PbJoint::_internal_ground_anchor_a() const {
  const ::box2d::PbVec2* p = ground_anchor_a_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& PbJoint::ground_anchor_a() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.ground_anchor_a)
  return _internal_ground_anchor_a();
}
inline void PbJoint::unsafe_arena_set_allocated_ground_anchor_a(
    ::box2d::PbVec2* ground_anchor_a) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_anchor_a_);
  }
  ground_anchor_a_ = ground_anchor_a;
  if (ground_anchor_a) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbJoint.ground_anchor_a)
}
inline ::box2d::PbVec2* PbJoint::release_ground_anchor_a() {
  auto temp = unsafe_arena_release_ground_anchor_a();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* PbJoint::unsafe_arena_release_ground_anchor_a() {
  // @@protoc_insertion_point(field_release:box2d.PbJoint.ground_anchor_a)
  _has_bits_[0] &= ~0x00000008u;
  ::box2d::PbVec2* temp = ground_anchor_a_;
  ground_anchor_a_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* PbJoint::_internal_mutable_ground_anchor_a() {
  _has_bits_[0] |= 0x00000008u;
  if (ground_anchor_a_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    ground_anchor_a_ = p;
  }
  return ground_anchor_a_;
}
inline ::box2d::PbVec2* PbJoint::mutable_ground_anchor_a() {
  // @@protoc_insertion_point(field_mutable:box2d.PbJoint.ground_anchor_a)
  return _internal_mutable_ground_anchor_a();
}
inline void PbJoint::set_allocated_ground_anchor_a(::box2d::PbVec2* ground_anchor_a) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ground_anchor_a_;
  }
  if (ground_anchor_a) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ground_anchor_a);
    if (message_arena != submessage_arena) {
      ground_anchor_a = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_anchor_a, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  ground_anchor_a_ = ground_anchor_a;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbJoint.ground_anchor_a)
}

// optional .box2d.PbVec2 ground_anchor_b = 41;
inline bool PbJoint::_internal_has_ground_anchor_b() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || ground_anchor_b_ != nullptr);
  return value;
}
inline bool PbJoint::has_ground_anchor_b() const {
  return _internal_has_ground_anchor_b();
}
inline void PbJoint::clear_ground_anchor_b() {
  if (ground_anchor_b_ != nullptr) ground_anchor_b_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::box2d::PbVec2& PbJoint::_internal_ground_anchor_b() const {
  const ::box2d::PbVec2* p = ground_anchor_b_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& PbJoint::ground_anchor_b() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.ground_anchor_b)
  return _internal_ground_anchor_b();
}
inline void PbJoint::unsafe_arena_set_allocated_ground_anchor_b(
    ::box2d::PbVec2* ground_anchor_b) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ground_anchor_b_);
  }
  ground_anchor_b_ = ground_anchor_b;
  if (ground_anchor_b) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbJoint.ground_anchor_b)
}
inline ::box2d::PbVec2* PbJoint::release_ground_anchor_b() {
  auto temp = unsafe_arena_release_ground_anchor_b();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* PbJoint::unsafe_arena_release_ground_anchor_b() {
  // @@protoc_insertion_point(field_release:box2d.PbJoint.ground_anchor_b)
  _has_bits_[0] &= ~0x00000010u;
  ::box2d::PbVec2* temp = ground_anchor_b_;
  ground_anchor_b_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* PbJoint::_internal_mutable_ground_anchor_b() {
  _has_bits_[0] |= 0x00000010u;
  if (ground_anchor_b_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    ground_anchor_b_ = p;
  }
  return ground_anchor_b_;
}
inline ::box2d::PbVec2* PbJoint::mutable_ground_anchor_b() {
  // @@protoc_insertion_point(field_mutable:box2d.PbJoint.ground_anchor_b)
  return _internal_mutable_ground_anchor_b();
}
inline void PbJoint::set_allocated_ground_anchor_b(::box2d::PbVec2* ground_anchor_b) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ground_anchor_b_;
  }
  if (ground_anchor_b) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ground_anchor_b);
    if (message_arena != submessage_arena) {
      ground_anchor_b = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ground_anchor_b, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ground_anchor_b_ = ground_anchor_b;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbJoint.ground_anchor_b)
}

// optional float length_a = 42;
inline bool PbJoint::_internal_has_length_a() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool PbJoint::has_length_a() const {
  return _internal_has_length_a();
}
inline void PbJoint::clear_length_a() {
  length_a_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float PbJoint::_internal_length_a() const {
  return length_a_;
}
inline float PbJoint::length_a() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.length_a)
  return _internal_length_a();
}
inline void PbJoint::_internal_set_length_a(float value) {
  _has_bits_[0] |= 0x00400000u;
  length_a_ = value;
}
inline void PbJoint::set_length_a(float value) {
  _internal_set_length_a(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.length_a)
}

// optional float length_b = 43;
inline bool PbJoint::_internal_has_length_b() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool PbJoint::has_length_b() const {
  return _internal_has_length_b();
}
inline void PbJoint::clear_length_b() {
  length_b_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float PbJoint::_internal_length_b() const {
  return length_b_;
}
inline float PbJoint::length_b() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.length_b)
  return _internal_length_b();
}
inline void PbJoint::_internal_set_length_b(float value) {
  _has_bits_[0] |= 0x00800000u;
  length_b_ = value;
}
inline void PbJoint::set_length_b(float value) {
  _internal_set_length_b(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.length_b)
}

// optional float ratio = 44;
inline bool PbJoint::_internal_has_ratio() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool PbJoint::has_ratio() const {
  return _internal_has_ratio();
}
inline void PbJoint::clear_ratio() {
  ratio_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float PbJoint::_internal_ratio() const {
  return ratio_;
}
inline float PbJoint::ratio() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.ratio)
  return _internal_ratio();
}
inline void PbJoint::_internal_set_ratio(float value) {
  _has_bits_[0] |= 0x01000000u;
  ratio_ = value;
}
inline void PbJoint::set_ratio(float value) {
  _internal_set_ratio(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.ratio)
}

// optional float max_length_a = 45;
inline bool PbJoint::_internal_has_max_length_a() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool PbJoint::has_max_length_a() const {
  return _internal_has_max_length_a();
}
inline void PbJoint::clear_max_length_a() {
  max_length_a_ = 0;
  _has_bits_[0] &= ~0x02000000u;
}
inline float PbJoint::_internal_max_length_a() const {
  return max_length_a_;
}
inline float PbJoint::max_length_a() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.max_length_a)
  return _internal_max_length_a();
}
inline void PbJoint::_internal_set_max_length_a(float value) {
  _has_bits_[0] |= 0x02000000u;
  max_length_a_ = value;
}
inline void PbJoint::set_max_length_a(float value) {
  _internal_set_max_length_a(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.max_length_a)
}

// optional float max_length_b = 46;
inline bool PbJoint::_internal_has_max_length_b() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool PbJoint::has_max_length_b() const {
  return _internal_has_max_length_b();
}
inline void PbJoint::clear_max_length_b() {
  max_length_b_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline float PbJoint::_internal_max_length_b() const {
  return max_length_b_;
}
inline float PbJoint::max_length_b() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.max_length_b)
  return _internal_max_length_b();
}
inline void PbJoint::_internal_set_max_length_b(float value) {
  _has_bits_[0] |= 0x04000000u;
  max_length_b_ = value;
}
inline void PbJoint::set_max_length_b(float value) {
  _internal_set_max_length_b(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.max_length_b)
}

// optional .box2d.PbVec2 target = 50;
inline bool PbJoint::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || target_ != nullptr);
  return value;
}
inline bool PbJoint::has_target() const {
  return _internal_has_target();
}
inline void PbJoint::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::box2d::PbVec2& PbJoint::_internal_target() const {
  const ::box2d::PbVec2* p = target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& PbJoint::target() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.target)
  return _internal_target();
}
inline void PbJoint::unsafe_arena_set_allocated_target(
    ::box2d::PbVec2* target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbJoint.target)
}
inline ::box2d::PbVec2* PbJoint::release_target() {
  auto temp = unsafe_arena_release_target();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* PbJoint::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:box2d.PbJoint.target)
  _has_bits_[0] &= ~0x00000020u;
  ::box2d::PbVec2* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* PbJoint::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000020u;
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    target_ = p;
  }
  return target_;
}
inline ::box2d::PbVec2* PbJoint::mutable_target() {
  // @@protoc_insertion_point(field_mutable:box2d.PbJoint.target)
  return _internal_mutable_target();
}
inline void PbJoint::set_allocated_target(::box2d::PbVec2* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbJoint.target)
}

// optional float max_force = 51;
inline bool PbJoint::_internal_has_max_force() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool PbJoint::has_max_force() const {
  return _internal_has_max_force();
}
inline void PbJoint::clear_max_force() {
  max_force_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline float PbJoint::_internal_max_force() const {
  return max_force_;
}
inline float PbJoint::max_force() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.max_force)
  return _internal_max_force();
}
inline void PbJoint::_internal_set_max_force(float value) {
  _has_bits_[0] |= 0x08000000u;
  max_force_ = value;
}
inline void PbJoint::set_max_force(float value) {
  _internal_set_max_force(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.max_force)
}

// optional int32 joint1 = 61;
inline bool PbJoint::_internal_has_joint1() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool PbJoint::has_joint1() const {
  return _internal_has_joint1();
}
inline void PbJoint::clear_joint1() {
  joint1_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbJoint::_internal_joint1() const {
  return joint1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbJoint::joint1() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.joint1)
  return _internal_joint1();
}
inline void PbJoint::_internal_set_joint1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  joint1_ = value;
}
inline void PbJoint::set_joint1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_joint1(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.joint1)
}

// optional int32 joint2 = 62;
inline bool PbJoint::_internal_has_joint2() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool PbJoint::has_joint2() const {
  return _internal_has_joint2();
}
inline void PbJoint::clear_joint2() {
  joint2_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbJoint::_internal_joint2() const {
  return joint2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbJoint::joint2() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.joint2)
  return _internal_joint2();
}
inline void PbJoint::_internal_set_joint2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x20000000u;
  joint2_ = value;
}
inline void PbJoint::set_joint2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_joint2(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.joint2)
}

// optional float spring_frequency = 70;
inline bool PbJoint::_internal_has_spring_frequency() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool PbJoint::has_spring_frequency() const {
  return _internal_has_spring_frequency();
}
inline void PbJoint::clear_spring_frequency() {
  spring_frequency_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline float PbJoint::_internal_spring_frequency() const {
  return spring_frequency_;
}
inline float PbJoint::spring_frequency() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.spring_frequency)
  return _internal_spring_frequency();
}
inline void PbJoint::_internal_set_spring_frequency(float value) {
  _has_bits_[0] |= 0x40000000u;
  spring_frequency_ = value;
}
inline void PbJoint::set_spring_frequency(float value) {
  _internal_set_spring_frequency(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.spring_frequency)
}

// optional float spring_damping_ratio = 71;
inline bool PbJoint::_internal_has_spring_damping_ratio() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool PbJoint::has_spring_damping_ratio() const {
  return _internal_has_spring_damping_ratio();
}
inline void PbJoint::clear_spring_damping_ratio() {
  spring_damping_ratio_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline float PbJoint::_internal_spring_damping_ratio() const {
  return spring_damping_ratio_;
}
inline float PbJoint::spring_damping_ratio() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.spring_damping_ratio)
  return _internal_spring_damping_ratio();
}
inline void PbJoint::_internal_set_spring_damping_ratio(float value) {
  _has_bits_[0] |= 0x80000000u;
  spring_damping_ratio_ = value;
}
inline void PbJoint::set_spring_damping_ratio(float value) {
  _internal_set_spring_damping_ratio(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.spring_damping_ratio)
}

// optional float max_torque = 90;
inline bool PbJoint::_internal_has_max_torque() const {
  bool value = (_has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline bool PbJoint::has_max_torque() const {
  return _internal_has_max_torque();
}
inline void PbJoint::clear_max_torque() {
  max_torque_ = 0;
  _has_bits_[1] &= ~0x00000001u;
}
inline float PbJoint::_internal_max_torque() const {
  return max_torque_;
}
inline float PbJoint::max_torque() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.max_torque)
  return _internal_max_torque();
}
inline void PbJoint::_internal_set_max_torque(float value) {
  _has_bits_[1] |= 0x00000001u;
  max_torque_ = value;
}
inline void PbJoint::set_max_torque(float value) {
  _internal_set_max_torque(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.max_torque)
}

// optional float max_length = 100;
inline bool PbJoint::_internal_has_max_length() const {
  bool value = (_has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline bool PbJoint::has_max_length() const {
  return _internal_has_max_length();
}
inline void PbJoint::clear_max_length() {
  max_length_ = 0;
  _has_bits_[1] &= ~0x00000002u;
}
inline float PbJoint::_internal_max_length() const {
  return max_length_;
}
inline float PbJoint::max_length() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.max_length)
  return _internal_max_length();
}
inline void PbJoint::_internal_set_max_length(float value) {
  _has_bits_[1] |= 0x00000002u;
  max_length_ = value;
}
inline void PbJoint::set_max_length(float value) {
  _internal_set_max_length(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.max_length)
}

// repeated int32 bodies = 110;
inline int PbJoint::_internal_bodies_size() const {
  return bodies_.size();
}
inline int PbJoint::bodies_size() const {
  return _internal_bodies_size();
}
inline void PbJoint::clear_bodies() {
  bodies_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbJoint::_internal_bodies(int index) const {
  return bodies_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbJoint::bodies(int index) const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.bodies)
  return _internal_bodies(index);
}
inline void PbJoint::set_bodies(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bodies_.Set(index, value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.bodies)
}
inline void PbJoint::_internal_add_bodies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bodies_.Add(value);
}
inline void PbJoint::add_bodies(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bodies(value);
  // @@protoc_insertion_point(field_add:box2d.PbJoint.bodies)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PbJoint::_internal_bodies() const {
  return bodies_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PbJoint::bodies() const {
  // @@protoc_insertion_point(field_list:box2d.PbJoint.bodies)
  return _internal_bodies();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PbJoint::_internal_mutable_bodies() {
  return &bodies_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PbJoint::mutable_bodies() {
  // @@protoc_insertion_point(field_mutable_list:box2d.PbJoint.bodies)
  return _internal_mutable_bodies();
}

// repeated int32 joints = 111;
inline int PbJoint::_internal_joints_size() const {
  return joints_.size();
}
inline int PbJoint::joints_size() const {
  return _internal_joints_size();
}
inline void PbJoint::clear_joints() {
  joints_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbJoint::_internal_joints(int index) const {
  return joints_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PbJoint::joints(int index) const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.joints)
  return _internal_joints(index);
}
inline void PbJoint::set_joints(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  joints_.Set(index, value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.joints)
}
inline void PbJoint::_internal_add_joints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  joints_.Add(value);
}
inline void PbJoint::add_joints(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_joints(value);
  // @@protoc_insertion_point(field_add:box2d.PbJoint.joints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PbJoint::_internal_joints() const {
  return joints_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PbJoint::joints() const {
  // @@protoc_insertion_point(field_list:box2d.PbJoint.joints)
  return _internal_joints();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PbJoint::_internal_mutable_joints() {
  return &joints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PbJoint::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:box2d.PbJoint.joints)
  return _internal_mutable_joints();
}

// optional float target_volume = 112;
inline bool PbJoint::_internal_has_target_volume() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool PbJoint::has_target_volume() const {
  return _internal_has_target_volume();
}
inline void PbJoint::clear_target_volume() {
  target_volume_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float PbJoint::_internal_target_volume() const {
  return target_volume_;
}
inline float PbJoint::target_volume() const {
  // @@protoc_insertion_point(field_get:box2d.PbJoint.target_volume)
  return _internal_target_volume();
}
inline void PbJoint::_internal_set_target_volume(float value) {
  _has_bits_[0] |= 0x00200000u;
  target_volume_ = value;
}
inline void PbJoint::set_target_volume(float value) {
  _internal_set_target_volume(value);
  // @@protoc_insertion_point(field_set:box2d.PbJoint.target_volume)
}

// -------------------------------------------------------------------

// PbBody

// optional int64 tag = 1;
inline bool PbBody::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PbBody::has_tag() const {
  return _internal_has_tag();
}
inline void PbBody::clear_tag() {
  tag_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PbBody::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PbBody::tag() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.tag)
  return _internal_tag();
}
inline void PbBody::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000010u;
  tag_ = value;
}
inline void PbBody::set_tag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.tag)
}

// required .box2d.PbBodyType type = 2;
inline bool PbBody::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PbBody::has_type() const {
  return _internal_has_type();
}
inline void PbBody::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::box2d::PbBodyType PbBody::_internal_type() const {
  return static_cast< ::box2d::PbBodyType >(type_);
}
inline ::box2d::PbBodyType PbBody::type() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.type)
  return _internal_type();
}
inline void PbBody::_internal_set_type(::box2d::PbBodyType value) {
  assert(::box2d::PbBodyType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void PbBody::set_type(::box2d::PbBodyType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.type)
}

// optional .box2d.PbVec2 position = 10;
inline bool PbBody::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool PbBody::has_position() const {
  return _internal_has_position();
}
inline void PbBody::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::box2d::PbVec2& PbBody::_internal_position() const {
  const ::box2d::PbVec2* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& PbBody::position() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.position)
  return _internal_position();
}
inline void PbBody::unsafe_arena_set_allocated_position(
    ::box2d::PbVec2* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbBody.position)
}
inline ::box2d::PbVec2* PbBody::release_position() {
  auto temp = unsafe_arena_release_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* PbBody::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:box2d.PbBody.position)
  _has_bits_[0] &= ~0x00000002u;
  ::box2d::PbVec2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* PbBody::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::box2d::PbVec2* PbBody::mutable_position() {
  // @@protoc_insertion_point(field_mutable:box2d.PbBody.position)
  return _internal_mutable_position();
}
inline void PbBody::set_allocated_position(::box2d::PbVec2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbBody.position)
}

// optional float angle = 11;
inline bool PbBody::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PbBody::has_angle() const {
  return _internal_has_angle();
}
inline void PbBody::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PbBody::_internal_angle() const {
  return angle_;
}
inline float PbBody::angle() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.angle)
  return _internal_angle();
}
inline void PbBody::_internal_set_angle(float value) {
  _has_bits_[0] |= 0x00000040u;
  angle_ = value;
}
inline void PbBody::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.angle)
}

// optional .box2d.PbVec2 linear_velocity = 12;
inline bool PbBody::_internal_has_linear_velocity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || linear_velocity_ != nullptr);
  return value;
}
inline bool PbBody::has_linear_velocity() const {
  return _internal_has_linear_velocity();
}
inline void PbBody::clear_linear_velocity() {
  if (linear_velocity_ != nullptr) linear_velocity_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::box2d::PbVec2& PbBody::_internal_linear_velocity() const {
  const ::box2d::PbVec2* p = linear_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& PbBody::linear_velocity() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.linear_velocity)
  return _internal_linear_velocity();
}
inline void PbBody::unsafe_arena_set_allocated_linear_velocity(
    ::box2d::PbVec2* linear_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(linear_velocity_);
  }
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbBody.linear_velocity)
}
inline ::box2d::PbVec2* PbBody::release_linear_velocity() {
  auto temp = unsafe_arena_release_linear_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* PbBody::unsafe_arena_release_linear_velocity() {
  // @@protoc_insertion_point(field_release:box2d.PbBody.linear_velocity)
  _has_bits_[0] &= ~0x00000004u;
  ::box2d::PbVec2* temp = linear_velocity_;
  linear_velocity_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* PbBody::_internal_mutable_linear_velocity() {
  _has_bits_[0] |= 0x00000004u;
  if (linear_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    linear_velocity_ = p;
  }
  return linear_velocity_;
}
inline ::box2d::PbVec2* PbBody::mutable_linear_velocity() {
  // @@protoc_insertion_point(field_mutable:box2d.PbBody.linear_velocity)
  return _internal_mutable_linear_velocity();
}
inline void PbBody::set_allocated_linear_velocity(::box2d::PbVec2* linear_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete linear_velocity_;
  }
  if (linear_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linear_velocity);
    if (message_arena != submessage_arena) {
      linear_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  linear_velocity_ = linear_velocity;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbBody.linear_velocity)
}

// optional float angular_velocity = 13;
inline bool PbBody::_internal_has_angular_velocity() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PbBody::has_angular_velocity() const {
  return _internal_has_angular_velocity();
}
inline void PbBody::clear_angular_velocity() {
  angular_velocity_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float PbBody::_internal_angular_velocity() const {
  return angular_velocity_;
}
inline float PbBody::angular_velocity() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.angular_velocity)
  return _internal_angular_velocity();
}
inline void PbBody::_internal_set_angular_velocity(float value) {
  _has_bits_[0] |= 0x00000080u;
  angular_velocity_ = value;
}
inline void PbBody::set_angular_velocity(float value) {
  _internal_set_angular_velocity(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.angular_velocity)
}

// optional .box2d.PbVec2 force = 14;
inline bool PbBody::_internal_has_force() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || force_ != nullptr);
  return value;
}
inline bool PbBody::has_force() const {
  return _internal_has_force();
}
inline void PbBody::clear_force() {
  if (force_ != nullptr) force_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::box2d::PbVec2& PbBody::_internal_force() const {
  const ::box2d::PbVec2* p = force_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& PbBody::force() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.force)
  return _internal_force();
}
inline void PbBody::unsafe_arena_set_allocated_force(
    ::box2d::PbVec2* force) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(force_);
  }
  force_ = force;
  if (force) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbBody.force)
}
inline ::box2d::PbVec2* PbBody::release_force() {
  auto temp = unsafe_arena_release_force();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* PbBody::unsafe_arena_release_force() {
  // @@protoc_insertion_point(field_release:box2d.PbBody.force)
  _has_bits_[0] &= ~0x00000008u;
  ::box2d::PbVec2* temp = force_;
  force_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* PbBody::_internal_mutable_force() {
  _has_bits_[0] |= 0x00000008u;
  if (force_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    force_ = p;
  }
  return force_;
}
inline ::box2d::PbVec2* PbBody::mutable_force() {
  // @@protoc_insertion_point(field_mutable:box2d.PbBody.force)
  return _internal_mutable_force();
}
inline void PbBody::set_allocated_force(::box2d::PbVec2* force) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete force_;
  }
  if (force) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(force);
    if (message_arena != submessage_arena) {
      force = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, force, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  force_ = force;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbBody.force)
}

// optional float torque = 15;
inline bool PbBody::_internal_has_torque() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PbBody::has_torque() const {
  return _internal_has_torque();
}
inline void PbBody::clear_torque() {
  torque_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float PbBody::_internal_torque() const {
  return torque_;
}
inline float PbBody::torque() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.torque)
  return _internal_torque();
}
inline void PbBody::_internal_set_torque(float value) {
  _has_bits_[0] |= 0x00000100u;
  torque_ = value;
}
inline void PbBody::set_torque(float value) {
  _internal_set_torque(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.torque)
}

// optional float mass = 16;
inline bool PbBody::_internal_has_mass() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PbBody::has_mass() const {
  return _internal_has_mass();
}
inline void PbBody::clear_mass() {
  mass_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float PbBody::_internal_mass() const {
  return mass_;
}
inline float PbBody::mass() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.mass)
  return _internal_mass();
}
inline void PbBody::_internal_set_mass(float value) {
  _has_bits_[0] |= 0x00000200u;
  mass_ = value;
}
inline void PbBody::set_mass(float value) {
  _internal_set_mass(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.mass)
}

// optional float I = 17;
inline bool PbBody::_internal_has_i() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PbBody::has_i() const {
  return _internal_has_i();
}
inline void PbBody::clear_i() {
  i_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float PbBody::_internal_i() const {
  return i_;
}
inline float PbBody::i() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.I)
  return _internal_i();
}
inline void PbBody::_internal_set_i(float value) {
  _has_bits_[0] |= 0x00000400u;
  i_ = value;
}
inline void PbBody::set_i(float value) {
  _internal_set_i(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.I)
}

// optional float linear_damping = 50;
inline bool PbBody::_internal_has_linear_damping() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PbBody::has_linear_damping() const {
  return _internal_has_linear_damping();
}
inline void PbBody::clear_linear_damping() {
  linear_damping_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float PbBody::_internal_linear_damping() const {
  return linear_damping_;
}
inline float PbBody::linear_damping() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.linear_damping)
  return _internal_linear_damping();
}
inline void PbBody::_internal_set_linear_damping(float value) {
  _has_bits_[0] |= 0x00001000u;
  linear_damping_ = value;
}
inline void PbBody::set_linear_damping(float value) {
  _internal_set_linear_damping(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.linear_damping)
}

// optional float angular_damping = 51;
inline bool PbBody::_internal_has_angular_damping() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PbBody::has_angular_damping() const {
  return _internal_has_angular_damping();
}
inline void PbBody::clear_angular_damping() {
  angular_damping_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float PbBody::_internal_angular_damping() const {
  return angular_damping_;
}
inline float PbBody::angular_damping() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.angular_damping)
  return _internal_angular_damping();
}
inline void PbBody::_internal_set_angular_damping(float value) {
  _has_bits_[0] |= 0x00002000u;
  angular_damping_ = value;
}
inline void PbBody::set_angular_damping(float value) {
  _internal_set_angular_damping(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.angular_damping)
}

// optional float gravity_scale = 52;
inline bool PbBody::_internal_has_gravity_scale() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool PbBody::has_gravity_scale() const {
  return _internal_has_gravity_scale();
}
inline void PbBody::clear_gravity_scale() {
  gravity_scale_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float PbBody::_internal_gravity_scale() const {
  return gravity_scale_;
}
inline float PbBody::gravity_scale() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.gravity_scale)
  return _internal_gravity_scale();
}
inline void PbBody::_internal_set_gravity_scale(float value) {
  _has_bits_[0] |= 0x00004000u;
  gravity_scale_ = value;
}
inline void PbBody::set_gravity_scale(float value) {
  _internal_set_gravity_scale(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.gravity_scale)
}

// optional bool bullet = 53;
inline bool PbBody::_internal_has_bullet() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool PbBody::has_bullet() const {
  return _internal_has_bullet();
}
inline void PbBody::clear_bullet() {
  bullet_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool PbBody::_internal_bullet() const {
  return bullet_;
}
inline bool PbBody::bullet() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.bullet)
  return _internal_bullet();
}
inline void PbBody::_internal_set_bullet(bool value) {
  _has_bits_[0] |= 0x00008000u;
  bullet_ = value;
}
inline void PbBody::set_bullet(bool value) {
  _internal_set_bullet(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.bullet)
}

// optional bool allow_sleep = 54;
inline bool PbBody::_internal_has_allow_sleep() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool PbBody::has_allow_sleep() const {
  return _internal_has_allow_sleep();
}
inline void PbBody::clear_allow_sleep() {
  allow_sleep_ = false;
  _has_bits_[0] &= ~0x00010000u;
}
inline bool PbBody::_internal_allow_sleep() const {
  return allow_sleep_;
}
inline bool PbBody::allow_sleep() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.allow_sleep)
  return _internal_allow_sleep();
}
inline void PbBody::_internal_set_allow_sleep(bool value) {
  _has_bits_[0] |= 0x00010000u;
  allow_sleep_ = value;
}
inline void PbBody::set_allow_sleep(bool value) {
  _internal_set_allow_sleep(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.allow_sleep)
}

// optional bool awake = 55;
inline bool PbBody::_internal_has_awake() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool PbBody::has_awake() const {
  return _internal_has_awake();
}
inline void PbBody::clear_awake() {
  awake_ = false;
  _has_bits_[0] &= ~0x00020000u;
}
inline bool PbBody::_internal_awake() const {
  return awake_;
}
inline bool PbBody::awake() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.awake)
  return _internal_awake();
}
inline void PbBody::_internal_set_awake(bool value) {
  _has_bits_[0] |= 0x00020000u;
  awake_ = value;
}
inline void PbBody::set_awake(bool value) {
  _internal_set_awake(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.awake)
}

// optional bool active = 56;
inline bool PbBody::_internal_has_active() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool PbBody::has_active() const {
  return _internal_has_active();
}
inline void PbBody::clear_active() {
  active_ = false;
  _has_bits_[0] &= ~0x00040000u;
}
inline bool PbBody::_internal_active() const {
  return active_;
}
inline bool PbBody::active() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.active)
  return _internal_active();
}
inline void PbBody::_internal_set_active(bool value) {
  _has_bits_[0] |= 0x00040000u;
  active_ = value;
}
inline void PbBody::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.active)
}

// optional bool fixed_rotation = 57;
inline bool PbBody::_internal_has_fixed_rotation() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PbBody::has_fixed_rotation() const {
  return _internal_has_fixed_rotation();
}
inline void PbBody::clear_fixed_rotation() {
  fixed_rotation_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool PbBody::_internal_fixed_rotation() const {
  return fixed_rotation_;
}
inline bool PbBody::fixed_rotation() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.fixed_rotation)
  return _internal_fixed_rotation();
}
inline void PbBody::_internal_set_fixed_rotation(bool value) {
  _has_bits_[0] |= 0x00000800u;
  fixed_rotation_ = value;
}
inline void PbBody::set_fixed_rotation(bool value) {
  _internal_set_fixed_rotation(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.fixed_rotation)
}

// optional string UUID = 60;
inline bool PbBody::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PbBody::has_uuid() const {
  return _internal_has_uuid();
}
inline void PbBody::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PbBody::uuid() const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.UUID)
  return _internal_uuid();
}
inline void PbBody::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:box2d.PbBody.UUID)
}
inline std::string* PbBody::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:box2d.PbBody.UUID)
  return _internal_mutable_uuid();
}
inline const std::string& PbBody::_internal_uuid() const {
  return uuid_.Get();
}
inline void PbBody::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PbBody::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:box2d.PbBody.UUID)
}
inline void PbBody::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:box2d.PbBody.UUID)
}
inline void PbBody::set_uuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:box2d.PbBody.UUID)
}
inline std::string* PbBody::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PbBody::release_uuid() {
  // @@protoc_insertion_point(field_release:box2d.PbBody.UUID)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PbBody::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:box2d.PbBody.UUID)
}
inline std::string* PbBody::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:box2d.PbBody.UUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PbBody::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbBody.UUID)
}

// repeated .box2d.PbFixture fixtures = 100;
inline int PbBody::_internal_fixtures_size() const {
  return fixtures_.size();
}
inline int PbBody::fixtures_size() const {
  return _internal_fixtures_size();
}
inline void PbBody::clear_fixtures() {
  fixtures_.Clear();
}
inline ::box2d::PbFixture* PbBody::mutable_fixtures(int index) {
  // @@protoc_insertion_point(field_mutable:box2d.PbBody.fixtures)
  return fixtures_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbFixture >*
PbBody::mutable_fixtures() {
  // @@protoc_insertion_point(field_mutable_list:box2d.PbBody.fixtures)
  return &fixtures_;
}
inline const ::box2d::PbFixture& PbBody::_internal_fixtures(int index) const {
  return fixtures_.Get(index);
}
inline const ::box2d::PbFixture& PbBody::fixtures(int index) const {
  // @@protoc_insertion_point(field_get:box2d.PbBody.fixtures)
  return _internal_fixtures(index);
}
inline ::box2d::PbFixture* PbBody::_internal_add_fixtures() {
  return fixtures_.Add();
}
inline ::box2d::PbFixture* PbBody::add_fixtures() {
  // @@protoc_insertion_point(field_add:box2d.PbBody.fixtures)
  return _internal_add_fixtures();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbFixture >&
PbBody::fixtures() const {
  // @@protoc_insertion_point(field_list:box2d.PbBody.fixtures)
  return fixtures_;
}

// -------------------------------------------------------------------

// PbWorld

// optional int64 tag = 1;
inline bool PbWorld::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PbWorld::has_tag() const {
  return _internal_has_tag();
}
inline void PbWorld::clear_tag() {
  tag_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PbWorld::_internal_tag() const {
  return tag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PbWorld::tag() const {
  // @@protoc_insertion_point(field_get:box2d.PbWorld.tag)
  return _internal_tag();
}
inline void PbWorld::_internal_set_tag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  tag_ = value;
}
inline void PbWorld::set_tag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:box2d.PbWorld.tag)
}

// optional .box2d.PbVec2 gravity = 2;
inline bool PbWorld::_internal_has_gravity() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || gravity_ != nullptr);
  return value;
}
inline bool PbWorld::has_gravity() const {
  return _internal_has_gravity();
}
inline void PbWorld::clear_gravity() {
  if (gravity_ != nullptr) gravity_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::box2d::PbVec2& PbWorld::_internal_gravity() const {
  const ::box2d::PbVec2* p = gravity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& PbWorld::gravity() const {
  // @@protoc_insertion_point(field_get:box2d.PbWorld.gravity)
  return _internal_gravity();
}
inline void PbWorld::unsafe_arena_set_allocated_gravity(
    ::box2d::PbVec2* gravity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gravity_);
  }
  gravity_ = gravity;
  if (gravity) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:box2d.PbWorld.gravity)
}
inline ::box2d::PbVec2* PbWorld::release_gravity() {
  auto temp = unsafe_arena_release_gravity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* PbWorld::unsafe_arena_release_gravity() {
  // @@protoc_insertion_point(field_release:box2d.PbWorld.gravity)
  _has_bits_[0] &= ~0x00000001u;
  ::box2d::PbVec2* temp = gravity_;
  gravity_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* PbWorld::_internal_mutable_gravity() {
  _has_bits_[0] |= 0x00000001u;
  if (gravity_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    gravity_ = p;
  }
  return gravity_;
}
inline ::box2d::PbVec2* PbWorld::mutable_gravity() {
  // @@protoc_insertion_point(field_mutable:box2d.PbWorld.gravity)
  return _internal_mutable_gravity();
}
inline void PbWorld::set_allocated_gravity(::box2d::PbVec2* gravity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gravity_;
  }
  if (gravity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gravity);
    if (message_arena != submessage_arena) {
      gravity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gravity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  gravity_ = gravity;
  // @@protoc_insertion_point(field_set_allocated:box2d.PbWorld.gravity)
}

// optional bool allow_sleep = 3;
inline bool PbWorld::_internal_has_allow_sleep() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PbWorld::has_allow_sleep() const {
  return _internal_has_allow_sleep();
}
inline void PbWorld::clear_allow_sleep() {
  allow_sleep_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool PbWorld::_internal_allow_sleep() const {
  return allow_sleep_;
}
inline bool PbWorld::allow_sleep() const {
  // @@protoc_insertion_point(field_get:box2d.PbWorld.allow_sleep)
  return _internal_allow_sleep();
}
inline void PbWorld::_internal_set_allow_sleep(bool value) {
  _has_bits_[0] |= 0x00000004u;
  allow_sleep_ = value;
}
inline void PbWorld::set_allow_sleep(bool value) {
  _internal_set_allow_sleep(value);
  // @@protoc_insertion_point(field_set:box2d.PbWorld.allow_sleep)
}

// optional bool auto_clear_forces = 4;
inline bool PbWorld::_internal_has_auto_clear_forces() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PbWorld::has_auto_clear_forces() const {
  return _internal_has_auto_clear_forces();
}
inline void PbWorld::clear_auto_clear_forces() {
  auto_clear_forces_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool PbWorld::_internal_auto_clear_forces() const {
  return auto_clear_forces_;
}
inline bool PbWorld::auto_clear_forces() const {
  // @@protoc_insertion_point(field_get:box2d.PbWorld.auto_clear_forces)
  return _internal_auto_clear_forces();
}
inline void PbWorld::_internal_set_auto_clear_forces(bool value) {
  _has_bits_[0] |= 0x00000008u;
  auto_clear_forces_ = value;
}
inline void PbWorld::set_auto_clear_forces(bool value) {
  _internal_set_auto_clear_forces(value);
  // @@protoc_insertion_point(field_set:box2d.PbWorld.auto_clear_forces)
}

// optional bool warm_starting = 5;
inline bool PbWorld::_internal_has_warm_starting() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PbWorld::has_warm_starting() const {
  return _internal_has_warm_starting();
}
inline void PbWorld::clear_warm_starting() {
  warm_starting_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool PbWorld::_internal_warm_starting() const {
  return warm_starting_;
}
inline bool PbWorld::warm_starting() const {
  // @@protoc_insertion_point(field_get:box2d.PbWorld.warm_starting)
  return _internal_warm_starting();
}
inline void PbWorld::_internal_set_warm_starting(bool value) {
  _has_bits_[0] |= 0x00000010u;
  warm_starting_ = value;
}
inline void PbWorld::set_warm_starting(bool value) {
  _internal_set_warm_starting(value);
  // @@protoc_insertion_point(field_set:box2d.PbWorld.warm_starting)
}

// optional bool continuous_physics = 6;
inline bool PbWorld::_internal_has_continuous_physics() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PbWorld::has_continuous_physics() const {
  return _internal_has_continuous_physics();
}
inline void PbWorld::clear_continuous_physics() {
  continuous_physics_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool PbWorld::_internal_continuous_physics() const {
  return continuous_physics_;
}
inline bool PbWorld::continuous_physics() const {
  // @@protoc_insertion_point(field_get:box2d.PbWorld.continuous_physics)
  return _internal_continuous_physics();
}
inline void PbWorld::_internal_set_continuous_physics(bool value) {
  _has_bits_[0] |= 0x00000020u;
  continuous_physics_ = value;
}
inline void PbWorld::set_continuous_physics(bool value) {
  _internal_set_continuous_physics(value);
  // @@protoc_insertion_point(field_set:box2d.PbWorld.continuous_physics)
}

// optional bool sub_stepping = 7;
inline bool PbWorld::_internal_has_sub_stepping() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PbWorld::has_sub_stepping() const {
  return _internal_has_sub_stepping();
}
inline void PbWorld::clear_sub_stepping() {
  sub_stepping_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool PbWorld::_internal_sub_stepping() const {
  return sub_stepping_;
}
inline bool PbWorld::sub_stepping() const {
  // @@protoc_insertion_point(field_get:box2d.PbWorld.sub_stepping)
  return _internal_sub_stepping();
}
inline void PbWorld::_internal_set_sub_stepping(bool value) {
  _has_bits_[0] |= 0x00000040u;
  sub_stepping_ = value;
}
inline void PbWorld::set_sub_stepping(bool value) {
  _internal_set_sub_stepping(value);
  // @@protoc_insertion_point(field_set:box2d.PbWorld.sub_stepping)
}

// repeated .box2d.PbBody bodies = 20;
inline int PbWorld::_internal_bodies_size() const {
  return bodies_.size();
}
inline int PbWorld::bodies_size() const {
  return _internal_bodies_size();
}
inline void PbWorld::clear_bodies() {
  bodies_.Clear();
}
inline ::box2d::PbBody* PbWorld::mutable_bodies(int index) {
  // @@protoc_insertion_point(field_mutable:box2d.PbWorld.bodies)
  return bodies_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbBody >*
PbWorld::mutable_bodies() {
  // @@protoc_insertion_point(field_mutable_list:box2d.PbWorld.bodies)
  return &bodies_;
}
inline const ::box2d::PbBody& PbWorld::_internal_bodies(int index) const {
  return bodies_.Get(index);
}
inline const ::box2d::PbBody& PbWorld::bodies(int index) const {
  // @@protoc_insertion_point(field_get:box2d.PbWorld.bodies)
  return _internal_bodies(index);
}
inline ::box2d::PbBody* PbWorld::_internal_add_bodies() {
  return bodies_.Add();
}
inline ::box2d::PbBody* PbWorld::add_bodies() {
  // @@protoc_insertion_point(field_add:box2d.PbWorld.bodies)
  return _internal_add_bodies();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbBody >&
PbWorld::bodies() const {
  // @@protoc_insertion_point(field_list:box2d.PbWorld.bodies)
  return bodies_;
}

// repeated .box2d.PbJoint joints = 21;
inline int PbWorld::_internal_joints_size() const {
  return joints_.size();
}
inline int PbWorld::joints_size() const {
  return _internal_joints_size();
}
inline void PbWorld::clear_joints() {
  joints_.Clear();
}
inline ::box2d::PbJoint* PbWorld::mutable_joints(int index) {
  // @@protoc_insertion_point(field_mutable:box2d.PbWorld.joints)
  return joints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbJoint >*
PbWorld::mutable_joints() {
  // @@protoc_insertion_point(field_mutable_list:box2d.PbWorld.joints)
  return &joints_;
}
inline const ::box2d::PbJoint& PbWorld::_internal_joints(int index) const {
  return joints_.Get(index);
}
inline const ::box2d::PbJoint& PbWorld::joints(int index) const {
  // @@protoc_insertion_point(field_get:box2d.PbWorld.joints)
  return _internal_joints(index);
}
inline ::box2d::PbJoint* PbWorld::_internal_add_joints() {
  return joints_.Add();
}
inline ::box2d::PbJoint* PbWorld::add_joints() {
  // @@protoc_insertion_point(field_add:box2d.PbWorld.joints)
  return _internal_add_joints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::box2d::PbJoint >&
PbWorld::joints() const {
  // @@protoc_insertion_point(field_list:box2d.PbWorld.joints)
  return joints_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace box2d

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::box2d::PbBodyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::box2d::PbBodyType>() {
  return ::box2d::PbBodyType_descriptor();
}
template <> struct is_proto_enum< ::box2d::PbShapeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::box2d::PbShapeType>() {
  return ::box2d::PbShapeType_descriptor();
}
template <> struct is_proto_enum< ::box2d::PbJointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::box2d::PbJointType>() {
  return ::box2d::PbJointType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_box2d_2eproto
