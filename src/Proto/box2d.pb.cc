// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: box2d.proto

#include "box2d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_box2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PbBody_box2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_box2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PbFilter_box2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_box2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PbFixture_box2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_box2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PbJoint_box2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_box2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PbShape_box2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_box2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PbVec2_box2d_2eproto;
namespace box2d {
class PbVec2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PbVec2> _instance;
} _PbVec2_default_instance_;
class PbFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PbFilter> _instance;
} _PbFilter_default_instance_;
class PbShapeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PbShape> _instance;
} _PbShape_default_instance_;
class PbFixtureDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PbFixture> _instance;
} _PbFixture_default_instance_;
class PbJointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PbJoint> _instance;
} _PbJoint_default_instance_;
class PbBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PbBody> _instance;
} _PbBody_default_instance_;
class PbWorldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PbWorld> _instance;
} _PbWorld_default_instance_;
}  // namespace box2d
static void InitDefaultsscc_info_PbBody_box2d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::box2d::_PbBody_default_instance_;
    new (ptr) ::box2d::PbBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PbBody_box2d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PbBody_box2d_2eproto}, {
      &scc_info_PbVec2_box2d_2eproto.base,
      &scc_info_PbFixture_box2d_2eproto.base,}};

static void InitDefaultsscc_info_PbFilter_box2d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::box2d::_PbFilter_default_instance_;
    new (ptr) ::box2d::PbFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PbFilter_box2d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PbFilter_box2d_2eproto}, {}};

static void InitDefaultsscc_info_PbFixture_box2d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::box2d::_PbFixture_default_instance_;
    new (ptr) ::box2d::PbFixture();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbFixture::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PbFixture_box2d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PbFixture_box2d_2eproto}, {
      &scc_info_PbFilter_box2d_2eproto.base,
      &scc_info_PbShape_box2d_2eproto.base,}};

static void InitDefaultsscc_info_PbJoint_box2d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::box2d::_PbJoint_default_instance_;
    new (ptr) ::box2d::PbJoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbJoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PbJoint_box2d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PbJoint_box2d_2eproto}, {
      &scc_info_PbVec2_box2d_2eproto.base,}};

static void InitDefaultsscc_info_PbShape_box2d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::box2d::_PbShape_default_instance_;
    new (ptr) ::box2d::PbShape();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbShape::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PbShape_box2d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PbShape_box2d_2eproto}, {
      &scc_info_PbVec2_box2d_2eproto.base,}};

static void InitDefaultsscc_info_PbVec2_box2d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::box2d::_PbVec2_default_instance_;
    new (ptr) ::box2d::PbVec2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbVec2::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PbVec2_box2d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PbVec2_box2d_2eproto}, {}};

static void InitDefaultsscc_info_PbWorld_box2d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::box2d::_PbWorld_default_instance_;
    new (ptr) ::box2d::PbWorld();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::box2d::PbWorld::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_PbWorld_box2d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_PbWorld_box2d_2eproto}, {
      &scc_info_PbVec2_box2d_2eproto.base,
      &scc_info_PbBody_box2d_2eproto.base,
      &scc_info_PbJoint_box2d_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_box2d_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_box2d_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_box2d_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_box2d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::box2d::PbVec2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbVec2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::box2d::PbVec2, x_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbVec2, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::box2d::PbFilter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::box2d::PbFilter, category_bits_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbFilter, mask_bits_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbFilter, group_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::box2d::PbShape, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::box2d::PbShape, tag_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbShape, type_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbShape, center_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbShape, radius_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbShape, points_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbShape, normals_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbShape, centroid_),
  2,
  4,
  0,
  3,
  ~0u,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::box2d::PbFixture, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbFixture, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::box2d::PbFixture, tag_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbFixture, restitution_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbFixture, friction_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbFixture, density_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbFixture, sensor_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbFixture, filter_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbFixture, shape_),
  2,
  3,
  4,
  5,
  6,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, tag_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, type_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, body_a_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, body_b_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, collideconnected_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, local_anchor_a_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, local_anchor_b_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, ref_angle_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, enable_limit_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, lower_limit_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, upper_limit_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, enable_motor_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, motor_speed_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, max_motor_torque_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, local_axis_a_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, max_motor_force_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, length_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, frequency_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, damping_ratio_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, ground_anchor_a_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, ground_anchor_b_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, length_a_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, length_b_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, ratio_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, max_length_a_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, max_length_b_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, target_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, max_force_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, joint1_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, joint2_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, spring_frequency_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, spring_damping_ratio_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, max_torque_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, max_length_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, bodies_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, joints_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbJoint, target_volume_),
  6,
  34,
  7,
  8,
  10,
  0,
  1,
  9,
  11,
  13,
  14,
  12,
  15,
  16,
  2,
  17,
  18,
  19,
  20,
  3,
  4,
  22,
  23,
  24,
  25,
  26,
  5,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  ~0u,
  ~0u,
  21,
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, tag_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, type_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, position_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, angle_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, linear_velocity_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, angular_velocity_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, force_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, torque_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, mass_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, i_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, linear_damping_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, angular_damping_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, gravity_scale_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, bullet_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, allow_sleep_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, awake_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, active_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, fixed_rotation_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, uuid_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbBody, fixtures_),
  4,
  5,
  1,
  6,
  2,
  7,
  3,
  8,
  9,
  10,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  11,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::box2d::PbWorld, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::box2d::PbWorld, tag_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbWorld, gravity_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbWorld, allow_sleep_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbWorld, auto_clear_forces_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbWorld, warm_starting_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbWorld, continuous_physics_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbWorld, sub_stepping_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbWorld, bodies_),
  PROTOBUF_FIELD_OFFSET(::box2d::PbWorld, joints_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::box2d::PbVec2)},
  { 9, 17, sizeof(::box2d::PbFilter)},
  { 20, 32, sizeof(::box2d::PbShape)},
  { 39, 51, sizeof(::box2d::PbFixture)},
  { 58, 100, sizeof(::box2d::PbJoint)},
  { 137, 162, sizeof(::box2d::PbBody)},
  { 182, 196, sizeof(::box2d::PbWorld)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::box2d::_PbVec2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::box2d::_PbFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::box2d::_PbShape_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::box2d::_PbFixture_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::box2d::_PbJoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::box2d::_PbBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::box2d::_PbWorld_default_instance_),
};

const char descriptor_table_protodef_box2d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013box2d.proto\022\005box2d\"\036\n\006PbVec2\022\t\n\001x\030\001 \002("
  "\002\022\t\n\001y\030\002 \002(\002\"I\n\010PbFilter\022\025\n\rcategory_bit"
  "s\030\001 \001(\005\022\021\n\tmask_bits\030\002 \001(\005\022\023\n\013group_inde"
  "x\030\003 \001(\005\"\307\001\n\007PbShape\022\013\n\003tag\030\001 \001(\003\022 \n\004type"
  "\030\002 \002(\0162\022.box2d.PbShapeType\022\035\n\006center\030\n \001"
  "(\0132\r.box2d.PbVec2\022\016\n\006radius\030\013 \001(\002\022\035\n\006poi"
  "nts\030\024 \003(\0132\r.box2d.PbVec2\022\036\n\007normals\030\025 \003("
  "\0132\r.box2d.PbVec2\022\037\n\010centroid\030\026 \001(\0132\r.box"
  "2d.PbVec2\"\240\001\n\tPbFixture\022\013\n\003tag\030\001 \001(\003\022\023\n\013"
  "restitution\030\002 \001(\002\022\020\n\010friction\030\003 \001(\002\022\017\n\007d"
  "ensity\030\004 \001(\002\022\016\n\006sensor\030\005 \001(\010\022\037\n\006filter\030\n"
  " \001(\0132\017.box2d.PbFilter\022\035\n\005shape\030\013 \001(\0132\016.b"
  "ox2d.PbShape\"\350\006\n\007PbJoint\022\013\n\003tag\030\001 \001(\003\022 \n"
  "\004type\030\002 \002(\0162\022.box2d.PbJointType\022\016\n\006body_"
  "a\030\003 \001(\005\022\016\n\006body_b\030\004 \001(\005\022\030\n\020collideConnec"
  "ted\030\005 \001(\010\022%\n\016local_anchor_a\030\006 \001(\0132\r.box2"
  "d.PbVec2\022%\n\016local_anchor_b\030\007 \001(\0132\r.box2d"
  ".PbVec2\022\021\n\tref_angle\030\n \001(\002\022\024\n\014enable_lim"
  "it\030\014 \001(\010\022\023\n\013lower_limit\030\r \001(\002\022\023\n\013upper_l"
  "imit\030\016 \001(\002\022\024\n\014enable_motor\030\017 \001(\010\022\023\n\013moto"
  "r_speed\030\020 \001(\002\022\030\n\020max_motor_torque\030\021 \001(\002\022"
  "#\n\014local_axis_a\030\024 \001(\0132\r.box2d.PbVec2\022\027\n\017"
  "max_motor_force\030\025 \001(\002\022\016\n\006length\030\036 \001(\002\022\021\n"
  "\tfrequency\030\037 \001(\002\022\025\n\rdamping_ratio\030  \001(\002\022"
  "&\n\017ground_anchor_a\030( \001(\0132\r.box2d.PbVec2\022"
  "&\n\017ground_anchor_b\030) \001(\0132\r.box2d.PbVec2\022"
  "\020\n\010length_a\030* \001(\002\022\020\n\010length_b\030+ \001(\002\022\r\n\005r"
  "atio\030, \001(\002\022\024\n\014max_length_a\030- \001(\002\022\024\n\014max_"
  "length_b\030. \001(\002\022\035\n\006target\0302 \001(\0132\r.box2d.P"
  "bVec2\022\021\n\tmax_force\0303 \001(\002\022\016\n\006joint1\030= \001(\005"
  "\022\016\n\006joint2\030> \001(\005\022\030\n\020spring_frequency\030F \001"
  "(\002\022\034\n\024spring_damping_ratio\030G \001(\002\022\022\n\nmax_"
  "torque\030Z \001(\002\022\022\n\nmax_length\030d \001(\002\022\016\n\006bodi"
  "es\030n \003(\005\022\016\n\006joints\030o \003(\005\022\025\n\rtarget_volum"
  "e\030p \001(\002\"\305\003\n\006PbBody\022\013\n\003tag\030\001 \001(\003\022\037\n\004type\030"
  "\002 \002(\0162\021.box2d.PbBodyType\022\037\n\010position\030\n \001"
  "(\0132\r.box2d.PbVec2\022\r\n\005angle\030\013 \001(\002\022&\n\017line"
  "ar_velocity\030\014 \001(\0132\r.box2d.PbVec2\022\030\n\020angu"
  "lar_velocity\030\r \001(\002\022\034\n\005force\030\016 \001(\0132\r.box2"
  "d.PbVec2\022\016\n\006torque\030\017 \001(\002\022\014\n\004mass\030\020 \001(\002\022\t"
  "\n\001I\030\021 \001(\002\022\026\n\016linear_damping\0302 \001(\002\022\027\n\017ang"
  "ular_damping\0303 \001(\002\022\025\n\rgravity_scale\0304 \001("
  "\002\022\016\n\006bullet\0305 \001(\010\022\023\n\013allow_sleep\0306 \001(\010\022\r"
  "\n\005awake\0307 \001(\010\022\016\n\006active\0308 \001(\010\022\026\n\016fixed_r"
  "otation\0309 \001(\010\022\014\n\004UUID\030< \001(\t\022\"\n\010fixtures\030"
  "d \003(\0132\020.box2d.PbFixture\"\356\001\n\007PbWorld\022\013\n\003t"
  "ag\030\001 \001(\003\022\036\n\007gravity\030\002 \001(\0132\r.box2d.PbVec2"
  "\022\023\n\013allow_sleep\030\003 \001(\010\022\031\n\021auto_clear_forc"
  "es\030\004 \001(\010\022\025\n\rwarm_starting\030\005 \001(\010\022\032\n\022conti"
  "nuous_physics\030\006 \001(\010\022\024\n\014sub_stepping\030\007 \001("
  "\010\022\035\n\006bodies\030\024 \003(\0132\r.box2d.PbBody\022\036\n\006join"
  "ts\030\025 \003(\0132\016.box2d.PbJoint*4\n\nPbBodyType\022\n"
  "\n\006STATIC\020\000\022\013\n\007DYNAMIC\020\001\022\r\n\tKINEMATIC\020\002*:"
  "\n\013PbShapeType\022\n\n\006CIRCLE\020\001\022\013\n\007POLYGON\020\002\022\010"
  "\n\004EDGE\020\003\022\010\n\004LOOP\020\004*\245\001\n\013PbJointType\022\014\n\010DI"
  "STANCE\020\001\022\014\n\010REVOLUTE\020\002\022\r\n\tPRISMATIC\020\003\022\n\n"
  "\006PULLEY\020\004\022\t\n\005MOUSE\020\005\022\010\n\004GEAR\020\006\022\t\n\005WHEEL\020"
  "\007\022\010\n\004WELD\020\010\022\014\n\010FRICTION\020\t\022\010\n\004ROPE\020\n\022\023\n\017C"
  "ONSTANT_VOLUME\020\013\022\010\n\004LINE\020\014"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_box2d_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_box2d_2eproto_sccs[7] = {
  &scc_info_PbBody_box2d_2eproto.base,
  &scc_info_PbFilter_box2d_2eproto.base,
  &scc_info_PbFixture_box2d_2eproto.base,
  &scc_info_PbJoint_box2d_2eproto.base,
  &scc_info_PbShape_box2d_2eproto.base,
  &scc_info_PbVec2_box2d_2eproto.base,
  &scc_info_PbWorld_box2d_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_box2d_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_box2d_2eproto = {
  false, false, descriptor_table_protodef_box2d_2eproto, "box2d.proto", 2346,
  &descriptor_table_box2d_2eproto_once, descriptor_table_box2d_2eproto_sccs, descriptor_table_box2d_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_box2d_2eproto::offsets,
  file_level_metadata_box2d_2eproto, 7, file_level_enum_descriptors_box2d_2eproto, file_level_service_descriptors_box2d_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_box2d_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_box2d_2eproto)), true);
namespace box2d {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PbBodyType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_box2d_2eproto);
  return file_level_enum_descriptors_box2d_2eproto[0];
}
bool PbBodyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PbShapeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_box2d_2eproto);
  return file_level_enum_descriptors_box2d_2eproto[1];
}
bool PbShapeType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PbJointType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_box2d_2eproto);
  return file_level_enum_descriptors_box2d_2eproto[2];
}
bool PbJointType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PbVec2::InitAsDefaultInstance() {
}
class PbVec2::_Internal {
 public:
  using HasBits = decltype(std::declval<PbVec2>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

PbVec2::PbVec2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:box2d.PbVec2)
}
PbVec2::PbVec2(const PbVec2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbVec2)
}

void PbVec2::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

PbVec2::~PbVec2() {
  // @@protoc_insertion_point(destructor:box2d.PbVec2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PbVec2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PbVec2::ArenaDtor(void* object) {
  PbVec2* _this = reinterpret_cast< PbVec2* >(object);
  (void)_this;
}
void PbVec2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbVec2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbVec2& PbVec2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PbVec2_box2d_2eproto.base);
  return *internal_default_instance();
}


void PbVec2::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbVec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbVec2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbVec2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbVec2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbVec2)
  return target;
}

size_t PbVec2::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:box2d.PbVec2)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (_internal_has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PbVec2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbVec2)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbVec2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbVec2)
  GOOGLE_DCHECK_NE(&from, this);
  const PbVec2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PbVec2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbVec2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbVec2)
    MergeFrom(*source);
  }
}

void PbVec2::MergeFrom(const PbVec2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbVec2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbVec2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbVec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbVec2::CopyFrom(const PbVec2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbVec2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbVec2::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PbVec2::InternalSwap(PbVec2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PbVec2, y_)
      + sizeof(PbVec2::y_)
      - PROTOBUF_FIELD_OFFSET(PbVec2, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PbVec2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PbFilter::InitAsDefaultInstance() {
}
class PbFilter::_Internal {
 public:
  using HasBits = decltype(std::declval<PbFilter>()._has_bits_);
  static void set_has_category_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mask_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_group_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PbFilter::PbFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:box2d.PbFilter)
}
PbFilter::PbFilter(const PbFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&category_bits_, &from.category_bits_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_index_) -
    reinterpret_cast<char*>(&category_bits_)) + sizeof(group_index_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbFilter)
}

void PbFilter::SharedCtor() {
  ::memset(&category_bits_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_index_) -
      reinterpret_cast<char*>(&category_bits_)) + sizeof(group_index_));
}

PbFilter::~PbFilter() {
  // @@protoc_insertion_point(destructor:box2d.PbFilter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PbFilter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PbFilter::ArenaDtor(void* object) {
  PbFilter* _this = reinterpret_cast< PbFilter* >(object);
  (void)_this;
}
void PbFilter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbFilter& PbFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PbFilter_box2d_2eproto.base);
  return *internal_default_instance();
}


void PbFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&category_bits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_index_) -
        reinterpret_cast<char*>(&category_bits_)) + sizeof(group_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 category_bits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_category_bits(&has_bits);
          category_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 mask_bits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mask_bits(&has_bits);
          mask_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 group_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_group_index(&has_bits);
          group_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 category_bits = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_category_bits(), target);
  }

  // optional int32 mask_bits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mask_bits(), target);
  }

  // optional int32 group_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_group_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbFilter)
  return target;
}

size_t PbFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 category_bits = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_category_bits());
    }

    // optional int32 mask_bits = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_mask_bits());
    }

    // optional int32 group_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_group_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const PbFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PbFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbFilter)
    MergeFrom(*source);
  }
}

void PbFilter::MergeFrom(const PbFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      category_bits_ = from.category_bits_;
    }
    if (cached_has_bits & 0x00000002u) {
      mask_bits_ = from.mask_bits_;
    }
    if (cached_has_bits & 0x00000004u) {
      group_index_ = from.group_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbFilter::CopyFrom(const PbFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbFilter::IsInitialized() const {
  return true;
}

void PbFilter::InternalSwap(PbFilter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PbFilter, group_index_)
      + sizeof(PbFilter::group_index_)
      - PROTOBUF_FIELD_OFFSET(PbFilter, category_bits_)>(
          reinterpret_cast<char*>(&category_bits_),
          reinterpret_cast<char*>(&other->category_bits_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PbFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PbShape::InitAsDefaultInstance() {
  ::box2d::_PbShape_default_instance_._instance.get_mutable()->center_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbShape_default_instance_._instance.get_mutable()->centroid_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
}
class PbShape::_Internal {
 public:
  using HasBits = decltype(std::declval<PbShape>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::box2d::PbVec2& center(const PbShape* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::box2d::PbVec2& centroid(const PbShape* msg);
  static void set_has_centroid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::box2d::PbVec2&
PbShape::_Internal::center(const PbShape* msg) {
  return *msg->center_;
}
const ::box2d::PbVec2&
PbShape::_Internal::centroid(const PbShape* msg) {
  return *msg->centroid_;
}
PbShape::PbShape(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena),
  normals_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:box2d.PbShape)
}
PbShape::PbShape(const PbShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      points_(from.points_),
      normals_(from.normals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::box2d::PbVec2(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_centroid()) {
    centroid_ = new ::box2d::PbVec2(*from.centroid_);
  } else {
    centroid_ = nullptr;
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbShape)
}

void PbShape::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PbShape_box2d_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&center_)) + sizeof(radius_));
  type_ = 1;
}

PbShape::~PbShape() {
  // @@protoc_insertion_point(destructor:box2d.PbShape)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PbShape::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete centroid_;
}

void PbShape::ArenaDtor(void* object) {
  PbShape* _this = reinterpret_cast< PbShape* >(object);
  (void)_this;
}
void PbShape::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbShape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbShape& PbShape::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PbShape_box2d_2eproto.base);
  return *internal_default_instance();
}


void PbShape::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  normals_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(center_ != nullptr);
      center_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(centroid_ != nullptr);
      centroid_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radius_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(radius_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbShape::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tag(&has_bits);
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .box2d.PbShapeType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::box2d::PbShapeType_IsValid(val))) {
            _internal_set_type(static_cast<::box2d::PbShapeType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbVec2 center = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float radius = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated .box2d.PbVec2 points = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .box2d.PbVec2 normals = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_normals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbVec2 centroid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_centroid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbShape::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbShape)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_tag(), target);
  }

  // required .box2d.PbShapeType type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .box2d.PbVec2 center = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::center(this), target, stream);
  }

  // optional float radius = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_radius(), target);
  }

  // repeated .box2d.PbVec2 points = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_points(i), target, stream);
  }

  // repeated .box2d.PbVec2 normals = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_normals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_normals(i), target, stream);
  }

  // optional .box2d.PbVec2 centroid = 22;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::centroid(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbShape)
  return target;
}

size_t PbShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbShape)
  size_t total_size = 0;

  // required .box2d.PbShapeType type = 2;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .box2d.PbVec2 points = 20;
  total_size += 2UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .box2d.PbVec2 normals = 21;
  total_size += 2UL * this->_internal_normals_size();
  for (const auto& msg : this->normals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .box2d.PbVec2 center = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *center_);
    }

    // optional .box2d.PbVec2 centroid = 22;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *centroid_);
    }

    // optional int64 tag = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_tag());
    }

    // optional float radius = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbShape::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbShape)
  GOOGLE_DCHECK_NE(&from, this);
  const PbShape* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PbShape>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbShape)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbShape)
    MergeFrom(*source);
  }
}

void PbShape::MergeFrom(const PbShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  normals_.MergeFrom(from.normals_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_center()->::box2d::PbVec2::MergeFrom(from._internal_center());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_centroid()->::box2d::PbVec2::MergeFrom(from._internal_centroid());
    }
    if (cached_has_bits & 0x00000004u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000008u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbShape::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbShape::CopyFrom(const PbShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbShape::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(points_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(normals_)) return false;
  if (_internal_has_center()) {
    if (!center_->IsInitialized()) return false;
  }
  if (_internal_has_centroid()) {
    if (!centroid_->IsInitialized()) return false;
  }
  return true;
}

void PbShape::InternalSwap(PbShape* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  points_.InternalSwap(&other->points_);
  normals_.InternalSwap(&other->normals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PbShape, radius_)
      + sizeof(PbShape::radius_)
      - PROTOBUF_FIELD_OFFSET(PbShape, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PbShape::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PbFixture::InitAsDefaultInstance() {
  ::box2d::_PbFixture_default_instance_._instance.get_mutable()->filter_ = const_cast< ::box2d::PbFilter*>(
      ::box2d::PbFilter::internal_default_instance());
  ::box2d::_PbFixture_default_instance_._instance.get_mutable()->shape_ = const_cast< ::box2d::PbShape*>(
      ::box2d::PbShape::internal_default_instance());
}
class PbFixture::_Internal {
 public:
  using HasBits = decltype(std::declval<PbFixture>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_restitution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_friction(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_density(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sensor(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::box2d::PbFilter& filter(const PbFixture* msg);
  static void set_has_filter(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::box2d::PbShape& shape(const PbFixture* msg);
  static void set_has_shape(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::box2d::PbFilter&
PbFixture::_Internal::filter(const PbFixture* msg) {
  return *msg->filter_;
}
const ::box2d::PbShape&
PbFixture::_Internal::shape(const PbFixture* msg) {
  return *msg->shape_;
}
PbFixture::PbFixture(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:box2d.PbFixture)
}
PbFixture::PbFixture(const PbFixture& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_filter()) {
    filter_ = new ::box2d::PbFilter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from._internal_has_shape()) {
    shape_ = new ::box2d::PbShape(*from.shape_);
  } else {
    shape_ = nullptr;
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensor_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(sensor_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbFixture)
}

void PbFixture::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PbFixture_box2d_2eproto.base);
  ::memset(&filter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_) -
      reinterpret_cast<char*>(&filter_)) + sizeof(sensor_));
}

PbFixture::~PbFixture() {
  // @@protoc_insertion_point(destructor:box2d.PbFixture)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PbFixture::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete shape_;
}

void PbFixture::ArenaDtor(void* object) {
  PbFixture* _this = reinterpret_cast< PbFixture* >(object);
  (void)_this;
}
void PbFixture::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbFixture::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbFixture& PbFixture::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PbFixture_box2d_2eproto.base);
  return *internal_default_instance();
}


void PbFixture::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbFixture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(filter_ != nullptr);
      filter_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(shape_ != nullptr);
      shape_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sensor_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(sensor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbFixture::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tag(&has_bits);
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float restitution = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_restitution(&has_bits);
          restitution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float friction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_friction(&has_bits);
          friction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float density = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_density(&has_bits);
          density_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool sensor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sensor(&has_bits);
          sensor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbFilter filter = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbShape shape = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbFixture::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbFixture)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_tag(), target);
  }

  // optional float restitution = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_restitution(), target);
  }

  // optional float friction = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_friction(), target);
  }

  // optional float density = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_density(), target);
  }

  // optional bool sensor = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_sensor(), target);
  }

  // optional .box2d.PbFilter filter = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::filter(this), target, stream);
  }

  // optional .box2d.PbShape shape = 11;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::shape(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbFixture)
  return target;
}

size_t PbFixture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbFixture)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .box2d.PbFilter filter = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *filter_);
    }

    // optional .box2d.PbShape shape = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *shape_);
    }

    // optional int64 tag = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_tag());
    }

    // optional float restitution = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float friction = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float density = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional bool sensor = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbFixture::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbFixture)
  GOOGLE_DCHECK_NE(&from, this);
  const PbFixture* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PbFixture>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbFixture)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbFixture)
    MergeFrom(*source);
  }
}

void PbFixture::MergeFrom(const PbFixture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbFixture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_filter()->::box2d::PbFilter::MergeFrom(from._internal_filter());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_shape()->::box2d::PbShape::MergeFrom(from._internal_shape());
    }
    if (cached_has_bits & 0x00000004u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000008u) {
      restitution_ = from.restitution_;
    }
    if (cached_has_bits & 0x00000010u) {
      friction_ = from.friction_;
    }
    if (cached_has_bits & 0x00000020u) {
      density_ = from.density_;
    }
    if (cached_has_bits & 0x00000040u) {
      sensor_ = from.sensor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbFixture::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbFixture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbFixture::CopyFrom(const PbFixture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbFixture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbFixture::IsInitialized() const {
  if (_internal_has_shape()) {
    if (!shape_->IsInitialized()) return false;
  }
  return true;
}

void PbFixture::InternalSwap(PbFixture* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PbFixture, sensor_)
      + sizeof(PbFixture::sensor_)
      - PROTOBUF_FIELD_OFFSET(PbFixture, filter_)>(
          reinterpret_cast<char*>(&filter_),
          reinterpret_cast<char*>(&other->filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PbFixture::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PbJoint::InitAsDefaultInstance() {
  ::box2d::_PbJoint_default_instance_._instance.get_mutable()->local_anchor_a_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbJoint_default_instance_._instance.get_mutable()->local_anchor_b_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbJoint_default_instance_._instance.get_mutable()->local_axis_a_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbJoint_default_instance_._instance.get_mutable()->ground_anchor_a_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbJoint_default_instance_._instance.get_mutable()->ground_anchor_b_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbJoint_default_instance_._instance.get_mutable()->target_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
}
class PbJoint::_Internal {
 public:
  using HasBits = decltype(std::declval<PbJoint>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_body_a(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_body_b(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_collideconnected(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::box2d::PbVec2& local_anchor_a(const PbJoint* msg);
  static void set_has_local_anchor_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::box2d::PbVec2& local_anchor_b(const PbJoint* msg);
  static void set_has_local_anchor_b(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ref_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_enable_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_lower_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_upper_limit(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_enable_motor(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_motor_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_max_motor_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::box2d::PbVec2& local_axis_a(const PbJoint* msg);
  static void set_has_local_axis_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_max_motor_force(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_damping_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::box2d::PbVec2& ground_anchor_a(const PbJoint* msg);
  static void set_has_ground_anchor_a(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::box2d::PbVec2& ground_anchor_b(const PbJoint* msg);
  static void set_has_ground_anchor_b(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_length_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_length_b(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_max_length_a(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_max_length_b(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::box2d::PbVec2& target(const PbJoint* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_force(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_joint1(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_joint2(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_spring_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_spring_damping_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_max_torque(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_max_length(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_target_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[1] & 0x00000004) ^ 0x00000004) != 0;
  }
};

const ::box2d::PbVec2&
PbJoint::_Internal::local_anchor_a(const PbJoint* msg) {
  return *msg->local_anchor_a_;
}
const ::box2d::PbVec2&
PbJoint::_Internal::local_anchor_b(const PbJoint* msg) {
  return *msg->local_anchor_b_;
}
const ::box2d::PbVec2&
PbJoint::_Internal::local_axis_a(const PbJoint* msg) {
  return *msg->local_axis_a_;
}
const ::box2d::PbVec2&
PbJoint::_Internal::ground_anchor_a(const PbJoint* msg) {
  return *msg->ground_anchor_a_;
}
const ::box2d::PbVec2&
PbJoint::_Internal::ground_anchor_b(const PbJoint* msg) {
  return *msg->ground_anchor_b_;
}
const ::box2d::PbVec2&
PbJoint::_Internal::target(const PbJoint* msg) {
  return *msg->target_;
}
PbJoint::PbJoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bodies_(arena),
  joints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:box2d.PbJoint)
}
PbJoint::PbJoint(const PbJoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bodies_(from.bodies_),
      joints_(from.joints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_anchor_a()) {
    local_anchor_a_ = new ::box2d::PbVec2(*from.local_anchor_a_);
  } else {
    local_anchor_a_ = nullptr;
  }
  if (from._internal_has_local_anchor_b()) {
    local_anchor_b_ = new ::box2d::PbVec2(*from.local_anchor_b_);
  } else {
    local_anchor_b_ = nullptr;
  }
  if (from._internal_has_local_axis_a()) {
    local_axis_a_ = new ::box2d::PbVec2(*from.local_axis_a_);
  } else {
    local_axis_a_ = nullptr;
  }
  if (from._internal_has_ground_anchor_a()) {
    ground_anchor_a_ = new ::box2d::PbVec2(*from.ground_anchor_a_);
  } else {
    ground_anchor_a_ = nullptr;
  }
  if (from._internal_has_ground_anchor_b()) {
    ground_anchor_b_ = new ::box2d::PbVec2(*from.ground_anchor_b_);
  } else {
    ground_anchor_b_ = nullptr;
  }
  if (from._internal_has_target()) {
    target_ = new ::box2d::PbVec2(*from.target_);
  } else {
    target_ = nullptr;
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbJoint)
}

void PbJoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PbJoint_box2d_2eproto.base);
  ::memset(&local_anchor_a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_length_) -
      reinterpret_cast<char*>(&local_anchor_a_)) + sizeof(max_length_));
  type_ = 1;
}

PbJoint::~PbJoint() {
  // @@protoc_insertion_point(destructor:box2d.PbJoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PbJoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete local_anchor_a_;
  if (this != internal_default_instance()) delete local_anchor_b_;
  if (this != internal_default_instance()) delete local_axis_a_;
  if (this != internal_default_instance()) delete ground_anchor_a_;
  if (this != internal_default_instance()) delete ground_anchor_b_;
  if (this != internal_default_instance()) delete target_;
}

void PbJoint::ArenaDtor(void* object) {
  PbJoint* _this = reinterpret_cast< PbJoint* >(object);
  (void)_this;
}
void PbJoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbJoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbJoint& PbJoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PbJoint_box2d_2eproto.base);
  return *internal_default_instance();
}


void PbJoint::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbJoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bodies_.Clear();
  joints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(local_anchor_a_ != nullptr);
      local_anchor_a_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(local_anchor_b_ != nullptr);
      local_anchor_b_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(local_axis_a_ != nullptr);
      local_axis_a_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(ground_anchor_a_ != nullptr);
      ground_anchor_a_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(ground_anchor_b_ != nullptr);
      ground_anchor_b_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(target_ != nullptr);
      target_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&body_a_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(body_a_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&body_b_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&motor_speed_) -
        reinterpret_cast<char*>(&body_b_)) + sizeof(motor_speed_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&max_motor_torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_b_) -
        reinterpret_cast<char*>(&max_motor_torque_)) + sizeof(length_b_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spring_damping_ratio_) -
        reinterpret_cast<char*>(&ratio_)) + sizeof(spring_damping_ratio_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&max_torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_length_) -
        reinterpret_cast<char*>(&max_torque_)) + sizeof(max_length_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbJoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tag(&_has_bits_);
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .box2d.PbJointType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::box2d::PbJointType_IsValid(val))) {
            _internal_set_type(static_cast<::box2d::PbJointType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 body_a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_body_a(&_has_bits_);
          body_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 body_b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_body_b(&_has_bits_);
          body_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool collideConnected = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_collideconnected(&_has_bits_);
          collideconnected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbVec2 local_anchor_a = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_anchor_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbVec2 local_anchor_b = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_anchor_b(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float ref_angle = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ref_angle(&_has_bits_);
          ref_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enable_limit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_enable_limit(&_has_bits_);
          enable_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float lower_limit = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_lower_limit(&_has_bits_);
          lower_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float upper_limit = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_upper_limit(&_has_bits_);
          upper_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool enable_motor = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_enable_motor(&_has_bits_);
          enable_motor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float motor_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_motor_speed(&_has_bits_);
          motor_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_motor_torque = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_max_motor_torque(&_has_bits_);
          max_motor_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbVec2 local_axis_a = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_axis_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_motor_force = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_max_motor_force(&_has_bits_);
          max_motor_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float length = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _Internal::set_has_length(&_has_bits_);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float frequency = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 253)) {
          _Internal::set_has_frequency(&_has_bits_);
          frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float damping_ratio = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 5)) {
          _Internal::set_has_damping_ratio(&_has_bits_);
          damping_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbVec2 ground_anchor_a = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_anchor_a(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbVec2 ground_anchor_b = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ground_anchor_b(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float length_a = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_length_a(&_has_bits_);
          length_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float length_b = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_length_b(&_has_bits_);
          length_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ratio = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_ratio(&_has_bits_);
          ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_length_a = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_max_length_a(&_has_bits_);
          max_length_a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_length_b = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_max_length_b(&_has_bits_);
          max_length_b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbVec2 target = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float max_force = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_max_force(&_has_bits_);
          max_force_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 joint1 = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_joint1(&_has_bits_);
          joint1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 joint2 = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_joint2(&_has_bits_);
          joint2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float spring_frequency = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_spring_frequency(&_has_bits_);
          spring_frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float spring_damping_ratio = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_spring_damping_ratio(&_has_bits_);
          spring_damping_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_torque = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_max_torque(&_has_bits_);
          max_torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float max_length = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_max_length(&_has_bits_);
          max_length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 bodies = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_bodies(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<880>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bodies(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 joints = 111;
      case 111:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_joints(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<888>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_joints(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float target_volume = 112;
      case 112:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_target_volume(&_has_bits_);
          target_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbJoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbJoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_tag(), target);
  }

  cached_has_bits = _has_bits_[1];
  // required .box2d.PbJointType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 body_a = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_body_a(), target);
  }

  // optional int32 body_b = 4;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_body_b(), target);
  }

  // optional bool collideConnected = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_collideconnected(), target);
  }

  // optional .box2d.PbVec2 local_anchor_a = 6;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::local_anchor_a(this), target, stream);
  }

  // optional .box2d.PbVec2 local_anchor_b = 7;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::local_anchor_b(this), target, stream);
  }

  // optional float ref_angle = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_ref_angle(), target);
  }

  // optional bool enable_limit = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_enable_limit(), target);
  }

  // optional float lower_limit = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_lower_limit(), target);
  }

  // optional float upper_limit = 14;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_upper_limit(), target);
  }

  // optional bool enable_motor = 15;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_enable_motor(), target);
  }

  // optional float motor_speed = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_motor_speed(), target);
  }

  // optional float max_motor_torque = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_max_motor_torque(), target);
  }

  // optional .box2d.PbVec2 local_axis_a = 20;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::local_axis_a(this), target, stream);
  }

  // optional float max_motor_force = 21;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_max_motor_force(), target);
  }

  // optional float length = 30;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(30, this->_internal_length(), target);
  }

  // optional float frequency = 31;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(31, this->_internal_frequency(), target);
  }

  // optional float damping_ratio = 32;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(32, this->_internal_damping_ratio(), target);
  }

  // optional .box2d.PbVec2 ground_anchor_a = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::ground_anchor_a(this), target, stream);
  }

  // optional .box2d.PbVec2 ground_anchor_b = 41;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::ground_anchor_b(this), target, stream);
  }

  // optional float length_a = 42;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(42, this->_internal_length_a(), target);
  }

  // optional float length_b = 43;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(43, this->_internal_length_b(), target);
  }

  // optional float ratio = 44;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(44, this->_internal_ratio(), target);
  }

  // optional float max_length_a = 45;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(45, this->_internal_max_length_a(), target);
  }

  // optional float max_length_b = 46;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(46, this->_internal_max_length_b(), target);
  }

  // optional .box2d.PbVec2 target = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        50, _Internal::target(this), target, stream);
  }

  // optional float max_force = 51;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(51, this->_internal_max_force(), target);
  }

  // optional int32 joint1 = 61;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(61, this->_internal_joint1(), target);
  }

  // optional int32 joint2 = 62;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(62, this->_internal_joint2(), target);
  }

  // optional float spring_frequency = 70;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(70, this->_internal_spring_frequency(), target);
  }

  // optional float spring_damping_ratio = 71;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(71, this->_internal_spring_damping_ratio(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional float max_torque = 90;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(90, this->_internal_max_torque(), target);
  }

  // optional float max_length = 100;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(100, this->_internal_max_length(), target);
  }

  // repeated int32 bodies = 110;
  for (int i = 0, n = this->_internal_bodies_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(110, this->_internal_bodies(i), target);
  }

  // repeated int32 joints = 111;
  for (int i = 0, n = this->_internal_joints_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(111, this->_internal_joints(i), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float target_volume = 112;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(112, this->_internal_target_volume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbJoint)
  return target;
}

size_t PbJoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbJoint)
  size_t total_size = 0;

  // required .box2d.PbJointType type = 2;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bodies = 110;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bodies_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bodies_size());
    total_size += data_size;
  }

  // repeated int32 joints = 111;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->joints_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_joints_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .box2d.PbVec2 local_anchor_a = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *local_anchor_a_);
    }

    // optional .box2d.PbVec2 local_anchor_b = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *local_anchor_b_);
    }

    // optional .box2d.PbVec2 local_axis_a = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *local_axis_a_);
    }

    // optional .box2d.PbVec2 ground_anchor_a = 40;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ground_anchor_a_);
    }

    // optional .box2d.PbVec2 ground_anchor_b = 41;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ground_anchor_b_);
    }

    // optional .box2d.PbVec2 target = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_);
    }

    // optional int64 tag = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_tag());
    }

    // optional int32 body_a = 3;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_body_a());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 body_b = 4;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_body_b());
    }

    // optional float ref_angle = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional bool collideConnected = 5;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool enable_limit = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool enable_motor = 15;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional float lower_limit = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float upper_limit = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float motor_speed = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float max_motor_torque = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float max_motor_force = 21;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float length = 30;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float frequency = 31;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float damping_ratio = 32;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float target_volume = 112;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional float length_a = 42;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional float length_b = 43;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional float ratio = 44;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 + 4;
    }

    // optional float max_length_a = 45;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 4;
    }

    // optional float max_length_b = 46;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 + 4;
    }

    // optional float max_force = 51;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 4;
    }

    // optional int32 joint1 = 61;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_joint1());
    }

    // optional int32 joint2 = 62;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_joint2());
    }

    // optional float spring_frequency = 70;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 + 4;
    }

    // optional float spring_damping_ratio = 71;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 + 4;
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x00000003u) {
    // optional float max_torque = 90;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 4;
    }

    // optional float max_length = 100;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbJoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbJoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PbJoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PbJoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbJoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbJoint)
    MergeFrom(*source);
  }
}

void PbJoint::MergeFrom(const PbJoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbJoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bodies_.MergeFrom(from.bodies_);
  joints_.MergeFrom(from.joints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_local_anchor_a()->::box2d::PbVec2::MergeFrom(from._internal_local_anchor_a());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_local_anchor_b()->::box2d::PbVec2::MergeFrom(from._internal_local_anchor_b());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_local_axis_a()->::box2d::PbVec2::MergeFrom(from._internal_local_axis_a());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_ground_anchor_a()->::box2d::PbVec2::MergeFrom(from._internal_ground_anchor_a());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_ground_anchor_b()->::box2d::PbVec2::MergeFrom(from._internal_ground_anchor_b());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_target()->::box2d::PbVec2::MergeFrom(from._internal_target());
    }
    if (cached_has_bits & 0x00000040u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000080u) {
      body_a_ = from.body_a_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      body_b_ = from.body_b_;
    }
    if (cached_has_bits & 0x00000200u) {
      ref_angle_ = from.ref_angle_;
    }
    if (cached_has_bits & 0x00000400u) {
      collideconnected_ = from.collideconnected_;
    }
    if (cached_has_bits & 0x00000800u) {
      enable_limit_ = from.enable_limit_;
    }
    if (cached_has_bits & 0x00001000u) {
      enable_motor_ = from.enable_motor_;
    }
    if (cached_has_bits & 0x00002000u) {
      lower_limit_ = from.lower_limit_;
    }
    if (cached_has_bits & 0x00004000u) {
      upper_limit_ = from.upper_limit_;
    }
    if (cached_has_bits & 0x00008000u) {
      motor_speed_ = from.motor_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      max_motor_torque_ = from.max_motor_torque_;
    }
    if (cached_has_bits & 0x00020000u) {
      max_motor_force_ = from.max_motor_force_;
    }
    if (cached_has_bits & 0x00040000u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00080000u) {
      frequency_ = from.frequency_;
    }
    if (cached_has_bits & 0x00100000u) {
      damping_ratio_ = from.damping_ratio_;
    }
    if (cached_has_bits & 0x00200000u) {
      target_volume_ = from.target_volume_;
    }
    if (cached_has_bits & 0x00400000u) {
      length_a_ = from.length_a_;
    }
    if (cached_has_bits & 0x00800000u) {
      length_b_ = from.length_b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ratio_ = from.ratio_;
    }
    if (cached_has_bits & 0x02000000u) {
      max_length_a_ = from.max_length_a_;
    }
    if (cached_has_bits & 0x04000000u) {
      max_length_b_ = from.max_length_b_;
    }
    if (cached_has_bits & 0x08000000u) {
      max_force_ = from.max_force_;
    }
    if (cached_has_bits & 0x10000000u) {
      joint1_ = from.joint1_;
    }
    if (cached_has_bits & 0x20000000u) {
      joint2_ = from.joint2_;
    }
    if (cached_has_bits & 0x40000000u) {
      spring_frequency_ = from.spring_frequency_;
    }
    if (cached_has_bits & 0x80000000u) {
      spring_damping_ratio_ = from.spring_damping_ratio_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      max_torque_ = from.max_torque_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_length_ = from.max_length_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void PbJoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbJoint::CopyFrom(const PbJoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbJoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbJoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_local_anchor_a()) {
    if (!local_anchor_a_->IsInitialized()) return false;
  }
  if (_internal_has_local_anchor_b()) {
    if (!local_anchor_b_->IsInitialized()) return false;
  }
  if (_internal_has_local_axis_a()) {
    if (!local_axis_a_->IsInitialized()) return false;
  }
  if (_internal_has_ground_anchor_a()) {
    if (!ground_anchor_a_->IsInitialized()) return false;
  }
  if (_internal_has_ground_anchor_b()) {
    if (!ground_anchor_b_->IsInitialized()) return false;
  }
  if (_internal_has_target()) {
    if (!target_->IsInitialized()) return false;
  }
  return true;
}

void PbJoint::InternalSwap(PbJoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  bodies_.InternalSwap(&other->bodies_);
  joints_.InternalSwap(&other->joints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PbJoint, max_length_)
      + sizeof(PbJoint::max_length_)
      - PROTOBUF_FIELD_OFFSET(PbJoint, local_anchor_a_)>(
          reinterpret_cast<char*>(&local_anchor_a_),
          reinterpret_cast<char*>(&other->local_anchor_a_));
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PbJoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PbBody::InitAsDefaultInstance() {
  ::box2d::_PbBody_default_instance_._instance.get_mutable()->position_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbBody_default_instance_._instance.get_mutable()->linear_velocity_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
  ::box2d::_PbBody_default_instance_._instance.get_mutable()->force_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
}
class PbBody::_Internal {
 public:
  using HasBits = decltype(std::declval<PbBody>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::box2d::PbVec2& position(const PbBody* msg);
  static void set_has_position(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::box2d::PbVec2& linear_velocity(const PbBody* msg);
  static void set_has_linear_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_angular_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::box2d::PbVec2& force(const PbBody* msg);
  static void set_has_force(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_torque(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_mass(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_i(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_linear_damping(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_angular_damping(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_gravity_scale(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_bullet(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_allow_sleep(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_awake(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_active(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_fixed_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_uuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000020) ^ 0x00000020) != 0;
  }
};

const ::box2d::PbVec2&
PbBody::_Internal::position(const PbBody* msg) {
  return *msg->position_;
}
const ::box2d::PbVec2&
PbBody::_Internal::linear_velocity(const PbBody* msg) {
  return *msg->linear_velocity_;
}
const ::box2d::PbVec2&
PbBody::_Internal::force(const PbBody* msg) {
  return *msg->force_;
}
PbBody::PbBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fixtures_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:box2d.PbBody)
}
PbBody::PbBody(const PbBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fixtures_(from.fixtures_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_uuid()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  if (from._internal_has_position()) {
    position_ = new ::box2d::PbVec2(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_linear_velocity()) {
    linear_velocity_ = new ::box2d::PbVec2(*from.linear_velocity_);
  } else {
    linear_velocity_ = nullptr;
  }
  if (from._internal_has_force()) {
    force_ = new ::box2d::PbVec2(*from.force_);
  } else {
    force_ = nullptr;
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(active_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbBody)
}

void PbBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PbBody_box2d_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&active_) -
      reinterpret_cast<char*>(&position_)) + sizeof(active_));
}

PbBody::~PbBody() {
  // @@protoc_insertion_point(destructor:box2d.PbBody)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PbBody::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete linear_velocity_;
  if (this != internal_default_instance()) delete force_;
}

void PbBody::ArenaDtor(void* object) {
  PbBody* _this = reinterpret_cast< PbBody* >(object);
  (void)_this;
}
void PbBody::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbBody& PbBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PbBody_box2d_2eproto.base);
  return *internal_default_instance();
}


void PbBody::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fixtures_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      uuid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(position_ != nullptr);
      position_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(linear_velocity_ != nullptr);
      linear_velocity_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(force_ != nullptr);
      force_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_velocity_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(angular_velocity_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&torque_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&bullet_) -
        reinterpret_cast<char*>(&torque_)) + sizeof(bullet_));
  }
  if (cached_has_bits & 0x00070000u) {
    ::memset(&allow_sleep_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&active_) -
        reinterpret_cast<char*>(&allow_sleep_)) + sizeof(active_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tag(&has_bits);
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .box2d.PbBodyType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::box2d::PbBodyType_IsValid(val))) {
            _internal_set_type(static_cast<::box2d::PbBodyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbVec2 position = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float angle = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbVec2 linear_velocity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float angular_velocity = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_angular_velocity(&has_bits);
          angular_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbVec2 force = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_force(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float torque = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_torque(&has_bits);
          torque_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float mass = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_mass(&has_bits);
          mass_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float I = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_i(&has_bits);
          i_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float linear_damping = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_linear_damping(&has_bits);
          linear_damping_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float angular_damping = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_angular_damping(&has_bits);
          angular_damping_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float gravity_scale = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_gravity_scale(&has_bits);
          gravity_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional bool bullet = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_bullet(&has_bits);
          bullet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_sleep = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_allow_sleep(&has_bits);
          allow_sleep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool awake = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_awake(&has_bits);
          awake_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool active = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_active(&has_bits);
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool fixed_rotation = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_fixed_rotation(&has_bits);
          fixed_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string UUID = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "box2d.PbBody.UUID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .box2d.PbFixture fixtures = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fixtures(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<802>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_tag(), target);
  }

  // required .box2d.PbBodyType type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // optional .box2d.PbVec2 position = 10;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::position(this), target, stream);
  }

  // optional float angle = 11;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_angle(), target);
  }

  // optional .box2d.PbVec2 linear_velocity = 12;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::linear_velocity(this), target, stream);
  }

  // optional float angular_velocity = 13;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_angular_velocity(), target);
  }

  // optional .box2d.PbVec2 force = 14;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::force(this), target, stream);
  }

  // optional float torque = 15;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_torque(), target);
  }

  // optional float mass = 16;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_mass(), target);
  }

  // optional float I = 17;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_i(), target);
  }

  // optional float linear_damping = 50;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(50, this->_internal_linear_damping(), target);
  }

  // optional float angular_damping = 51;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(51, this->_internal_angular_damping(), target);
  }

  // optional float gravity_scale = 52;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(52, this->_internal_gravity_scale(), target);
  }

  // optional bool bullet = 53;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(53, this->_internal_bullet(), target);
  }

  // optional bool allow_sleep = 54;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(54, this->_internal_allow_sleep(), target);
  }

  // optional bool awake = 55;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(55, this->_internal_awake(), target);
  }

  // optional bool active = 56;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(56, this->_internal_active(), target);
  }

  // optional bool fixed_rotation = 57;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(57, this->_internal_fixed_rotation(), target);
  }

  // optional string UUID = 60;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "box2d.PbBody.UUID");
    target = stream->WriteStringMaybeAliased(
        60, this->_internal_uuid(), target);
  }

  // repeated .box2d.PbFixture fixtures = 100;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fixtures_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, this->_internal_fixtures(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbBody)
  return target;
}

size_t PbBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbBody)
  size_t total_size = 0;

  // required .box2d.PbBodyType type = 2;
  if (_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .box2d.PbFixture fixtures = 100;
  total_size += 2UL * this->_internal_fixtures_size();
  for (const auto& msg : this->fixtures_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string UUID = 60;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_uuid());
    }

    // optional .box2d.PbVec2 position = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional .box2d.PbVec2 linear_velocity = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *linear_velocity_);
    }

    // optional .box2d.PbVec2 force = 14;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *force_);
    }

    // optional int64 tag = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_tag());
    }

  }
  if (cached_has_bits & 0x000000c0u) {
    // optional float angle = 11;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float angular_velocity = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float torque = 15;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float mass = 16;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 4;
    }

    // optional float I = 17;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 + 4;
    }

    // optional bool fixed_rotation = 57;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional float linear_damping = 50;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 4;
    }

    // optional float angular_damping = 51;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 + 4;
    }

    // optional float gravity_scale = 52;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 4;
    }

    // optional bool bullet = 53;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x00070000u) {
    // optional bool allow_sleep = 54;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 1;
    }

    // optional bool awake = 55;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 1;
    }

    // optional bool active = 56;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbBody)
  GOOGLE_DCHECK_NE(&from, this);
  const PbBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PbBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbBody)
    MergeFrom(*source);
  }
}

void PbBody::MergeFrom(const PbBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fixtures_.MergeFrom(from.fixtures_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_uuid(from._internal_uuid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_position()->::box2d::PbVec2::MergeFrom(from._internal_position());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_linear_velocity()->::box2d::PbVec2::MergeFrom(from._internal_linear_velocity());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_force()->::box2d::PbVec2::MergeFrom(from._internal_force());
    }
    if (cached_has_bits & 0x00000010u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00000080u) {
      angular_velocity_ = from.angular_velocity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      torque_ = from.torque_;
    }
    if (cached_has_bits & 0x00000200u) {
      mass_ = from.mass_;
    }
    if (cached_has_bits & 0x00000400u) {
      i_ = from.i_;
    }
    if (cached_has_bits & 0x00000800u) {
      fixed_rotation_ = from.fixed_rotation_;
    }
    if (cached_has_bits & 0x00001000u) {
      linear_damping_ = from.linear_damping_;
    }
    if (cached_has_bits & 0x00002000u) {
      angular_damping_ = from.angular_damping_;
    }
    if (cached_has_bits & 0x00004000u) {
      gravity_scale_ = from.gravity_scale_;
    }
    if (cached_has_bits & 0x00008000u) {
      bullet_ = from.bullet_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      allow_sleep_ = from.allow_sleep_;
    }
    if (cached_has_bits & 0x00020000u) {
      awake_ = from.awake_;
    }
    if (cached_has_bits & 0x00040000u) {
      active_ = from.active_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbBody::CopyFrom(const PbBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbBody::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fixtures_)) return false;
  if (_internal_has_position()) {
    if (!position_->IsInitialized()) return false;
  }
  if (_internal_has_linear_velocity()) {
    if (!linear_velocity_->IsInitialized()) return false;
  }
  if (_internal_has_force()) {
    if (!force_->IsInitialized()) return false;
  }
  return true;
}

void PbBody::InternalSwap(PbBody* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fixtures_.InternalSwap(&other->fixtures_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PbBody, active_)
      + sizeof(PbBody::active_)
      - PROTOBUF_FIELD_OFFSET(PbBody, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PbBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PbWorld::InitAsDefaultInstance() {
  ::box2d::_PbWorld_default_instance_._instance.get_mutable()->gravity_ = const_cast< ::box2d::PbVec2*>(
      ::box2d::PbVec2::internal_default_instance());
}
class PbWorld::_Internal {
 public:
  using HasBits = decltype(std::declval<PbWorld>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::box2d::PbVec2& gravity(const PbWorld* msg);
  static void set_has_gravity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_allow_sleep(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_auto_clear_forces(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_warm_starting(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_continuous_physics(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sub_stepping(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::box2d::PbVec2&
PbWorld::_Internal::gravity(const PbWorld* msg) {
  return *msg->gravity_;
}
PbWorld::PbWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bodies_(arena),
  joints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:box2d.PbWorld)
}
PbWorld::PbWorld(const PbWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bodies_(from.bodies_),
      joints_(from.joints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_gravity()) {
    gravity_ = new ::box2d::PbVec2(*from.gravity_);
  } else {
    gravity_ = nullptr;
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&sub_stepping_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(sub_stepping_));
  // @@protoc_insertion_point(copy_constructor:box2d.PbWorld)
}

void PbWorld::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PbWorld_box2d_2eproto.base);
  ::memset(&gravity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sub_stepping_) -
      reinterpret_cast<char*>(&gravity_)) + sizeof(sub_stepping_));
}

PbWorld::~PbWorld() {
  // @@protoc_insertion_point(destructor:box2d.PbWorld)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PbWorld::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete gravity_;
}

void PbWorld::ArenaDtor(void* object) {
  PbWorld* _this = reinterpret_cast< PbWorld* >(object);
  (void)_this;
}
void PbWorld::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PbWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PbWorld& PbWorld::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PbWorld_box2d_2eproto.base);
  return *internal_default_instance();
}


void PbWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:box2d.PbWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bodies_.Clear();
  joints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(gravity_ != nullptr);
    gravity_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&tag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sub_stepping_) -
        reinterpret_cast<char*>(&tag_)) + sizeof(sub_stepping_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PbWorld::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int64 tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tag(&has_bits);
          tag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .box2d.PbVec2 gravity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gravity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool allow_sleep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_allow_sleep(&has_bits);
          allow_sleep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool auto_clear_forces = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_auto_clear_forces(&has_bits);
          auto_clear_forces_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool warm_starting = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_warm_starting(&has_bits);
          warm_starting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool continuous_physics = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_continuous_physics(&has_bits);
          continuous_physics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool sub_stepping = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sub_stepping(&has_bits);
          sub_stepping_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .box2d.PbBody bodies = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bodies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .box2d.PbJoint joints = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_joints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PbWorld::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:box2d.PbWorld)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 tag = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_tag(), target);
  }

  // optional .box2d.PbVec2 gravity = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gravity(this), target, stream);
  }

  // optional bool allow_sleep = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_allow_sleep(), target);
  }

  // optional bool auto_clear_forces = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_auto_clear_forces(), target);
  }

  // optional bool warm_starting = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_warm_starting(), target);
  }

  // optional bool continuous_physics = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_continuous_physics(), target);
  }

  // optional bool sub_stepping = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_sub_stepping(), target);
  }

  // repeated .box2d.PbBody bodies = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bodies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_bodies(i), target, stream);
  }

  // repeated .box2d.PbJoint joints = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_joints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_joints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:box2d.PbWorld)
  return target;
}

size_t PbWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:box2d.PbWorld)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .box2d.PbBody bodies = 20;
  total_size += 2UL * this->_internal_bodies_size();
  for (const auto& msg : this->bodies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .box2d.PbJoint joints = 21;
  total_size += 2UL * this->_internal_joints_size();
  for (const auto& msg : this->joints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .box2d.PbVec2 gravity = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gravity_);
    }

    // optional int64 tag = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_tag());
    }

    // optional bool allow_sleep = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool auto_clear_forces = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool warm_starting = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool continuous_physics = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool sub_stepping = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbWorld::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:box2d.PbWorld)
  GOOGLE_DCHECK_NE(&from, this);
  const PbWorld* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PbWorld>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:box2d.PbWorld)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:box2d.PbWorld)
    MergeFrom(*source);
  }
}

void PbWorld::MergeFrom(const PbWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:box2d.PbWorld)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bodies_.MergeFrom(from.bodies_);
  joints_.MergeFrom(from.joints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_gravity()->::box2d::PbVec2::MergeFrom(from._internal_gravity());
    }
    if (cached_has_bits & 0x00000002u) {
      tag_ = from.tag_;
    }
    if (cached_has_bits & 0x00000004u) {
      allow_sleep_ = from.allow_sleep_;
    }
    if (cached_has_bits & 0x00000008u) {
      auto_clear_forces_ = from.auto_clear_forces_;
    }
    if (cached_has_bits & 0x00000010u) {
      warm_starting_ = from.warm_starting_;
    }
    if (cached_has_bits & 0x00000020u) {
      continuous_physics_ = from.continuous_physics_;
    }
    if (cached_has_bits & 0x00000040u) {
      sub_stepping_ = from.sub_stepping_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PbWorld::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:box2d.PbWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbWorld::CopyFrom(const PbWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:box2d.PbWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbWorld::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(bodies_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(joints_)) return false;
  if (_internal_has_gravity()) {
    if (!gravity_->IsInitialized()) return false;
  }
  return true;
}

void PbWorld::InternalSwap(PbWorld* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bodies_.InternalSwap(&other->bodies_);
  joints_.InternalSwap(&other->joints_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PbWorld, sub_stepping_)
      + sizeof(PbWorld::sub_stepping_)
      - PROTOBUF_FIELD_OFFSET(PbWorld, gravity_)>(
          reinterpret_cast<char*>(&gravity_),
          reinterpret_cast<char*>(&other->gravity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PbWorld::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace box2d
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::box2d::PbVec2* Arena::CreateMaybeMessage< ::box2d::PbVec2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::box2d::PbVec2 >(arena);
}
template<> PROTOBUF_NOINLINE ::box2d::PbFilter* Arena::CreateMaybeMessage< ::box2d::PbFilter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::box2d::PbFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::box2d::PbShape* Arena::CreateMaybeMessage< ::box2d::PbShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::box2d::PbShape >(arena);
}
template<> PROTOBUF_NOINLINE ::box2d::PbFixture* Arena::CreateMaybeMessage< ::box2d::PbFixture >(Arena* arena) {
  return Arena::CreateMessageInternal< ::box2d::PbFixture >(arena);
}
template<> PROTOBUF_NOINLINE ::box2d::PbJoint* Arena::CreateMaybeMessage< ::box2d::PbJoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::box2d::PbJoint >(arena);
}
template<> PROTOBUF_NOINLINE ::box2d::PbBody* Arena::CreateMaybeMessage< ::box2d::PbBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::box2d::PbBody >(arena);
}
template<> PROTOBUF_NOINLINE ::box2d::PbWorld* Arena::CreateMaybeMessage< ::box2d::PbWorld >(Arena* arena) {
  return Arena::CreateMessageInternal< ::box2d::PbWorld >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
