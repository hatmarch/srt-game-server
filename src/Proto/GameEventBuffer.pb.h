// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameEventBuffer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_GameEventBuffer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_GameEventBuffer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "EntityGameEventBuffer.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameEventBuffer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_GameEventBuffer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_GameEventBuffer_2eproto;
namespace redhatgamedev {
namespace srt {
class GameEventBuffer;
class GameEventBufferDefaultTypeInternal;
extern GameEventBufferDefaultTypeInternal _GameEventBuffer_default_instance_;
class JoinSecurityGameEventBuffer;
class JoinSecurityGameEventBufferDefaultTypeInternal;
extern JoinSecurityGameEventBufferDefaultTypeInternal _JoinSecurityGameEventBuffer_default_instance_;
class LeaveSecurityGameEventBuffer;
class LeaveSecurityGameEventBufferDefaultTypeInternal;
extern LeaveSecurityGameEventBufferDefaultTypeInternal _LeaveSecurityGameEventBuffer_default_instance_;
class SecurityGameEventBuffer;
class SecurityGameEventBufferDefaultTypeInternal;
extern SecurityGameEventBufferDefaultTypeInternal _SecurityGameEventBuffer_default_instance_;
}  // namespace srt
}  // namespace redhatgamedev
PROTOBUF_NAMESPACE_OPEN
template<> ::redhatgamedev::srt::GameEventBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::GameEventBuffer>(Arena*);
template<> ::redhatgamedev::srt::JoinSecurityGameEventBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::JoinSecurityGameEventBuffer>(Arena*);
template<> ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::LeaveSecurityGameEventBuffer>(Arena*);
template<> ::redhatgamedev::srt::SecurityGameEventBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::SecurityGameEventBuffer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace redhatgamedev {
namespace srt {

enum SecurityGameEventBuffer_SecurityGameEventBufferType : int {
  SecurityGameEventBuffer_SecurityGameEventBufferType_UNKNOWN = 0,
  SecurityGameEventBuffer_SecurityGameEventBufferType_JOIN = 1,
  SecurityGameEventBuffer_SecurityGameEventBufferType_LEAVE = 2
};
bool SecurityGameEventBuffer_SecurityGameEventBufferType_IsValid(int value);
constexpr SecurityGameEventBuffer_SecurityGameEventBufferType SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_MIN = SecurityGameEventBuffer_SecurityGameEventBufferType_UNKNOWN;
constexpr SecurityGameEventBuffer_SecurityGameEventBufferType SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_MAX = SecurityGameEventBuffer_SecurityGameEventBufferType_LEAVE;
constexpr int SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_ARRAYSIZE = SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityGameEventBuffer_SecurityGameEventBufferType_descriptor();
template<typename T>
inline const std::string& SecurityGameEventBuffer_SecurityGameEventBufferType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityGameEventBuffer_SecurityGameEventBufferType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityGameEventBuffer_SecurityGameEventBufferType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecurityGameEventBuffer_SecurityGameEventBufferType_descriptor(), enum_t_value);
}
inline bool SecurityGameEventBuffer_SecurityGameEventBufferType_Parse(
    const std::string& name, SecurityGameEventBuffer_SecurityGameEventBufferType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecurityGameEventBuffer_SecurityGameEventBufferType>(
    SecurityGameEventBuffer_SecurityGameEventBufferType_descriptor(), name, value);
}
enum GameEventBuffer_GameEventBufferType : int {
  GameEventBuffer_GameEventBufferType_UNKNOWN = 0,
  GameEventBuffer_GameEventBufferType_ENTITY = 1,
  GameEventBuffer_GameEventBufferType_SECURITY = 2
};
bool GameEventBuffer_GameEventBufferType_IsValid(int value);
constexpr GameEventBuffer_GameEventBufferType GameEventBuffer_GameEventBufferType_GameEventBufferType_MIN = GameEventBuffer_GameEventBufferType_UNKNOWN;
constexpr GameEventBuffer_GameEventBufferType GameEventBuffer_GameEventBufferType_GameEventBufferType_MAX = GameEventBuffer_GameEventBufferType_SECURITY;
constexpr int GameEventBuffer_GameEventBufferType_GameEventBufferType_ARRAYSIZE = GameEventBuffer_GameEventBufferType_GameEventBufferType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameEventBuffer_GameEventBufferType_descriptor();
template<typename T>
inline const std::string& GameEventBuffer_GameEventBufferType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameEventBuffer_GameEventBufferType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameEventBuffer_GameEventBufferType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameEventBuffer_GameEventBufferType_descriptor(), enum_t_value);
}
inline bool GameEventBuffer_GameEventBufferType_Parse(
    const std::string& name, GameEventBuffer_GameEventBufferType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameEventBuffer_GameEventBufferType>(
    GameEventBuffer_GameEventBufferType_descriptor(), name, value);
}
// ===================================================================

class JoinSecurityGameEventBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.JoinSecurityGameEventBuffer) */ {
 public:
  inline JoinSecurityGameEventBuffer() : JoinSecurityGameEventBuffer(nullptr) {};
  virtual ~JoinSecurityGameEventBuffer();

  JoinSecurityGameEventBuffer(const JoinSecurityGameEventBuffer& from);
  JoinSecurityGameEventBuffer(JoinSecurityGameEventBuffer&& from) noexcept
    : JoinSecurityGameEventBuffer() {
    *this = ::std::move(from);
  }

  inline JoinSecurityGameEventBuffer& operator=(const JoinSecurityGameEventBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinSecurityGameEventBuffer& operator=(JoinSecurityGameEventBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinSecurityGameEventBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinSecurityGameEventBuffer* internal_default_instance() {
    return reinterpret_cast<const JoinSecurityGameEventBuffer*>(
               &_JoinSecurityGameEventBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JoinSecurityGameEventBuffer& a, JoinSecurityGameEventBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinSecurityGameEventBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinSecurityGameEventBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinSecurityGameEventBuffer* New() const final {
    return CreateMaybeMessage<JoinSecurityGameEventBuffer>(nullptr);
  }

  JoinSecurityGameEventBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinSecurityGameEventBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinSecurityGameEventBuffer& from);
  void MergeFrom(const JoinSecurityGameEventBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinSecurityGameEventBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redhatgamedev.srt.JoinSecurityGameEventBuffer";
  }
  protected:
  explicit JoinSecurityGameEventBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameEventBuffer_2eproto);
    return ::descriptor_table_GameEventBuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUUIDFieldNumber = 1,
  };
  // required string UUID = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.JoinSecurityGameEventBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  friend struct ::TableStruct_GameEventBuffer_2eproto;
};
// -------------------------------------------------------------------

class LeaveSecurityGameEventBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.LeaveSecurityGameEventBuffer) */ {
 public:
  inline LeaveSecurityGameEventBuffer() : LeaveSecurityGameEventBuffer(nullptr) {};
  virtual ~LeaveSecurityGameEventBuffer();

  LeaveSecurityGameEventBuffer(const LeaveSecurityGameEventBuffer& from);
  LeaveSecurityGameEventBuffer(LeaveSecurityGameEventBuffer&& from) noexcept
    : LeaveSecurityGameEventBuffer() {
    *this = ::std::move(from);
  }

  inline LeaveSecurityGameEventBuffer& operator=(const LeaveSecurityGameEventBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveSecurityGameEventBuffer& operator=(LeaveSecurityGameEventBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveSecurityGameEventBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveSecurityGameEventBuffer* internal_default_instance() {
    return reinterpret_cast<const LeaveSecurityGameEventBuffer*>(
               &_LeaveSecurityGameEventBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LeaveSecurityGameEventBuffer& a, LeaveSecurityGameEventBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveSecurityGameEventBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveSecurityGameEventBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveSecurityGameEventBuffer* New() const final {
    return CreateMaybeMessage<LeaveSecurityGameEventBuffer>(nullptr);
  }

  LeaveSecurityGameEventBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveSecurityGameEventBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveSecurityGameEventBuffer& from);
  void MergeFrom(const LeaveSecurityGameEventBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveSecurityGameEventBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redhatgamedev.srt.LeaveSecurityGameEventBuffer";
  }
  protected:
  explicit LeaveSecurityGameEventBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameEventBuffer_2eproto);
    return ::descriptor_table_GameEventBuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUUIDFieldNumber = 1,
  };
  // required string UUID = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.LeaveSecurityGameEventBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  friend struct ::TableStruct_GameEventBuffer_2eproto;
};
// -------------------------------------------------------------------

class SecurityGameEventBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.SecurityGameEventBuffer) */ {
 public:
  inline SecurityGameEventBuffer() : SecurityGameEventBuffer(nullptr) {};
  virtual ~SecurityGameEventBuffer();

  SecurityGameEventBuffer(const SecurityGameEventBuffer& from);
  SecurityGameEventBuffer(SecurityGameEventBuffer&& from) noexcept
    : SecurityGameEventBuffer() {
    *this = ::std::move(from);
  }

  inline SecurityGameEventBuffer& operator=(const SecurityGameEventBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityGameEventBuffer& operator=(SecurityGameEventBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityGameEventBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityGameEventBuffer* internal_default_instance() {
    return reinterpret_cast<const SecurityGameEventBuffer*>(
               &_SecurityGameEventBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SecurityGameEventBuffer& a, SecurityGameEventBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityGameEventBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityGameEventBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityGameEventBuffer* New() const final {
    return CreateMaybeMessage<SecurityGameEventBuffer>(nullptr);
  }

  SecurityGameEventBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityGameEventBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityGameEventBuffer& from);
  void MergeFrom(const SecurityGameEventBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityGameEventBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redhatgamedev.srt.SecurityGameEventBuffer";
  }
  protected:
  explicit SecurityGameEventBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameEventBuffer_2eproto);
    return ::descriptor_table_GameEventBuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SecurityGameEventBuffer_SecurityGameEventBufferType SecurityGameEventBufferType;
  static constexpr SecurityGameEventBufferType UNKNOWN =
    SecurityGameEventBuffer_SecurityGameEventBufferType_UNKNOWN;
  static constexpr SecurityGameEventBufferType JOIN =
    SecurityGameEventBuffer_SecurityGameEventBufferType_JOIN;
  static constexpr SecurityGameEventBufferType LEAVE =
    SecurityGameEventBuffer_SecurityGameEventBufferType_LEAVE;
  static inline bool SecurityGameEventBufferType_IsValid(int value) {
    return SecurityGameEventBuffer_SecurityGameEventBufferType_IsValid(value);
  }
  static constexpr SecurityGameEventBufferType SecurityGameEventBufferType_MIN =
    SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_MIN;
  static constexpr SecurityGameEventBufferType SecurityGameEventBufferType_MAX =
    SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_MAX;
  static constexpr int SecurityGameEventBufferType_ARRAYSIZE =
    SecurityGameEventBuffer_SecurityGameEventBufferType_SecurityGameEventBufferType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SecurityGameEventBufferType_descriptor() {
    return SecurityGameEventBuffer_SecurityGameEventBufferType_descriptor();
  }
  template<typename T>
  static inline const std::string& SecurityGameEventBufferType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SecurityGameEventBufferType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SecurityGameEventBufferType_Name.");
    return SecurityGameEventBuffer_SecurityGameEventBufferType_Name(enum_t_value);
  }
  static inline bool SecurityGameEventBufferType_Parse(const std::string& name,
      SecurityGameEventBufferType* value) {
    return SecurityGameEventBuffer_SecurityGameEventBufferType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kJoinSecurityGameEventBufferFieldNumber = 3,
    kLeaveSecurityGameEventBufferFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // optional .redhatgamedev.srt.JoinSecurityGameEventBuffer joinSecurityGameEventBuffer = 3;
  bool has_joinsecuritygameeventbuffer() const;
  private:
  bool _internal_has_joinsecuritygameeventbuffer() const;
  public:
  void clear_joinsecuritygameeventbuffer();
  const ::redhatgamedev::srt::JoinSecurityGameEventBuffer& joinsecuritygameeventbuffer() const;
  ::redhatgamedev::srt::JoinSecurityGameEventBuffer* release_joinsecuritygameeventbuffer();
  ::redhatgamedev::srt::JoinSecurityGameEventBuffer* mutable_joinsecuritygameeventbuffer();
  void set_allocated_joinsecuritygameeventbuffer(::redhatgamedev::srt::JoinSecurityGameEventBuffer* joinsecuritygameeventbuffer);
  private:
  const ::redhatgamedev::srt::JoinSecurityGameEventBuffer& _internal_joinsecuritygameeventbuffer() const;
  ::redhatgamedev::srt::JoinSecurityGameEventBuffer* _internal_mutable_joinsecuritygameeventbuffer();
  public:
  void unsafe_arena_set_allocated_joinsecuritygameeventbuffer(
      ::redhatgamedev::srt::JoinSecurityGameEventBuffer* joinsecuritygameeventbuffer);
  ::redhatgamedev::srt::JoinSecurityGameEventBuffer* unsafe_arena_release_joinsecuritygameeventbuffer();

  // optional .redhatgamedev.srt.LeaveSecurityGameEventBuffer leaveSecurityGameEventBuffer = 4;
  bool has_leavesecuritygameeventbuffer() const;
  private:
  bool _internal_has_leavesecuritygameeventbuffer() const;
  public:
  void clear_leavesecuritygameeventbuffer();
  const ::redhatgamedev::srt::LeaveSecurityGameEventBuffer& leavesecuritygameeventbuffer() const;
  ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* release_leavesecuritygameeventbuffer();
  ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* mutable_leavesecuritygameeventbuffer();
  void set_allocated_leavesecuritygameeventbuffer(::redhatgamedev::srt::LeaveSecurityGameEventBuffer* leavesecuritygameeventbuffer);
  private:
  const ::redhatgamedev::srt::LeaveSecurityGameEventBuffer& _internal_leavesecuritygameeventbuffer() const;
  ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* _internal_mutable_leavesecuritygameeventbuffer();
  public:
  void unsafe_arena_set_allocated_leavesecuritygameeventbuffer(
      ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* leavesecuritygameeventbuffer);
  ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* unsafe_arena_release_leavesecuritygameeventbuffer();

  // required .redhatgamedev.srt.SecurityGameEventBuffer.SecurityGameEventBufferType type = 1 [default = UNKNOWN];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType type() const;
  void set_type(::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType value);
  private:
  ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType _internal_type() const;
  void _internal_set_type(::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType value);
  public:

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.SecurityGameEventBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::redhatgamedev::srt::JoinSecurityGameEventBuffer* joinsecuritygameeventbuffer_;
  ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* leavesecuritygameeventbuffer_;
  int type_;
  friend struct ::TableStruct_GameEventBuffer_2eproto;
};
// -------------------------------------------------------------------

class GameEventBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.GameEventBuffer) */ {
 public:
  inline GameEventBuffer() : GameEventBuffer(nullptr) {};
  virtual ~GameEventBuffer();

  GameEventBuffer(const GameEventBuffer& from);
  GameEventBuffer(GameEventBuffer&& from) noexcept
    : GameEventBuffer() {
    *this = ::std::move(from);
  }

  inline GameEventBuffer& operator=(const GameEventBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameEventBuffer& operator=(GameEventBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameEventBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameEventBuffer* internal_default_instance() {
    return reinterpret_cast<const GameEventBuffer*>(
               &_GameEventBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GameEventBuffer& a, GameEventBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(GameEventBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameEventBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameEventBuffer* New() const final {
    return CreateMaybeMessage<GameEventBuffer>(nullptr);
  }

  GameEventBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameEventBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameEventBuffer& from);
  void MergeFrom(const GameEventBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameEventBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redhatgamedev.srt.GameEventBuffer";
  }
  protected:
  explicit GameEventBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_GameEventBuffer_2eproto);
    return ::descriptor_table_GameEventBuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GameEventBuffer_GameEventBufferType GameEventBufferType;
  static constexpr GameEventBufferType UNKNOWN =
    GameEventBuffer_GameEventBufferType_UNKNOWN;
  static constexpr GameEventBufferType ENTITY =
    GameEventBuffer_GameEventBufferType_ENTITY;
  static constexpr GameEventBufferType SECURITY =
    GameEventBuffer_GameEventBufferType_SECURITY;
  static inline bool GameEventBufferType_IsValid(int value) {
    return GameEventBuffer_GameEventBufferType_IsValid(value);
  }
  static constexpr GameEventBufferType GameEventBufferType_MIN =
    GameEventBuffer_GameEventBufferType_GameEventBufferType_MIN;
  static constexpr GameEventBufferType GameEventBufferType_MAX =
    GameEventBuffer_GameEventBufferType_GameEventBufferType_MAX;
  static constexpr int GameEventBufferType_ARRAYSIZE =
    GameEventBuffer_GameEventBufferType_GameEventBufferType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  GameEventBufferType_descriptor() {
    return GameEventBuffer_GameEventBufferType_descriptor();
  }
  template<typename T>
  static inline const std::string& GameEventBufferType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, GameEventBufferType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function GameEventBufferType_Name.");
    return GameEventBuffer_GameEventBufferType_Name(enum_t_value);
  }
  static inline bool GameEventBufferType_Parse(const std::string& name,
      GameEventBufferType* value) {
    return GameEventBuffer_GameEventBufferType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEntityGameEventBufferFieldNumber = 2,
    kSecurityGameEventBufferFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional .redhatgamedev.srt.EntityGameEventBuffer entityGameEventBuffer = 2;
  bool has_entitygameeventbuffer() const;
  private:
  bool _internal_has_entitygameeventbuffer() const;
  public:
  void clear_entitygameeventbuffer();
  const ::redhatgamedev::srt::EntityGameEventBuffer& entitygameeventbuffer() const;
  ::redhatgamedev::srt::EntityGameEventBuffer* release_entitygameeventbuffer();
  ::redhatgamedev::srt::EntityGameEventBuffer* mutable_entitygameeventbuffer();
  void set_allocated_entitygameeventbuffer(::redhatgamedev::srt::EntityGameEventBuffer* entitygameeventbuffer);
  private:
  const ::redhatgamedev::srt::EntityGameEventBuffer& _internal_entitygameeventbuffer() const;
  ::redhatgamedev::srt::EntityGameEventBuffer* _internal_mutable_entitygameeventbuffer();
  public:
  void unsafe_arena_set_allocated_entitygameeventbuffer(
      ::redhatgamedev::srt::EntityGameEventBuffer* entitygameeventbuffer);
  ::redhatgamedev::srt::EntityGameEventBuffer* unsafe_arena_release_entitygameeventbuffer();

  // optional .redhatgamedev.srt.SecurityGameEventBuffer securityGameEventBuffer = 3;
  bool has_securitygameeventbuffer() const;
  private:
  bool _internal_has_securitygameeventbuffer() const;
  public:
  void clear_securitygameeventbuffer();
  const ::redhatgamedev::srt::SecurityGameEventBuffer& securitygameeventbuffer() const;
  ::redhatgamedev::srt::SecurityGameEventBuffer* release_securitygameeventbuffer();
  ::redhatgamedev::srt::SecurityGameEventBuffer* mutable_securitygameeventbuffer();
  void set_allocated_securitygameeventbuffer(::redhatgamedev::srt::SecurityGameEventBuffer* securitygameeventbuffer);
  private:
  const ::redhatgamedev::srt::SecurityGameEventBuffer& _internal_securitygameeventbuffer() const;
  ::redhatgamedev::srt::SecurityGameEventBuffer* _internal_mutable_securitygameeventbuffer();
  public:
  void unsafe_arena_set_allocated_securitygameeventbuffer(
      ::redhatgamedev::srt::SecurityGameEventBuffer* securitygameeventbuffer);
  ::redhatgamedev::srt::SecurityGameEventBuffer* unsafe_arena_release_securitygameeventbuffer();

  // required .redhatgamedev.srt.GameEventBuffer.GameEventBufferType type = 1 [default = UNKNOWN];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType type() const;
  void set_type(::redhatgamedev::srt::GameEventBuffer_GameEventBufferType value);
  private:
  ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType _internal_type() const;
  void _internal_set_type(::redhatgamedev::srt::GameEventBuffer_GameEventBufferType value);
  public:

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.GameEventBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::redhatgamedev::srt::EntityGameEventBuffer* entitygameeventbuffer_;
  ::redhatgamedev::srt::SecurityGameEventBuffer* securitygameeventbuffer_;
  int type_;
  friend struct ::TableStruct_GameEventBuffer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JoinSecurityGameEventBuffer

// required string UUID = 1;
inline bool JoinSecurityGameEventBuffer::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool JoinSecurityGameEventBuffer::has_uuid() const {
  return _internal_has_uuid();
}
inline void JoinSecurityGameEventBuffer::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& JoinSecurityGameEventBuffer::uuid() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
  return _internal_uuid();
}
inline void JoinSecurityGameEventBuffer::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
}
inline std::string* JoinSecurityGameEventBuffer::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
  return _internal_mutable_uuid();
}
inline const std::string& JoinSecurityGameEventBuffer::_internal_uuid() const {
  return uuid_.Get();
}
inline void JoinSecurityGameEventBuffer::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void JoinSecurityGameEventBuffer::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
}
inline void JoinSecurityGameEventBuffer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
}
inline void JoinSecurityGameEventBuffer::set_uuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
}
inline std::string* JoinSecurityGameEventBuffer::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* JoinSecurityGameEventBuffer::release_uuid() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void JoinSecurityGameEventBuffer::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
}
inline std::string* JoinSecurityGameEventBuffer::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void JoinSecurityGameEventBuffer::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redhatgamedev.srt.JoinSecurityGameEventBuffer.UUID)
}

// -------------------------------------------------------------------

// LeaveSecurityGameEventBuffer

// required string UUID = 1;
inline bool LeaveSecurityGameEventBuffer::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LeaveSecurityGameEventBuffer::has_uuid() const {
  return _internal_has_uuid();
}
inline void LeaveSecurityGameEventBuffer::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LeaveSecurityGameEventBuffer::uuid() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
  return _internal_uuid();
}
inline void LeaveSecurityGameEventBuffer::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
}
inline std::string* LeaveSecurityGameEventBuffer::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
  return _internal_mutable_uuid();
}
inline const std::string& LeaveSecurityGameEventBuffer::_internal_uuid() const {
  return uuid_.Get();
}
inline void LeaveSecurityGameEventBuffer::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LeaveSecurityGameEventBuffer::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
}
inline void LeaveSecurityGameEventBuffer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
}
inline void LeaveSecurityGameEventBuffer::set_uuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
}
inline std::string* LeaveSecurityGameEventBuffer::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LeaveSecurityGameEventBuffer::release_uuid() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaveSecurityGameEventBuffer::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
}
inline std::string* LeaveSecurityGameEventBuffer::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LeaveSecurityGameEventBuffer::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redhatgamedev.srt.LeaveSecurityGameEventBuffer.UUID)
}

// -------------------------------------------------------------------

// SecurityGameEventBuffer

// required .redhatgamedev.srt.SecurityGameEventBuffer.SecurityGameEventBufferType type = 1 [default = UNKNOWN];
inline bool SecurityGameEventBuffer::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SecurityGameEventBuffer::has_type() const {
  return _internal_has_type();
}
inline void SecurityGameEventBuffer::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType SecurityGameEventBuffer::_internal_type() const {
  return static_cast< ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType >(type_);
}
inline ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType SecurityGameEventBuffer::type() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.SecurityGameEventBuffer.type)
  return _internal_type();
}
inline void SecurityGameEventBuffer::_internal_set_type(::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType value) {
  assert(::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void SecurityGameEventBuffer::set_type(::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.SecurityGameEventBuffer.type)
}

// optional .redhatgamedev.srt.JoinSecurityGameEventBuffer joinSecurityGameEventBuffer = 3;
inline bool SecurityGameEventBuffer::_internal_has_joinsecuritygameeventbuffer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || joinsecuritygameeventbuffer_ != nullptr);
  return value;
}
inline bool SecurityGameEventBuffer::has_joinsecuritygameeventbuffer() const {
  return _internal_has_joinsecuritygameeventbuffer();
}
inline void SecurityGameEventBuffer::clear_joinsecuritygameeventbuffer() {
  if (joinsecuritygameeventbuffer_ != nullptr) joinsecuritygameeventbuffer_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::redhatgamedev::srt::JoinSecurityGameEventBuffer& SecurityGameEventBuffer::_internal_joinsecuritygameeventbuffer() const {
  const ::redhatgamedev::srt::JoinSecurityGameEventBuffer* p = joinsecuritygameeventbuffer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::redhatgamedev::srt::JoinSecurityGameEventBuffer*>(
      &::redhatgamedev::srt::_JoinSecurityGameEventBuffer_default_instance_);
}
inline const ::redhatgamedev::srt::JoinSecurityGameEventBuffer& SecurityGameEventBuffer::joinsecuritygameeventbuffer() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.SecurityGameEventBuffer.joinSecurityGameEventBuffer)
  return _internal_joinsecuritygameeventbuffer();
}
inline void SecurityGameEventBuffer::unsafe_arena_set_allocated_joinsecuritygameeventbuffer(
    ::redhatgamedev::srt::JoinSecurityGameEventBuffer* joinsecuritygameeventbuffer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joinsecuritygameeventbuffer_);
  }
  joinsecuritygameeventbuffer_ = joinsecuritygameeventbuffer;
  if (joinsecuritygameeventbuffer) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redhatgamedev.srt.SecurityGameEventBuffer.joinSecurityGameEventBuffer)
}
inline ::redhatgamedev::srt::JoinSecurityGameEventBuffer* SecurityGameEventBuffer::release_joinsecuritygameeventbuffer() {
  auto temp = unsafe_arena_release_joinsecuritygameeventbuffer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::redhatgamedev::srt::JoinSecurityGameEventBuffer* SecurityGameEventBuffer::unsafe_arena_release_joinsecuritygameeventbuffer() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.SecurityGameEventBuffer.joinSecurityGameEventBuffer)
  _has_bits_[0] &= ~0x00000001u;
  ::redhatgamedev::srt::JoinSecurityGameEventBuffer* temp = joinsecuritygameeventbuffer_;
  joinsecuritygameeventbuffer_ = nullptr;
  return temp;
}
inline ::redhatgamedev::srt::JoinSecurityGameEventBuffer* SecurityGameEventBuffer::_internal_mutable_joinsecuritygameeventbuffer() {
  _has_bits_[0] |= 0x00000001u;
  if (joinsecuritygameeventbuffer_ == nullptr) {
    auto* p = CreateMaybeMessage<::redhatgamedev::srt::JoinSecurityGameEventBuffer>(GetArena());
    joinsecuritygameeventbuffer_ = p;
  }
  return joinsecuritygameeventbuffer_;
}
inline ::redhatgamedev::srt::JoinSecurityGameEventBuffer* SecurityGameEventBuffer::mutable_joinsecuritygameeventbuffer() {
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.SecurityGameEventBuffer.joinSecurityGameEventBuffer)
  return _internal_mutable_joinsecuritygameeventbuffer();
}
inline void SecurityGameEventBuffer::set_allocated_joinsecuritygameeventbuffer(::redhatgamedev::srt::JoinSecurityGameEventBuffer* joinsecuritygameeventbuffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete joinsecuritygameeventbuffer_;
  }
  if (joinsecuritygameeventbuffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(joinsecuritygameeventbuffer);
    if (message_arena != submessage_arena) {
      joinsecuritygameeventbuffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinsecuritygameeventbuffer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  joinsecuritygameeventbuffer_ = joinsecuritygameeventbuffer;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.SecurityGameEventBuffer.joinSecurityGameEventBuffer)
}

// optional .redhatgamedev.srt.LeaveSecurityGameEventBuffer leaveSecurityGameEventBuffer = 4;
inline bool SecurityGameEventBuffer::_internal_has_leavesecuritygameeventbuffer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || leavesecuritygameeventbuffer_ != nullptr);
  return value;
}
inline bool SecurityGameEventBuffer::has_leavesecuritygameeventbuffer() const {
  return _internal_has_leavesecuritygameeventbuffer();
}
inline void SecurityGameEventBuffer::clear_leavesecuritygameeventbuffer() {
  if (leavesecuritygameeventbuffer_ != nullptr) leavesecuritygameeventbuffer_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::redhatgamedev::srt::LeaveSecurityGameEventBuffer& SecurityGameEventBuffer::_internal_leavesecuritygameeventbuffer() const {
  const ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* p = leavesecuritygameeventbuffer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::redhatgamedev::srt::LeaveSecurityGameEventBuffer*>(
      &::redhatgamedev::srt::_LeaveSecurityGameEventBuffer_default_instance_);
}
inline const ::redhatgamedev::srt::LeaveSecurityGameEventBuffer& SecurityGameEventBuffer::leavesecuritygameeventbuffer() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.SecurityGameEventBuffer.leaveSecurityGameEventBuffer)
  return _internal_leavesecuritygameeventbuffer();
}
inline void SecurityGameEventBuffer::unsafe_arena_set_allocated_leavesecuritygameeventbuffer(
    ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* leavesecuritygameeventbuffer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leavesecuritygameeventbuffer_);
  }
  leavesecuritygameeventbuffer_ = leavesecuritygameeventbuffer;
  if (leavesecuritygameeventbuffer) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redhatgamedev.srt.SecurityGameEventBuffer.leaveSecurityGameEventBuffer)
}
inline ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* SecurityGameEventBuffer::release_leavesecuritygameeventbuffer() {
  auto temp = unsafe_arena_release_leavesecuritygameeventbuffer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* SecurityGameEventBuffer::unsafe_arena_release_leavesecuritygameeventbuffer() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.SecurityGameEventBuffer.leaveSecurityGameEventBuffer)
  _has_bits_[0] &= ~0x00000002u;
  ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* temp = leavesecuritygameeventbuffer_;
  leavesecuritygameeventbuffer_ = nullptr;
  return temp;
}
inline ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* SecurityGameEventBuffer::_internal_mutable_leavesecuritygameeventbuffer() {
  _has_bits_[0] |= 0x00000002u;
  if (leavesecuritygameeventbuffer_ == nullptr) {
    auto* p = CreateMaybeMessage<::redhatgamedev::srt::LeaveSecurityGameEventBuffer>(GetArena());
    leavesecuritygameeventbuffer_ = p;
  }
  return leavesecuritygameeventbuffer_;
}
inline ::redhatgamedev::srt::LeaveSecurityGameEventBuffer* SecurityGameEventBuffer::mutable_leavesecuritygameeventbuffer() {
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.SecurityGameEventBuffer.leaveSecurityGameEventBuffer)
  return _internal_mutable_leavesecuritygameeventbuffer();
}
inline void SecurityGameEventBuffer::set_allocated_leavesecuritygameeventbuffer(::redhatgamedev::srt::LeaveSecurityGameEventBuffer* leavesecuritygameeventbuffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leavesecuritygameeventbuffer_;
  }
  if (leavesecuritygameeventbuffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leavesecuritygameeventbuffer);
    if (message_arena != submessage_arena) {
      leavesecuritygameeventbuffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leavesecuritygameeventbuffer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  leavesecuritygameeventbuffer_ = leavesecuritygameeventbuffer;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.SecurityGameEventBuffer.leaveSecurityGameEventBuffer)
}

// -------------------------------------------------------------------

// GameEventBuffer

// required .redhatgamedev.srt.GameEventBuffer.GameEventBufferType type = 1 [default = UNKNOWN];
inline bool GameEventBuffer::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GameEventBuffer::has_type() const {
  return _internal_has_type();
}
inline void GameEventBuffer::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType GameEventBuffer::_internal_type() const {
  return static_cast< ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType >(type_);
}
inline ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType GameEventBuffer::type() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.GameEventBuffer.type)
  return _internal_type();
}
inline void GameEventBuffer::_internal_set_type(::redhatgamedev::srt::GameEventBuffer_GameEventBufferType value) {
  assert(::redhatgamedev::srt::GameEventBuffer_GameEventBufferType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void GameEventBuffer::set_type(::redhatgamedev::srt::GameEventBuffer_GameEventBufferType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.GameEventBuffer.type)
}

// optional .redhatgamedev.srt.EntityGameEventBuffer entityGameEventBuffer = 2;
inline bool GameEventBuffer::_internal_has_entitygameeventbuffer() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || entitygameeventbuffer_ != nullptr);
  return value;
}
inline bool GameEventBuffer::has_entitygameeventbuffer() const {
  return _internal_has_entitygameeventbuffer();
}
inline const ::redhatgamedev::srt::EntityGameEventBuffer& GameEventBuffer::_internal_entitygameeventbuffer() const {
  const ::redhatgamedev::srt::EntityGameEventBuffer* p = entitygameeventbuffer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::redhatgamedev::srt::EntityGameEventBuffer*>(
      &::redhatgamedev::srt::_EntityGameEventBuffer_default_instance_);
}
inline const ::redhatgamedev::srt::EntityGameEventBuffer& GameEventBuffer::entitygameeventbuffer() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.GameEventBuffer.entityGameEventBuffer)
  return _internal_entitygameeventbuffer();
}
inline void GameEventBuffer::unsafe_arena_set_allocated_entitygameeventbuffer(
    ::redhatgamedev::srt::EntityGameEventBuffer* entitygameeventbuffer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entitygameeventbuffer_);
  }
  entitygameeventbuffer_ = entitygameeventbuffer;
  if (entitygameeventbuffer) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redhatgamedev.srt.GameEventBuffer.entityGameEventBuffer)
}
inline ::redhatgamedev::srt::EntityGameEventBuffer* GameEventBuffer::release_entitygameeventbuffer() {
  auto temp = unsafe_arena_release_entitygameeventbuffer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::redhatgamedev::srt::EntityGameEventBuffer* GameEventBuffer::unsafe_arena_release_entitygameeventbuffer() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.GameEventBuffer.entityGameEventBuffer)
  _has_bits_[0] &= ~0x00000001u;
  ::redhatgamedev::srt::EntityGameEventBuffer* temp = entitygameeventbuffer_;
  entitygameeventbuffer_ = nullptr;
  return temp;
}
inline ::redhatgamedev::srt::EntityGameEventBuffer* GameEventBuffer::_internal_mutable_entitygameeventbuffer() {
  _has_bits_[0] |= 0x00000001u;
  if (entitygameeventbuffer_ == nullptr) {
    auto* p = CreateMaybeMessage<::redhatgamedev::srt::EntityGameEventBuffer>(GetArena());
    entitygameeventbuffer_ = p;
  }
  return entitygameeventbuffer_;
}
inline ::redhatgamedev::srt::EntityGameEventBuffer* GameEventBuffer::mutable_entitygameeventbuffer() {
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.GameEventBuffer.entityGameEventBuffer)
  return _internal_mutable_entitygameeventbuffer();
}
inline void GameEventBuffer::set_allocated_entitygameeventbuffer(::redhatgamedev::srt::EntityGameEventBuffer* entitygameeventbuffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entitygameeventbuffer_);
  }
  if (entitygameeventbuffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entitygameeventbuffer)->GetArena();
    if (message_arena != submessage_arena) {
      entitygameeventbuffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entitygameeventbuffer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  entitygameeventbuffer_ = entitygameeventbuffer;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.GameEventBuffer.entityGameEventBuffer)
}

// optional .redhatgamedev.srt.SecurityGameEventBuffer securityGameEventBuffer = 3;
inline bool GameEventBuffer::_internal_has_securitygameeventbuffer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || securitygameeventbuffer_ != nullptr);
  return value;
}
inline bool GameEventBuffer::has_securitygameeventbuffer() const {
  return _internal_has_securitygameeventbuffer();
}
inline void GameEventBuffer::clear_securitygameeventbuffer() {
  if (securitygameeventbuffer_ != nullptr) securitygameeventbuffer_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::redhatgamedev::srt::SecurityGameEventBuffer& GameEventBuffer::_internal_securitygameeventbuffer() const {
  const ::redhatgamedev::srt::SecurityGameEventBuffer* p = securitygameeventbuffer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::redhatgamedev::srt::SecurityGameEventBuffer*>(
      &::redhatgamedev::srt::_SecurityGameEventBuffer_default_instance_);
}
inline const ::redhatgamedev::srt::SecurityGameEventBuffer& GameEventBuffer::securitygameeventbuffer() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.GameEventBuffer.securityGameEventBuffer)
  return _internal_securitygameeventbuffer();
}
inline void GameEventBuffer::unsafe_arena_set_allocated_securitygameeventbuffer(
    ::redhatgamedev::srt::SecurityGameEventBuffer* securitygameeventbuffer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(securitygameeventbuffer_);
  }
  securitygameeventbuffer_ = securitygameeventbuffer;
  if (securitygameeventbuffer) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redhatgamedev.srt.GameEventBuffer.securityGameEventBuffer)
}
inline ::redhatgamedev::srt::SecurityGameEventBuffer* GameEventBuffer::release_securitygameeventbuffer() {
  auto temp = unsafe_arena_release_securitygameeventbuffer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::redhatgamedev::srt::SecurityGameEventBuffer* GameEventBuffer::unsafe_arena_release_securitygameeventbuffer() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.GameEventBuffer.securityGameEventBuffer)
  _has_bits_[0] &= ~0x00000002u;
  ::redhatgamedev::srt::SecurityGameEventBuffer* temp = securitygameeventbuffer_;
  securitygameeventbuffer_ = nullptr;
  return temp;
}
inline ::redhatgamedev::srt::SecurityGameEventBuffer* GameEventBuffer::_internal_mutable_securitygameeventbuffer() {
  _has_bits_[0] |= 0x00000002u;
  if (securitygameeventbuffer_ == nullptr) {
    auto* p = CreateMaybeMessage<::redhatgamedev::srt::SecurityGameEventBuffer>(GetArena());
    securitygameeventbuffer_ = p;
  }
  return securitygameeventbuffer_;
}
inline ::redhatgamedev::srt::SecurityGameEventBuffer* GameEventBuffer::mutable_securitygameeventbuffer() {
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.GameEventBuffer.securityGameEventBuffer)
  return _internal_mutable_securitygameeventbuffer();
}
inline void GameEventBuffer::set_allocated_securitygameeventbuffer(::redhatgamedev::srt::SecurityGameEventBuffer* securitygameeventbuffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete securitygameeventbuffer_;
  }
  if (securitygameeventbuffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(securitygameeventbuffer);
    if (message_arena != submessage_arena) {
      securitygameeventbuffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, securitygameeventbuffer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  securitygameeventbuffer_ = securitygameeventbuffer;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.GameEventBuffer.securityGameEventBuffer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace srt
}  // namespace redhatgamedev

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType>() {
  return ::redhatgamedev::srt::SecurityGameEventBuffer_SecurityGameEventBufferType_descriptor();
}
template <> struct is_proto_enum< ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType>() {
  return ::redhatgamedev::srt::GameEventBuffer_GameEventBufferType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_GameEventBuffer_2eproto
