// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DualStickRawInputCommandBuffer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DualStickRawInputCommandBuffer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DualStickRawInputCommandBuffer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "box2d.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DualStickRawInputCommandBuffer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DualStickRawInputCommandBuffer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DualStickRawInputCommandBuffer_2eproto;
namespace redhatgamedev {
namespace srt {
class DualStickRawInputCommandBuffer;
class DualStickRawInputCommandBufferDefaultTypeInternal;
extern DualStickRawInputCommandBufferDefaultTypeInternal _DualStickRawInputCommandBuffer_default_instance_;
}  // namespace srt
}  // namespace redhatgamedev
PROTOBUF_NAMESPACE_OPEN
template<> ::redhatgamedev::srt::DualStickRawInputCommandBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::DualStickRawInputCommandBuffer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace redhatgamedev {
namespace srt {

// ===================================================================

class DualStickRawInputCommandBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.DualStickRawInputCommandBuffer) */ {
 public:
  inline DualStickRawInputCommandBuffer() : DualStickRawInputCommandBuffer(nullptr) {};
  virtual ~DualStickRawInputCommandBuffer();

  DualStickRawInputCommandBuffer(const DualStickRawInputCommandBuffer& from);
  DualStickRawInputCommandBuffer(DualStickRawInputCommandBuffer&& from) noexcept
    : DualStickRawInputCommandBuffer() {
    *this = ::std::move(from);
  }

  inline DualStickRawInputCommandBuffer& operator=(const DualStickRawInputCommandBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DualStickRawInputCommandBuffer& operator=(DualStickRawInputCommandBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DualStickRawInputCommandBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DualStickRawInputCommandBuffer* internal_default_instance() {
    return reinterpret_cast<const DualStickRawInputCommandBuffer*>(
               &_DualStickRawInputCommandBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DualStickRawInputCommandBuffer& a, DualStickRawInputCommandBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(DualStickRawInputCommandBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DualStickRawInputCommandBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DualStickRawInputCommandBuffer* New() const final {
    return CreateMaybeMessage<DualStickRawInputCommandBuffer>(nullptr);
  }

  DualStickRawInputCommandBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DualStickRawInputCommandBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DualStickRawInputCommandBuffer& from);
  void MergeFrom(const DualStickRawInputCommandBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DualStickRawInputCommandBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redhatgamedev.srt.DualStickRawInputCommandBuffer";
  }
  protected:
  explicit DualStickRawInputCommandBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DualStickRawInputCommandBuffer_2eproto);
    return ::descriptor_table_DualStickRawInputCommandBuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPbv2MoveFieldNumber = 1,
    kPbv2ShootFieldNumber = 2,
  };
  // required .box2d.PbVec2 pbv2Move = 1;
  bool has_pbv2move() const;
  private:
  bool _internal_has_pbv2move() const;
  public:
  void clear_pbv2move();
  const ::box2d::PbVec2& pbv2move() const;
  ::box2d::PbVec2* release_pbv2move();
  ::box2d::PbVec2* mutable_pbv2move();
  void set_allocated_pbv2move(::box2d::PbVec2* pbv2move);
  private:
  const ::box2d::PbVec2& _internal_pbv2move() const;
  ::box2d::PbVec2* _internal_mutable_pbv2move();
  public:
  void unsafe_arena_set_allocated_pbv2move(
      ::box2d::PbVec2* pbv2move);
  ::box2d::PbVec2* unsafe_arena_release_pbv2move();

  // required .box2d.PbVec2 pbv2Shoot = 2;
  bool has_pbv2shoot() const;
  private:
  bool _internal_has_pbv2shoot() const;
  public:
  void clear_pbv2shoot();
  const ::box2d::PbVec2& pbv2shoot() const;
  ::box2d::PbVec2* release_pbv2shoot();
  ::box2d::PbVec2* mutable_pbv2shoot();
  void set_allocated_pbv2shoot(::box2d::PbVec2* pbv2shoot);
  private:
  const ::box2d::PbVec2& _internal_pbv2shoot() const;
  ::box2d::PbVec2* _internal_mutable_pbv2shoot();
  public:
  void unsafe_arena_set_allocated_pbv2shoot(
      ::box2d::PbVec2* pbv2shoot);
  ::box2d::PbVec2* unsafe_arena_release_pbv2shoot();

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.DualStickRawInputCommandBuffer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::box2d::PbVec2* pbv2move_;
  ::box2d::PbVec2* pbv2shoot_;
  friend struct ::TableStruct_DualStickRawInputCommandBuffer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DualStickRawInputCommandBuffer

// required .box2d.PbVec2 pbv2Move = 1;
inline bool DualStickRawInputCommandBuffer::_internal_has_pbv2move() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || pbv2move_ != nullptr);
  return value;
}
inline bool DualStickRawInputCommandBuffer::has_pbv2move() const {
  return _internal_has_pbv2move();
}
inline const ::box2d::PbVec2& DualStickRawInputCommandBuffer::_internal_pbv2move() const {
  const ::box2d::PbVec2* p = pbv2move_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& DualStickRawInputCommandBuffer::pbv2move() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.DualStickRawInputCommandBuffer.pbv2Move)
  return _internal_pbv2move();
}
inline void DualStickRawInputCommandBuffer::unsafe_arena_set_allocated_pbv2move(
    ::box2d::PbVec2* pbv2move) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pbv2move_);
  }
  pbv2move_ = pbv2move;
  if (pbv2move) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redhatgamedev.srt.DualStickRawInputCommandBuffer.pbv2Move)
}
inline ::box2d::PbVec2* DualStickRawInputCommandBuffer::release_pbv2move() {
  auto temp = unsafe_arena_release_pbv2move();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* DualStickRawInputCommandBuffer::unsafe_arena_release_pbv2move() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.DualStickRawInputCommandBuffer.pbv2Move)
  _has_bits_[0] &= ~0x00000001u;
  ::box2d::PbVec2* temp = pbv2move_;
  pbv2move_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* DualStickRawInputCommandBuffer::_internal_mutable_pbv2move() {
  _has_bits_[0] |= 0x00000001u;
  if (pbv2move_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    pbv2move_ = p;
  }
  return pbv2move_;
}
inline ::box2d::PbVec2* DualStickRawInputCommandBuffer::mutable_pbv2move() {
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.DualStickRawInputCommandBuffer.pbv2Move)
  return _internal_mutable_pbv2move();
}
inline void DualStickRawInputCommandBuffer::set_allocated_pbv2move(::box2d::PbVec2* pbv2move) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pbv2move_);
  }
  if (pbv2move) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pbv2move)->GetArena();
    if (message_arena != submessage_arena) {
      pbv2move = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pbv2move, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pbv2move_ = pbv2move;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.DualStickRawInputCommandBuffer.pbv2Move)
}

// required .box2d.PbVec2 pbv2Shoot = 2;
inline bool DualStickRawInputCommandBuffer::_internal_has_pbv2shoot() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || pbv2shoot_ != nullptr);
  return value;
}
inline bool DualStickRawInputCommandBuffer::has_pbv2shoot() const {
  return _internal_has_pbv2shoot();
}
inline const ::box2d::PbVec2& DualStickRawInputCommandBuffer::_internal_pbv2shoot() const {
  const ::box2d::PbVec2* p = pbv2shoot_;
  return p != nullptr ? *p : *reinterpret_cast<const ::box2d::PbVec2*>(
      &::box2d::_PbVec2_default_instance_);
}
inline const ::box2d::PbVec2& DualStickRawInputCommandBuffer::pbv2shoot() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.DualStickRawInputCommandBuffer.pbv2Shoot)
  return _internal_pbv2shoot();
}
inline void DualStickRawInputCommandBuffer::unsafe_arena_set_allocated_pbv2shoot(
    ::box2d::PbVec2* pbv2shoot) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pbv2shoot_);
  }
  pbv2shoot_ = pbv2shoot;
  if (pbv2shoot) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redhatgamedev.srt.DualStickRawInputCommandBuffer.pbv2Shoot)
}
inline ::box2d::PbVec2* DualStickRawInputCommandBuffer::release_pbv2shoot() {
  auto temp = unsafe_arena_release_pbv2shoot();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::box2d::PbVec2* DualStickRawInputCommandBuffer::unsafe_arena_release_pbv2shoot() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.DualStickRawInputCommandBuffer.pbv2Shoot)
  _has_bits_[0] &= ~0x00000002u;
  ::box2d::PbVec2* temp = pbv2shoot_;
  pbv2shoot_ = nullptr;
  return temp;
}
inline ::box2d::PbVec2* DualStickRawInputCommandBuffer::_internal_mutable_pbv2shoot() {
  _has_bits_[0] |= 0x00000002u;
  if (pbv2shoot_ == nullptr) {
    auto* p = CreateMaybeMessage<::box2d::PbVec2>(GetArena());
    pbv2shoot_ = p;
  }
  return pbv2shoot_;
}
inline ::box2d::PbVec2* DualStickRawInputCommandBuffer::mutable_pbv2shoot() {
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.DualStickRawInputCommandBuffer.pbv2Shoot)
  return _internal_mutable_pbv2shoot();
}
inline void DualStickRawInputCommandBuffer::set_allocated_pbv2shoot(::box2d::PbVec2* pbv2shoot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pbv2shoot_);
  }
  if (pbv2shoot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pbv2shoot)->GetArena();
    if (message_arena != submessage_arena) {
      pbv2shoot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pbv2shoot, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  pbv2shoot_ = pbv2shoot;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.DualStickRawInputCommandBuffer.pbv2Shoot)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace srt
}  // namespace redhatgamedev

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DualStickRawInputCommandBuffer_2eproto
