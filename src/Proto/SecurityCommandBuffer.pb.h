// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SecurityCommandBuffer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_SecurityCommandBuffer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_SecurityCommandBuffer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SecurityCommandBuffer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_SecurityCommandBuffer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_SecurityCommandBuffer_2eproto;
namespace redhatgamedev {
namespace srt {
class JoinSecurityCommandBuffer;
class JoinSecurityCommandBufferDefaultTypeInternal;
extern JoinSecurityCommandBufferDefaultTypeInternal _JoinSecurityCommandBuffer_default_instance_;
class LeaveSecurityCommandBuffer;
class LeaveSecurityCommandBufferDefaultTypeInternal;
extern LeaveSecurityCommandBufferDefaultTypeInternal _LeaveSecurityCommandBuffer_default_instance_;
class SecurityCommandBuffer;
class SecurityCommandBufferDefaultTypeInternal;
extern SecurityCommandBufferDefaultTypeInternal _SecurityCommandBuffer_default_instance_;
}  // namespace srt
}  // namespace redhatgamedev
PROTOBUF_NAMESPACE_OPEN
template<> ::redhatgamedev::srt::JoinSecurityCommandBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::JoinSecurityCommandBuffer>(Arena*);
template<> ::redhatgamedev::srt::LeaveSecurityCommandBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::LeaveSecurityCommandBuffer>(Arena*);
template<> ::redhatgamedev::srt::SecurityCommandBuffer* Arena::CreateMaybeMessage<::redhatgamedev::srt::SecurityCommandBuffer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace redhatgamedev {
namespace srt {

enum SecurityCommandBuffer_SecurityCommandBufferType : int {
  SecurityCommandBuffer_SecurityCommandBufferType_UNKNOWN = 0,
  SecurityCommandBuffer_SecurityCommandBufferType_JOIN = 1,
  SecurityCommandBuffer_SecurityCommandBufferType_LEAVE = 2
};
bool SecurityCommandBuffer_SecurityCommandBufferType_IsValid(int value);
constexpr SecurityCommandBuffer_SecurityCommandBufferType SecurityCommandBuffer_SecurityCommandBufferType_SecurityCommandBufferType_MIN = SecurityCommandBuffer_SecurityCommandBufferType_UNKNOWN;
constexpr SecurityCommandBuffer_SecurityCommandBufferType SecurityCommandBuffer_SecurityCommandBufferType_SecurityCommandBufferType_MAX = SecurityCommandBuffer_SecurityCommandBufferType_LEAVE;
constexpr int SecurityCommandBuffer_SecurityCommandBufferType_SecurityCommandBufferType_ARRAYSIZE = SecurityCommandBuffer_SecurityCommandBufferType_SecurityCommandBufferType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecurityCommandBuffer_SecurityCommandBufferType_descriptor();
template<typename T>
inline const std::string& SecurityCommandBuffer_SecurityCommandBufferType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecurityCommandBuffer_SecurityCommandBufferType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecurityCommandBuffer_SecurityCommandBufferType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecurityCommandBuffer_SecurityCommandBufferType_descriptor(), enum_t_value);
}
inline bool SecurityCommandBuffer_SecurityCommandBufferType_Parse(
    const std::string& name, SecurityCommandBuffer_SecurityCommandBufferType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecurityCommandBuffer_SecurityCommandBufferType>(
    SecurityCommandBuffer_SecurityCommandBufferType_descriptor(), name, value);
}
// ===================================================================

class JoinSecurityCommandBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.JoinSecurityCommandBuffer) */ {
 public:
  inline JoinSecurityCommandBuffer() : JoinSecurityCommandBuffer(nullptr) {};
  virtual ~JoinSecurityCommandBuffer();

  JoinSecurityCommandBuffer(const JoinSecurityCommandBuffer& from);
  JoinSecurityCommandBuffer(JoinSecurityCommandBuffer&& from) noexcept
    : JoinSecurityCommandBuffer() {
    *this = ::std::move(from);
  }

  inline JoinSecurityCommandBuffer& operator=(const JoinSecurityCommandBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinSecurityCommandBuffer& operator=(JoinSecurityCommandBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JoinSecurityCommandBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JoinSecurityCommandBuffer* internal_default_instance() {
    return reinterpret_cast<const JoinSecurityCommandBuffer*>(
               &_JoinSecurityCommandBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(JoinSecurityCommandBuffer& a, JoinSecurityCommandBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinSecurityCommandBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinSecurityCommandBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JoinSecurityCommandBuffer* New() const final {
    return CreateMaybeMessage<JoinSecurityCommandBuffer>(nullptr);
  }

  JoinSecurityCommandBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JoinSecurityCommandBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JoinSecurityCommandBuffer& from);
  void MergeFrom(const JoinSecurityCommandBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinSecurityCommandBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redhatgamedev.srt.JoinSecurityCommandBuffer";
  }
  protected:
  explicit JoinSecurityCommandBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SecurityCommandBuffer_2eproto);
    return ::descriptor_table_SecurityCommandBuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.JoinSecurityCommandBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SecurityCommandBuffer_2eproto;
};
// -------------------------------------------------------------------

class LeaveSecurityCommandBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.LeaveSecurityCommandBuffer) */ {
 public:
  inline LeaveSecurityCommandBuffer() : LeaveSecurityCommandBuffer(nullptr) {};
  virtual ~LeaveSecurityCommandBuffer();

  LeaveSecurityCommandBuffer(const LeaveSecurityCommandBuffer& from);
  LeaveSecurityCommandBuffer(LeaveSecurityCommandBuffer&& from) noexcept
    : LeaveSecurityCommandBuffer() {
    *this = ::std::move(from);
  }

  inline LeaveSecurityCommandBuffer& operator=(const LeaveSecurityCommandBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveSecurityCommandBuffer& operator=(LeaveSecurityCommandBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveSecurityCommandBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LeaveSecurityCommandBuffer* internal_default_instance() {
    return reinterpret_cast<const LeaveSecurityCommandBuffer*>(
               &_LeaveSecurityCommandBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LeaveSecurityCommandBuffer& a, LeaveSecurityCommandBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveSecurityCommandBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveSecurityCommandBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveSecurityCommandBuffer* New() const final {
    return CreateMaybeMessage<LeaveSecurityCommandBuffer>(nullptr);
  }

  LeaveSecurityCommandBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveSecurityCommandBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveSecurityCommandBuffer& from);
  void MergeFrom(const LeaveSecurityCommandBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveSecurityCommandBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redhatgamedev.srt.LeaveSecurityCommandBuffer";
  }
  protected:
  explicit LeaveSecurityCommandBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SecurityCommandBuffer_2eproto);
    return ::descriptor_table_SecurityCommandBuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUUIDFieldNumber = 1,
  };
  // required string UUID = 1;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.LeaveSecurityCommandBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  friend struct ::TableStruct_SecurityCommandBuffer_2eproto;
};
// -------------------------------------------------------------------

class SecurityCommandBuffer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:redhatgamedev.srt.SecurityCommandBuffer) */ {
 public:
  inline SecurityCommandBuffer() : SecurityCommandBuffer(nullptr) {};
  virtual ~SecurityCommandBuffer();

  SecurityCommandBuffer(const SecurityCommandBuffer& from);
  SecurityCommandBuffer(SecurityCommandBuffer&& from) noexcept
    : SecurityCommandBuffer() {
    *this = ::std::move(from);
  }

  inline SecurityCommandBuffer& operator=(const SecurityCommandBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecurityCommandBuffer& operator=(SecurityCommandBuffer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SecurityCommandBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SecurityCommandBuffer* internal_default_instance() {
    return reinterpret_cast<const SecurityCommandBuffer*>(
               &_SecurityCommandBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SecurityCommandBuffer& a, SecurityCommandBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(SecurityCommandBuffer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecurityCommandBuffer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SecurityCommandBuffer* New() const final {
    return CreateMaybeMessage<SecurityCommandBuffer>(nullptr);
  }

  SecurityCommandBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SecurityCommandBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SecurityCommandBuffer& from);
  void MergeFrom(const SecurityCommandBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SecurityCommandBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "redhatgamedev.srt.SecurityCommandBuffer";
  }
  protected:
  explicit SecurityCommandBuffer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_SecurityCommandBuffer_2eproto);
    return ::descriptor_table_SecurityCommandBuffer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SecurityCommandBuffer_SecurityCommandBufferType SecurityCommandBufferType;
  static constexpr SecurityCommandBufferType UNKNOWN =
    SecurityCommandBuffer_SecurityCommandBufferType_UNKNOWN;
  static constexpr SecurityCommandBufferType JOIN =
    SecurityCommandBuffer_SecurityCommandBufferType_JOIN;
  static constexpr SecurityCommandBufferType LEAVE =
    SecurityCommandBuffer_SecurityCommandBufferType_LEAVE;
  static inline bool SecurityCommandBufferType_IsValid(int value) {
    return SecurityCommandBuffer_SecurityCommandBufferType_IsValid(value);
  }
  static constexpr SecurityCommandBufferType SecurityCommandBufferType_MIN =
    SecurityCommandBuffer_SecurityCommandBufferType_SecurityCommandBufferType_MIN;
  static constexpr SecurityCommandBufferType SecurityCommandBufferType_MAX =
    SecurityCommandBuffer_SecurityCommandBufferType_SecurityCommandBufferType_MAX;
  static constexpr int SecurityCommandBufferType_ARRAYSIZE =
    SecurityCommandBuffer_SecurityCommandBufferType_SecurityCommandBufferType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SecurityCommandBufferType_descriptor() {
    return SecurityCommandBuffer_SecurityCommandBufferType_descriptor();
  }
  template<typename T>
  static inline const std::string& SecurityCommandBufferType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SecurityCommandBufferType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SecurityCommandBufferType_Name.");
    return SecurityCommandBuffer_SecurityCommandBufferType_Name(enum_t_value);
  }
  static inline bool SecurityCommandBufferType_Parse(const std::string& name,
      SecurityCommandBufferType* value) {
    return SecurityCommandBuffer_SecurityCommandBufferType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUUIDFieldNumber = 2,
    kJoinSecurityCommandBufferFieldNumber = 3,
    kLeaveSecurityCommandBufferFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // optional string UUID = 2;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional .redhatgamedev.srt.JoinSecurityCommandBuffer joinSecurityCommandBuffer = 3;
  bool has_joinsecuritycommandbuffer() const;
  private:
  bool _internal_has_joinsecuritycommandbuffer() const;
  public:
  void clear_joinsecuritycommandbuffer();
  const ::redhatgamedev::srt::JoinSecurityCommandBuffer& joinsecuritycommandbuffer() const;
  ::redhatgamedev::srt::JoinSecurityCommandBuffer* release_joinsecuritycommandbuffer();
  ::redhatgamedev::srt::JoinSecurityCommandBuffer* mutable_joinsecuritycommandbuffer();
  void set_allocated_joinsecuritycommandbuffer(::redhatgamedev::srt::JoinSecurityCommandBuffer* joinsecuritycommandbuffer);
  private:
  const ::redhatgamedev::srt::JoinSecurityCommandBuffer& _internal_joinsecuritycommandbuffer() const;
  ::redhatgamedev::srt::JoinSecurityCommandBuffer* _internal_mutable_joinsecuritycommandbuffer();
  public:
  void unsafe_arena_set_allocated_joinsecuritycommandbuffer(
      ::redhatgamedev::srt::JoinSecurityCommandBuffer* joinsecuritycommandbuffer);
  ::redhatgamedev::srt::JoinSecurityCommandBuffer* unsafe_arena_release_joinsecuritycommandbuffer();

  // optional .redhatgamedev.srt.LeaveSecurityCommandBuffer leaveSecurityCommandBuffer = 4;
  bool has_leavesecuritycommandbuffer() const;
  private:
  bool _internal_has_leavesecuritycommandbuffer() const;
  public:
  void clear_leavesecuritycommandbuffer();
  const ::redhatgamedev::srt::LeaveSecurityCommandBuffer& leavesecuritycommandbuffer() const;
  ::redhatgamedev::srt::LeaveSecurityCommandBuffer* release_leavesecuritycommandbuffer();
  ::redhatgamedev::srt::LeaveSecurityCommandBuffer* mutable_leavesecuritycommandbuffer();
  void set_allocated_leavesecuritycommandbuffer(::redhatgamedev::srt::LeaveSecurityCommandBuffer* leavesecuritycommandbuffer);
  private:
  const ::redhatgamedev::srt::LeaveSecurityCommandBuffer& _internal_leavesecuritycommandbuffer() const;
  ::redhatgamedev::srt::LeaveSecurityCommandBuffer* _internal_mutable_leavesecuritycommandbuffer();
  public:
  void unsafe_arena_set_allocated_leavesecuritycommandbuffer(
      ::redhatgamedev::srt::LeaveSecurityCommandBuffer* leavesecuritycommandbuffer);
  ::redhatgamedev::srt::LeaveSecurityCommandBuffer* unsafe_arena_release_leavesecuritycommandbuffer();

  // required .redhatgamedev.srt.SecurityCommandBuffer.SecurityCommandBufferType type = 1 [default = UNKNOWN];
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType type() const;
  void set_type(::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType value);
  private:
  ::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType _internal_type() const;
  void _internal_set_type(::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType value);
  public:

  // @@protoc_insertion_point(class_scope:redhatgamedev.srt.SecurityCommandBuffer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::redhatgamedev::srt::JoinSecurityCommandBuffer* joinsecuritycommandbuffer_;
  ::redhatgamedev::srt::LeaveSecurityCommandBuffer* leavesecuritycommandbuffer_;
  int type_;
  friend struct ::TableStruct_SecurityCommandBuffer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JoinSecurityCommandBuffer

// -------------------------------------------------------------------

// LeaveSecurityCommandBuffer

// required string UUID = 1;
inline bool LeaveSecurityCommandBuffer::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LeaveSecurityCommandBuffer::has_uuid() const {
  return _internal_has_uuid();
}
inline void LeaveSecurityCommandBuffer::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LeaveSecurityCommandBuffer::uuid() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.LeaveSecurityCommandBuffer.UUID)
  return _internal_uuid();
}
inline void LeaveSecurityCommandBuffer::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.LeaveSecurityCommandBuffer.UUID)
}
inline std::string* LeaveSecurityCommandBuffer::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.LeaveSecurityCommandBuffer.UUID)
  return _internal_mutable_uuid();
}
inline const std::string& LeaveSecurityCommandBuffer::_internal_uuid() const {
  return uuid_.Get();
}
inline void LeaveSecurityCommandBuffer::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void LeaveSecurityCommandBuffer::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redhatgamedev.srt.LeaveSecurityCommandBuffer.UUID)
}
inline void LeaveSecurityCommandBuffer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:redhatgamedev.srt.LeaveSecurityCommandBuffer.UUID)
}
inline void LeaveSecurityCommandBuffer::set_uuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redhatgamedev.srt.LeaveSecurityCommandBuffer.UUID)
}
inline std::string* LeaveSecurityCommandBuffer::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* LeaveSecurityCommandBuffer::release_uuid() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.LeaveSecurityCommandBuffer.UUID)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaveSecurityCommandBuffer::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.LeaveSecurityCommandBuffer.UUID)
}
inline std::string* LeaveSecurityCommandBuffer::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:redhatgamedev.srt.LeaveSecurityCommandBuffer.UUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void LeaveSecurityCommandBuffer::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redhatgamedev.srt.LeaveSecurityCommandBuffer.UUID)
}

// -------------------------------------------------------------------

// SecurityCommandBuffer

// required .redhatgamedev.srt.SecurityCommandBuffer.SecurityCommandBufferType type = 1 [default = UNKNOWN];
inline bool SecurityCommandBuffer::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SecurityCommandBuffer::has_type() const {
  return _internal_has_type();
}
inline void SecurityCommandBuffer::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType SecurityCommandBuffer::_internal_type() const {
  return static_cast< ::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType >(type_);
}
inline ::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType SecurityCommandBuffer::type() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.SecurityCommandBuffer.type)
  return _internal_type();
}
inline void SecurityCommandBuffer::_internal_set_type(::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType value) {
  assert(::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  type_ = value;
}
inline void SecurityCommandBuffer::set_type(::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.SecurityCommandBuffer.type)
}

// optional string UUID = 2;
inline bool SecurityCommandBuffer::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SecurityCommandBuffer::has_uuid() const {
  return _internal_has_uuid();
}
inline void SecurityCommandBuffer::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SecurityCommandBuffer::uuid() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.SecurityCommandBuffer.UUID)
  return _internal_uuid();
}
inline void SecurityCommandBuffer::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:redhatgamedev.srt.SecurityCommandBuffer.UUID)
}
inline std::string* SecurityCommandBuffer::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.SecurityCommandBuffer.UUID)
  return _internal_mutable_uuid();
}
inline const std::string& SecurityCommandBuffer::_internal_uuid() const {
  return uuid_.Get();
}
inline void SecurityCommandBuffer::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SecurityCommandBuffer::set_uuid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:redhatgamedev.srt.SecurityCommandBuffer.UUID)
}
inline void SecurityCommandBuffer::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:redhatgamedev.srt.SecurityCommandBuffer.UUID)
}
inline void SecurityCommandBuffer::set_uuid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:redhatgamedev.srt.SecurityCommandBuffer.UUID)
}
inline std::string* SecurityCommandBuffer::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SecurityCommandBuffer::release_uuid() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.SecurityCommandBuffer.UUID)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SecurityCommandBuffer::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.SecurityCommandBuffer.UUID)
}
inline std::string* SecurityCommandBuffer::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:redhatgamedev.srt.SecurityCommandBuffer.UUID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SecurityCommandBuffer::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redhatgamedev.srt.SecurityCommandBuffer.UUID)
}

// optional .redhatgamedev.srt.JoinSecurityCommandBuffer joinSecurityCommandBuffer = 3;
inline bool SecurityCommandBuffer::_internal_has_joinsecuritycommandbuffer() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || joinsecuritycommandbuffer_ != nullptr);
  return value;
}
inline bool SecurityCommandBuffer::has_joinsecuritycommandbuffer() const {
  return _internal_has_joinsecuritycommandbuffer();
}
inline void SecurityCommandBuffer::clear_joinsecuritycommandbuffer() {
  if (joinsecuritycommandbuffer_ != nullptr) joinsecuritycommandbuffer_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::redhatgamedev::srt::JoinSecurityCommandBuffer& SecurityCommandBuffer::_internal_joinsecuritycommandbuffer() const {
  const ::redhatgamedev::srt::JoinSecurityCommandBuffer* p = joinsecuritycommandbuffer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::redhatgamedev::srt::JoinSecurityCommandBuffer*>(
      &::redhatgamedev::srt::_JoinSecurityCommandBuffer_default_instance_);
}
inline const ::redhatgamedev::srt::JoinSecurityCommandBuffer& SecurityCommandBuffer::joinsecuritycommandbuffer() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.SecurityCommandBuffer.joinSecurityCommandBuffer)
  return _internal_joinsecuritycommandbuffer();
}
inline void SecurityCommandBuffer::unsafe_arena_set_allocated_joinsecuritycommandbuffer(
    ::redhatgamedev::srt::JoinSecurityCommandBuffer* joinsecuritycommandbuffer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joinsecuritycommandbuffer_);
  }
  joinsecuritycommandbuffer_ = joinsecuritycommandbuffer;
  if (joinsecuritycommandbuffer) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redhatgamedev.srt.SecurityCommandBuffer.joinSecurityCommandBuffer)
}
inline ::redhatgamedev::srt::JoinSecurityCommandBuffer* SecurityCommandBuffer::release_joinsecuritycommandbuffer() {
  auto temp = unsafe_arena_release_joinsecuritycommandbuffer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::redhatgamedev::srt::JoinSecurityCommandBuffer* SecurityCommandBuffer::unsafe_arena_release_joinsecuritycommandbuffer() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.SecurityCommandBuffer.joinSecurityCommandBuffer)
  _has_bits_[0] &= ~0x00000002u;
  ::redhatgamedev::srt::JoinSecurityCommandBuffer* temp = joinsecuritycommandbuffer_;
  joinsecuritycommandbuffer_ = nullptr;
  return temp;
}
inline ::redhatgamedev::srt::JoinSecurityCommandBuffer* SecurityCommandBuffer::_internal_mutable_joinsecuritycommandbuffer() {
  _has_bits_[0] |= 0x00000002u;
  if (joinsecuritycommandbuffer_ == nullptr) {
    auto* p = CreateMaybeMessage<::redhatgamedev::srt::JoinSecurityCommandBuffer>(GetArena());
    joinsecuritycommandbuffer_ = p;
  }
  return joinsecuritycommandbuffer_;
}
inline ::redhatgamedev::srt::JoinSecurityCommandBuffer* SecurityCommandBuffer::mutable_joinsecuritycommandbuffer() {
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.SecurityCommandBuffer.joinSecurityCommandBuffer)
  return _internal_mutable_joinsecuritycommandbuffer();
}
inline void SecurityCommandBuffer::set_allocated_joinsecuritycommandbuffer(::redhatgamedev::srt::JoinSecurityCommandBuffer* joinsecuritycommandbuffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete joinsecuritycommandbuffer_;
  }
  if (joinsecuritycommandbuffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(joinsecuritycommandbuffer);
    if (message_arena != submessage_arena) {
      joinsecuritycommandbuffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joinsecuritycommandbuffer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  joinsecuritycommandbuffer_ = joinsecuritycommandbuffer;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.SecurityCommandBuffer.joinSecurityCommandBuffer)
}

// optional .redhatgamedev.srt.LeaveSecurityCommandBuffer leaveSecurityCommandBuffer = 4;
inline bool SecurityCommandBuffer::_internal_has_leavesecuritycommandbuffer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || leavesecuritycommandbuffer_ != nullptr);
  return value;
}
inline bool SecurityCommandBuffer::has_leavesecuritycommandbuffer() const {
  return _internal_has_leavesecuritycommandbuffer();
}
inline void SecurityCommandBuffer::clear_leavesecuritycommandbuffer() {
  if (leavesecuritycommandbuffer_ != nullptr) leavesecuritycommandbuffer_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::redhatgamedev::srt::LeaveSecurityCommandBuffer& SecurityCommandBuffer::_internal_leavesecuritycommandbuffer() const {
  const ::redhatgamedev::srt::LeaveSecurityCommandBuffer* p = leavesecuritycommandbuffer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::redhatgamedev::srt::LeaveSecurityCommandBuffer*>(
      &::redhatgamedev::srt::_LeaveSecurityCommandBuffer_default_instance_);
}
inline const ::redhatgamedev::srt::LeaveSecurityCommandBuffer& SecurityCommandBuffer::leavesecuritycommandbuffer() const {
  // @@protoc_insertion_point(field_get:redhatgamedev.srt.SecurityCommandBuffer.leaveSecurityCommandBuffer)
  return _internal_leavesecuritycommandbuffer();
}
inline void SecurityCommandBuffer::unsafe_arena_set_allocated_leavesecuritycommandbuffer(
    ::redhatgamedev::srt::LeaveSecurityCommandBuffer* leavesecuritycommandbuffer) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leavesecuritycommandbuffer_);
  }
  leavesecuritycommandbuffer_ = leavesecuritycommandbuffer;
  if (leavesecuritycommandbuffer) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:redhatgamedev.srt.SecurityCommandBuffer.leaveSecurityCommandBuffer)
}
inline ::redhatgamedev::srt::LeaveSecurityCommandBuffer* SecurityCommandBuffer::release_leavesecuritycommandbuffer() {
  auto temp = unsafe_arena_release_leavesecuritycommandbuffer();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::redhatgamedev::srt::LeaveSecurityCommandBuffer* SecurityCommandBuffer::unsafe_arena_release_leavesecuritycommandbuffer() {
  // @@protoc_insertion_point(field_release:redhatgamedev.srt.SecurityCommandBuffer.leaveSecurityCommandBuffer)
  _has_bits_[0] &= ~0x00000004u;
  ::redhatgamedev::srt::LeaveSecurityCommandBuffer* temp = leavesecuritycommandbuffer_;
  leavesecuritycommandbuffer_ = nullptr;
  return temp;
}
inline ::redhatgamedev::srt::LeaveSecurityCommandBuffer* SecurityCommandBuffer::_internal_mutable_leavesecuritycommandbuffer() {
  _has_bits_[0] |= 0x00000004u;
  if (leavesecuritycommandbuffer_ == nullptr) {
    auto* p = CreateMaybeMessage<::redhatgamedev::srt::LeaveSecurityCommandBuffer>(GetArena());
    leavesecuritycommandbuffer_ = p;
  }
  return leavesecuritycommandbuffer_;
}
inline ::redhatgamedev::srt::LeaveSecurityCommandBuffer* SecurityCommandBuffer::mutable_leavesecuritycommandbuffer() {
  // @@protoc_insertion_point(field_mutable:redhatgamedev.srt.SecurityCommandBuffer.leaveSecurityCommandBuffer)
  return _internal_mutable_leavesecuritycommandbuffer();
}
inline void SecurityCommandBuffer::set_allocated_leavesecuritycommandbuffer(::redhatgamedev::srt::LeaveSecurityCommandBuffer* leavesecuritycommandbuffer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete leavesecuritycommandbuffer_;
  }
  if (leavesecuritycommandbuffer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(leavesecuritycommandbuffer);
    if (message_arena != submessage_arena) {
      leavesecuritycommandbuffer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leavesecuritycommandbuffer, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  leavesecuritycommandbuffer_ = leavesecuritycommandbuffer;
  // @@protoc_insertion_point(field_set_allocated:redhatgamedev.srt.SecurityCommandBuffer.leaveSecurityCommandBuffer)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace srt
}  // namespace redhatgamedev

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType>() {
  return ::redhatgamedev::srt::SecurityCommandBuffer_SecurityCommandBufferType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_SecurityCommandBuffer_2eproto
